// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator.proto

package systemSmartContracts

import (
	bytes "bytes"
	fmt "fmt"
	github_com_ElrondNetwork_elrond_go_core_data "github.com/ElrondNetwork/elrond-go-core/data"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidatorDataV1 struct {
	RegisterNonce   uint64        `protobuf:"varint,1,opt,name=RegisterNonce,proto3" json:"RegisterNonce"`
	Epoch           uint32        `protobuf:"varint,2,opt,name=Epoch,proto3" json:"Epoch"`
	RewardAddress   []byte        `protobuf:"bytes,3,opt,name=RewardAddress,proto3" json:"RewardAddress"`
	TotalStakeValue *math_big.Int `protobuf:"bytes,4,opt,name=TotalStakeValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"TotalStakeValue"`
	LockedStake     *math_big.Int `protobuf:"bytes,5,opt,name=LockedStake,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"LockedStake"`
	MaxStakePerNode *math_big.Int `protobuf:"bytes,6,opt,name=MaxStakePerNode,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"MaxStakePerNode"`
	BlsPubKeys      [][]byte      `protobuf:"bytes,7,rep,name=BlsPubKeys,proto3" json:"BlsPubKeys"`
	NumRegistered   uint32        `protobuf:"varint,8,opt,name=NumRegistered,proto3" json:"NumRegistered"`
}

func (m *ValidatorDataV1) Reset()      { *m = ValidatorDataV1{} }
func (*ValidatorDataV1) ProtoMessage() {}
func (*ValidatorDataV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf1c6ec7c0d80dd5, []int{0}
}
func (m *ValidatorDataV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorDataV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidatorDataV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorDataV1.Merge(m, src)
}
func (m *ValidatorDataV1) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorDataV1) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorDataV1.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorDataV1 proto.InternalMessageInfo

func (m *ValidatorDataV1) GetRegisterNonce() uint64 {
	if m != nil {
		return m.RegisterNonce
	}
	return 0
}

func (m *ValidatorDataV1) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ValidatorDataV1) GetRewardAddress() []byte {
	if m != nil {
		return m.RewardAddress
	}
	return nil
}

func (m *ValidatorDataV1) GetTotalStakeValue() *math_big.Int {
	if m != nil {
		return m.TotalStakeValue
	}
	return nil
}

func (m *ValidatorDataV1) GetLockedStake() *math_big.Int {
	if m != nil {
		return m.LockedStake
	}
	return nil
}

func (m *ValidatorDataV1) GetMaxStakePerNode() *math_big.Int {
	if m != nil {
		return m.MaxStakePerNode
	}
	return nil
}

func (m *ValidatorDataV1) GetBlsPubKeys() [][]byte {
	if m != nil {
		return m.BlsPubKeys
	}
	return nil
}

func (m *ValidatorDataV1) GetNumRegistered() uint32 {
	if m != nil {
		return m.NumRegistered
	}
	return 0
}

type UnstakedValue struct {
	UnstakedEpoch uint32        `protobuf:"varint,1,opt,name=UnstakedEpoch,proto3" json:"UnstakedEpoch"`
	UnstakedValue *math_big.Int `protobuf:"bytes,2,opt,name=UnstakedValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"UnstakedValue"`
}

func (m *UnstakedValue) Reset()      { *m = UnstakedValue{} }
func (*UnstakedValue) ProtoMessage() {}
func (*UnstakedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf1c6ec7c0d80dd5, []int{1}
}
func (m *UnstakedValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnstakedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UnstakedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnstakedValue.Merge(m, src)
}
func (m *UnstakedValue) XXX_Size() int {
	return m.Size()
}
func (m *UnstakedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_UnstakedValue.DiscardUnknown(m)
}

var xxx_messageInfo_UnstakedValue proto.InternalMessageInfo

func (m *UnstakedValue) GetUnstakedEpoch() uint32 {
	if m != nil {
		return m.UnstakedEpoch
	}
	return 0
}

func (m *UnstakedValue) GetUnstakedValue() *math_big.Int {
	if m != nil {
		return m.UnstakedValue
	}
	return nil
}

type ValidatorDataV2 struct {
	RegisterNonce   uint64           `protobuf:"varint,1,opt,name=RegisterNonce,proto3" json:"RegisterNonce"`
	Epoch           uint32           `protobuf:"varint,2,opt,name=Epoch,proto3" json:"Epoch"`
	RewardAddress   []byte           `protobuf:"bytes,3,opt,name=RewardAddress,proto3" json:"RewardAddress"`
	TotalStakeValue *math_big.Int    `protobuf:"bytes,4,opt,name=TotalStakeValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"TotalStakeValue"`
	LockedStake     *math_big.Int    `protobuf:"bytes,5,opt,name=LockedStake,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"LockedStake"`
	MaxStakePerNode *math_big.Int    `protobuf:"bytes,6,opt,name=MaxStakePerNode,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"MaxStakePerNode"`
	BlsPubKeys      [][]byte         `protobuf:"bytes,7,rep,name=BlsPubKeys,proto3" json:"BlsPubKeys"`
	NumRegistered   uint32           `protobuf:"varint,8,opt,name=NumRegistered,proto3" json:"NumRegistered"`
	UnstakedInfo    []*UnstakedValue `protobuf:"bytes,9,rep,name=UnstakedInfo,proto3" json:"UnstakedInfo"`
	TotalUnstaked   *math_big.Int    `protobuf:"bytes,10,opt,name=TotalUnstaked,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"TotalUnstaked"`
	TotalSlashed    *math_big.Int    `protobuf:"bytes,11,opt,name=TotalSlashed,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"TotalSlashed"`
}

func (m *ValidatorDataV2) Reset()      { *m = ValidatorDataV2{} }
func (*ValidatorDataV2) ProtoMessage() {}
func (*ValidatorDataV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf1c6ec7c0d80dd5, []int{2}
}
func (m *ValidatorDataV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorDataV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidatorDataV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorDataV2.Merge(m, src)
}
func (m *ValidatorDataV2) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorDataV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorDataV2.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorDataV2 proto.InternalMessageInfo

func (m *ValidatorDataV2) GetRegisterNonce() uint64 {
	if m != nil {
		return m.RegisterNonce
	}
	return 0
}

func (m *ValidatorDataV2) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ValidatorDataV2) GetRewardAddress() []byte {
	if m != nil {
		return m.RewardAddress
	}
	return nil
}

func (m *ValidatorDataV2) GetTotalStakeValue() *math_big.Int {
	if m != nil {
		return m.TotalStakeValue
	}
	return nil
}

func (m *ValidatorDataV2) GetLockedStake() *math_big.Int {
	if m != nil {
		return m.LockedStake
	}
	return nil
}

func (m *ValidatorDataV2) GetMaxStakePerNode() *math_big.Int {
	if m != nil {
		return m.MaxStakePerNode
	}
	return nil
}

func (m *ValidatorDataV2) GetBlsPubKeys() [][]byte {
	if m != nil {
		return m.BlsPubKeys
	}
	return nil
}

func (m *ValidatorDataV2) GetNumRegistered() uint32 {
	if m != nil {
		return m.NumRegistered
	}
	return 0
}

func (m *ValidatorDataV2) GetUnstakedInfo() []*UnstakedValue {
	if m != nil {
		return m.UnstakedInfo
	}
	return nil
}

func (m *ValidatorDataV2) GetTotalUnstaked() *math_big.Int {
	if m != nil {
		return m.TotalUnstaked
	}
	return nil
}

func (m *ValidatorDataV2) GetTotalSlashed() *math_big.Int {
	if m != nil {
		return m.TotalSlashed
	}
	return nil
}

type ValidatorConfig struct {
	MinStakeValue *math_big.Int `protobuf:"bytes,1,opt,name=MinStakeValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"MinStakeValue"`
	TotalSupply   *math_big.Int `protobuf:"bytes,2,opt,name=TotalSupply,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"TotalSupply"`
	MinStep       *math_big.Int `protobuf:"bytes,3,opt,name=MinStep,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"MinStep"`
	NodePrice     *math_big.Int `protobuf:"bytes,4,opt,name=NodePrice,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"NodePrice"`
	UnJailPrice   *math_big.Int `protobuf:"bytes,5,opt,name=UnJailPrice,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"UnJailPrice"`
}

func (m *ValidatorConfig) Reset()      { *m = ValidatorConfig{} }
func (*ValidatorConfig) ProtoMessage() {}
func (*ValidatorConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf1c6ec7c0d80dd5, []int{3}
}
func (m *ValidatorConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidatorConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorConfig.Merge(m, src)
}
func (m *ValidatorConfig) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorConfig proto.InternalMessageInfo

func (m *ValidatorConfig) GetMinStakeValue() *math_big.Int {
	if m != nil {
		return m.MinStakeValue
	}
	return nil
}

func (m *ValidatorConfig) GetTotalSupply() *math_big.Int {
	if m != nil {
		return m.TotalSupply
	}
	return nil
}

func (m *ValidatorConfig) GetMinStep() *math_big.Int {
	if m != nil {
		return m.MinStep
	}
	return nil
}

func (m *ValidatorConfig) GetNodePrice() *math_big.Int {
	if m != nil {
		return m.NodePrice
	}
	return nil
}

func (m *ValidatorConfig) GetUnJailPrice() *math_big.Int {
	if m != nil {
		return m.UnJailPrice
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidatorDataV1)(nil), "proto.ValidatorDataV1")
	proto.RegisterType((*UnstakedValue)(nil), "proto.UnstakedValue")
	proto.RegisterType((*ValidatorDataV2)(nil), "proto.ValidatorDataV2")
	proto.RegisterType((*ValidatorConfig)(nil), "proto.ValidatorConfig")
}

func init() { proto.RegisterFile("validator.proto", fileDescriptor_bf1c6ec7c0d80dd5) }

var fileDescriptor_bf1c6ec7c0d80dd5 = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0xb1, 0x6f, 0xd3, 0x4e,
	0x18, 0xf5, 0xfd, 0xda, 0xb4, 0xbf, 0x5e, 0x53, 0x0a, 0x56, 0x07, 0x8b, 0xe1, 0x1c, 0x65, 0xca,
	0x52, 0x47, 0x94, 0xa1, 0x03, 0x13, 0x2e, 0x45, 0x6a, 0xa1, 0x51, 0xe5, 0xd2, 0x22, 0x8a, 0x18,
	0x2e, 0xf6, 0xd5, 0xb1, 0xea, 0xf8, 0x22, 0xfb, 0x4c, 0xa9, 0x90, 0x10, 0x4c, 0xac, 0xfc, 0x05,
	0xcc, 0x88, 0xbf, 0x84, 0x81, 0xa1, 0x63, 0x27, 0x43, 0x9c, 0x05, 0x79, 0x40, 0xdd, 0x58, 0x91,
	0xcf, 0xb5, 0x7c, 0xe7, 0xd9, 0x03, 0x43, 0x27, 0xfb, 0xbd, 0x2f, 0xf7, 0xee, 0xcb, 0xbb, 0xef,
	0x9d, 0xe1, 0xea, 0x6b, 0xec, 0x7b, 0x0e, 0x66, 0x34, 0x34, 0x26, 0x21, 0x65, 0x54, 0x6d, 0xf1,
	0xc7, 0xdd, 0x75, 0xd7, 0x63, 0xa3, 0x78, 0x68, 0xd8, 0x74, 0xdc, 0x77, 0xa9, 0x4b, 0xfb, 0x9c,
	0x1e, 0xc6, 0x27, 0x1c, 0x71, 0xc0, 0xdf, 0x8a, 0x55, 0xdd, 0xcf, 0x2d, 0xb8, 0x7a, 0x54, 0x2a,
	0x3d, 0xc2, 0x0c, 0x1f, 0xdd, 0x53, 0x37, 0xe1, 0x8a, 0x45, 0x5c, 0x2f, 0x62, 0x24, 0x1c, 0xd0,
	0xc0, 0x26, 0x1a, 0xe8, 0x80, 0xde, 0xbc, 0x79, 0x27, 0x4b, 0x74, 0xb9, 0x60, 0xc9, 0x50, 0xd5,
	0x61, 0x6b, 0x7b, 0x42, 0xed, 0x91, 0xf6, 0x5f, 0x07, 0xf4, 0x56, 0xcc, 0xa5, 0x2c, 0xd1, 0x0b,
	0xc2, 0x2a, 0x1e, 0x85, 0xf2, 0x19, 0x0e, 0x9d, 0x87, 0x8e, 0x13, 0x92, 0x28, 0xd2, 0xe6, 0x3a,
	0xa0, 0xd7, 0x2e, 0x95, 0x85, 0x82, 0x25, 0x43, 0xf5, 0x23, 0x80, 0xab, 0xcf, 0x28, 0xc3, 0xfe,
	0x01, 0xc3, 0xa7, 0xe4, 0x08, 0xfb, 0x31, 0xd1, 0xe6, 0xf9, 0xda, 0x57, 0x59, 0xa2, 0xd7, 0x4b,
	0x5f, 0x7f, 0xe8, 0x8f, 0xc7, 0x98, 0x8d, 0xfa, 0x43, 0xcf, 0x35, 0x76, 0x02, 0xf6, 0x40, 0xf0,
	0x64, 0xdb, 0x0f, 0x69, 0xe0, 0x0c, 0x08, 0x3b, 0xa3, 0xe1, 0x69, 0x9f, 0x70, 0xb4, 0xee, 0xd2,
	0x75, 0x9b, 0x86, 0xa4, 0xef, 0x60, 0x86, 0x0d, 0xd3, 0x73, 0x77, 0x02, 0xb6, 0x85, 0xf3, 0xff,
	0x65, 0xd5, 0xa5, 0xd5, 0xb7, 0x70, 0xf9, 0x29, 0xb5, 0x4f, 0x89, 0xc3, 0x39, 0xad, 0xc5, 0x9b,
	0x78, 0x91, 0x25, 0xba, 0x48, 0x37, 0xd8, 0x80, 0x28, 0xcb, 0x6d, 0xd8, 0xc3, 0x6f, 0x38, 0xd8,
	0xcf, 0x5d, 0x77, 0x88, 0xb6, 0x50, 0xd9, 0x50, 0x2b, 0x35, 0x69, 0x43, 0x4d, 0x5a, 0x35, 0x20,
	0x34, 0xfd, 0x68, 0x3f, 0x1e, 0x3e, 0x21, 0xe7, 0x91, 0xb6, 0xd8, 0x99, 0xeb, 0xb5, 0xcd, 0x5b,
	0x59, 0xa2, 0x0b, 0xac, 0x25, 0xbc, 0xe7, 0x27, 0x3f, 0x88, 0xc7, 0xe5, 0xb8, 0x10, 0x47, 0xfb,
	0x9f, 0x8f, 0x08, 0x3f, 0x79, 0xa9, 0x60, 0xc9, 0xb0, 0xfb, 0x1d, 0xc0, 0x95, 0xc3, 0x20, 0xca,
	0xf7, 0x76, 0x8a, 0x13, 0xd8, 0xac, 0x88, 0x62, 0xda, 0x40, 0x25, 0x25, 0x15, 0x2c, 0x19, 0xaa,
	0x1f, 0xea, 0x52, 0x7c, 0x4e, 0xdb, 0xe6, 0x4b, 0x71, 0x65, 0xd3, 0x03, 0x24, 0x0b, 0x77, 0x7f,
	0x2f, 0xd6, 0xf3, 0xb6, 0x71, 0x93, 0xb7, 0x9b, 0xbc, 0xfd, 0x33, 0x79, 0x53, 0x77, 0x61, 0xbb,
	0x9c, 0xd8, 0x9d, 0xe0, 0x84, 0x6a, 0x4b, 0x9d, 0xb9, 0xde, 0xf2, 0xc6, 0x5a, 0xf1, 0xb9, 0x30,
	0xa4, 0x61, 0x36, 0x6f, 0x67, 0x89, 0x2e, 0xfd, 0xda, 0x92, 0x10, 0x0f, 0x1c, 0x3f, 0xcf, 0x92,
	0xd5, 0x60, 0x15, 0x38, 0xa9, 0xd0, 0x64, 0xe0, 0x24, 0x61, 0xf5, 0x1d, 0x6c, 0x17, 0x23, 0xe5,
	0xe3, 0x68, 0x44, 0x1c, 0x6d, 0x99, 0x77, 0x70, 0x9c, 0x77, 0x2e, 0xf2, 0x0d, 0x36, 0x20, 0xe9,
	0x76, 0xff, 0xcc, 0x0b, 0x81, 0xdf, 0xa2, 0xc1, 0x89, 0xe7, 0x72, 0x5f, 0xf6, 0xbc, 0x40, 0xc8,
	0x16, 0xa8, 0x7c, 0x91, 0x0a, 0x4d, 0xfa, 0x22, 0x09, 0xe7, 0xb9, 0x2a, 0xfa, 0x8c, 0x27, 0x13,
	0xff, 0xfc, 0xfa, 0x26, 0xe4, 0xb9, 0x12, 0xe8, 0x26, 0x73, 0x25, 0xc8, 0xaa, 0x14, 0x2e, 0xf2,
	0x6e, 0xc8, 0xe4, 0xfa, 0x46, 0x3a, 0xcc, 0x12, 0xbd, 0xa4, 0x1a, 0xdc, 0xb4, 0x94, 0x54, 0x63,
	0xb8, 0x94, 0xc7, 0x68, 0x3f, 0xf4, 0xec, 0xf2, 0x22, 0x7b, 0x9e, 0x25, 0x7a, 0x45, 0x36, 0xb8,
	0x69, 0x25, 0x9a, 0x9b, 0x7c, 0x18, 0xec, 0x62, 0xcf, 0x2f, 0x36, 0x16, 0x2e, 0x2f, 0x81, 0x6e,
	0xd2, 0x64, 0x41, 0xd6, 0x1c, 0x5c, 0x4c, 0x91, 0x72, 0x39, 0x45, 0xca, 0xd5, 0x14, 0x81, 0xf7,
	0x29, 0x02, 0x5f, 0x52, 0x04, 0xbe, 0xa5, 0x08, 0x5c, 0xa4, 0x08, 0x5c, 0xa6, 0x08, 0xfc, 0x4c,
	0x11, 0xf8, 0x95, 0x22, 0xe5, 0x2a, 0x45, 0xe0, 0xd3, 0x0c, 0x29, 0x17, 0x33, 0xa4, 0x5c, 0xce,
	0x90, 0x72, 0xbc, 0x16, 0x9d, 0x47, 0x8c, 0x8c, 0x0f, 0xc6, 0x38, 0x64, 0x5b, 0x34, 0x60, 0x21,
	0xb6, 0x59, 0x34, 0x5c, 0xe0, 0x57, 0xc0, 0xfd, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xdc,
	0x1b, 0x42, 0x7a, 0x0a, 0x00, 0x00,
}

func (this *ValidatorDataV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorDataV1)
	if !ok {
		that2, ok := that.(ValidatorDataV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegisterNonce != that1.RegisterNonce {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if !bytes.Equal(this.RewardAddress, that1.RewardAddress) {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.TotalStakeValue, that1.TotalStakeValue) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.LockedStake, that1.LockedStake) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.MaxStakePerNode, that1.MaxStakePerNode) {
			return false
		}
	}
	if len(this.BlsPubKeys) != len(that1.BlsPubKeys) {
		return false
	}
	for i := range this.BlsPubKeys {
		if !bytes.Equal(this.BlsPubKeys[i], that1.BlsPubKeys[i]) {
			return false
		}
	}
	if this.NumRegistered != that1.NumRegistered {
		return false
	}
	return true
}
func (this *UnstakedValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnstakedValue)
	if !ok {
		that2, ok := that.(UnstakedValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnstakedEpoch != that1.UnstakedEpoch {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.UnstakedValue, that1.UnstakedValue) {
			return false
		}
	}
	return true
}
func (this *ValidatorDataV2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorDataV2)
	if !ok {
		that2, ok := that.(ValidatorDataV2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegisterNonce != that1.RegisterNonce {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if !bytes.Equal(this.RewardAddress, that1.RewardAddress) {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.TotalStakeValue, that1.TotalStakeValue) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.LockedStake, that1.LockedStake) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.MaxStakePerNode, that1.MaxStakePerNode) {
			return false
		}
	}
	if len(this.BlsPubKeys) != len(that1.BlsPubKeys) {
		return false
	}
	for i := range this.BlsPubKeys {
		if !bytes.Equal(this.BlsPubKeys[i], that1.BlsPubKeys[i]) {
			return false
		}
	}
	if this.NumRegistered != that1.NumRegistered {
		return false
	}
	if len(this.UnstakedInfo) != len(that1.UnstakedInfo) {
		return false
	}
	for i := range this.UnstakedInfo {
		if !this.UnstakedInfo[i].Equal(that1.UnstakedInfo[i]) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.TotalUnstaked, that1.TotalUnstaked) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.TotalSlashed, that1.TotalSlashed) {
			return false
		}
	}
	return true
}
func (this *ValidatorConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorConfig)
	if !ok {
		that2, ok := that.(ValidatorConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.MinStakeValue, that1.MinStakeValue) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.TotalSupply, that1.TotalSupply) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.MinStep, that1.MinStep) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.NodePrice, that1.NodePrice) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.UnJailPrice, that1.UnJailPrice) {
			return false
		}
	}
	return true
}
func (this *ValidatorDataV1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&systemSmartContracts.ValidatorDataV1{")
	s = append(s, "RegisterNonce: "+fmt.Sprintf("%#v", this.RegisterNonce)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "RewardAddress: "+fmt.Sprintf("%#v", this.RewardAddress)+",\n")
	s = append(s, "TotalStakeValue: "+fmt.Sprintf("%#v", this.TotalStakeValue)+",\n")
	s = append(s, "LockedStake: "+fmt.Sprintf("%#v", this.LockedStake)+",\n")
	s = append(s, "MaxStakePerNode: "+fmt.Sprintf("%#v", this.MaxStakePerNode)+",\n")
	s = append(s, "BlsPubKeys: "+fmt.Sprintf("%#v", this.BlsPubKeys)+",\n")
	s = append(s, "NumRegistered: "+fmt.Sprintf("%#v", this.NumRegistered)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnstakedValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&systemSmartContracts.UnstakedValue{")
	s = append(s, "UnstakedEpoch: "+fmt.Sprintf("%#v", this.UnstakedEpoch)+",\n")
	s = append(s, "UnstakedValue: "+fmt.Sprintf("%#v", this.UnstakedValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidatorDataV2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&systemSmartContracts.ValidatorDataV2{")
	s = append(s, "RegisterNonce: "+fmt.Sprintf("%#v", this.RegisterNonce)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "RewardAddress: "+fmt.Sprintf("%#v", this.RewardAddress)+",\n")
	s = append(s, "TotalStakeValue: "+fmt.Sprintf("%#v", this.TotalStakeValue)+",\n")
	s = append(s, "LockedStake: "+fmt.Sprintf("%#v", this.LockedStake)+",\n")
	s = append(s, "MaxStakePerNode: "+fmt.Sprintf("%#v", this.MaxStakePerNode)+",\n")
	s = append(s, "BlsPubKeys: "+fmt.Sprintf("%#v", this.BlsPubKeys)+",\n")
	s = append(s, "NumRegistered: "+fmt.Sprintf("%#v", this.NumRegistered)+",\n")
	if this.UnstakedInfo != nil {
		s = append(s, "UnstakedInfo: "+fmt.Sprintf("%#v", this.UnstakedInfo)+",\n")
	}
	s = append(s, "TotalUnstaked: "+fmt.Sprintf("%#v", this.TotalUnstaked)+",\n")
	s = append(s, "TotalSlashed: "+fmt.Sprintf("%#v", this.TotalSlashed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidatorConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&systemSmartContracts.ValidatorConfig{")
	s = append(s, "MinStakeValue: "+fmt.Sprintf("%#v", this.MinStakeValue)+",\n")
	s = append(s, "TotalSupply: "+fmt.Sprintf("%#v", this.TotalSupply)+",\n")
	s = append(s, "MinStep: "+fmt.Sprintf("%#v", this.MinStep)+",\n")
	s = append(s, "NodePrice: "+fmt.Sprintf("%#v", this.NodePrice)+",\n")
	s = append(s, "UnJailPrice: "+fmt.Sprintf("%#v", this.UnJailPrice)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringValidator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ValidatorDataV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorDataV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorDataV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumRegistered != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.NumRegistered))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BlsPubKeys) > 0 {
		for iNdEx := len(m.BlsPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlsPubKeys[iNdEx])
			copy(dAtA[i:], m.BlsPubKeys[iNdEx])
			i = encodeVarintValidator(dAtA, i, uint64(len(m.BlsPubKeys[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.MaxStakePerNode)
		i -= size
		if _, err := __caster.MarshalTo(m.MaxStakePerNode, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.LockedStake)
		i -= size
		if _, err := __caster.MarshalTo(m.LockedStake, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.TotalStakeValue)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalStakeValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Epoch != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if m.RegisterNonce != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.RegisterNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnstakedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnstakedValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnstakedValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.UnstakedValue)
		i -= size
		if _, err := __caster.MarshalTo(m.UnstakedValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.UnstakedEpoch != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.UnstakedEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorDataV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorDataV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorDataV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.TotalSlashed)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalSlashed, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.TotalUnstaked)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalUnstaked, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.UnstakedInfo) > 0 {
		for iNdEx := len(m.UnstakedInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnstakedInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.NumRegistered != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.NumRegistered))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BlsPubKeys) > 0 {
		for iNdEx := len(m.BlsPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlsPubKeys[iNdEx])
			copy(dAtA[i:], m.BlsPubKeys[iNdEx])
			i = encodeVarintValidator(dAtA, i, uint64(len(m.BlsPubKeys[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.MaxStakePerNode)
		i -= size
		if _, err := __caster.MarshalTo(m.MaxStakePerNode, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.LockedStake)
		i -= size
		if _, err := __caster.MarshalTo(m.LockedStake, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.TotalStakeValue)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalStakeValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Epoch != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if m.RegisterNonce != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.RegisterNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.UnJailPrice)
		i -= size
		if _, err := __caster.MarshalTo(m.UnJailPrice, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.NodePrice)
		i -= size
		if _, err := __caster.MarshalTo(m.NodePrice, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.MinStep)
		i -= size
		if _, err := __caster.MarshalTo(m.MinStep, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.TotalSupply)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalSupply, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.MinStakeValue)
		i -= size
		if _, err := __caster.MarshalTo(m.MinStakeValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorDataV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterNonce != 0 {
		n += 1 + sovValidator(uint64(m.RegisterNonce))
	}
	if m.Epoch != 0 {
		n += 1 + sovValidator(uint64(m.Epoch))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.TotalStakeValue)
		n += 1 + l + sovValidator(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.LockedStake)
		n += 1 + l + sovValidator(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.MaxStakePerNode)
		n += 1 + l + sovValidator(uint64(l))
	}
	if len(m.BlsPubKeys) > 0 {
		for _, b := range m.BlsPubKeys {
			l = len(b)
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	if m.NumRegistered != 0 {
		n += 1 + sovValidator(uint64(m.NumRegistered))
	}
	return n
}

func (m *UnstakedValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnstakedEpoch != 0 {
		n += 1 + sovValidator(uint64(m.UnstakedEpoch))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.UnstakedValue)
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func (m *ValidatorDataV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterNonce != 0 {
		n += 1 + sovValidator(uint64(m.RegisterNonce))
	}
	if m.Epoch != 0 {
		n += 1 + sovValidator(uint64(m.Epoch))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.TotalStakeValue)
		n += 1 + l + sovValidator(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.LockedStake)
		n += 1 + l + sovValidator(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.MaxStakePerNode)
		n += 1 + l + sovValidator(uint64(l))
	}
	if len(m.BlsPubKeys) > 0 {
		for _, b := range m.BlsPubKeys {
			l = len(b)
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	if m.NumRegistered != 0 {
		n += 1 + sovValidator(uint64(m.NumRegistered))
	}
	if len(m.UnstakedInfo) > 0 {
		for _, e := range m.UnstakedInfo {
			l = e.Size()
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.TotalUnstaked)
		n += 1 + l + sovValidator(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.TotalSlashed)
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func (m *ValidatorConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.MinStakeValue)
		n += 1 + l + sovValidator(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.TotalSupply)
		n += 1 + l + sovValidator(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.MinStep)
		n += 1 + l + sovValidator(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.NodePrice)
		n += 1 + l + sovValidator(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.UnJailPrice)
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ValidatorDataV1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidatorDataV1{`,
		`RegisterNonce:` + fmt.Sprintf("%v", this.RegisterNonce) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`RewardAddress:` + fmt.Sprintf("%v", this.RewardAddress) + `,`,
		`TotalStakeValue:` + fmt.Sprintf("%v", this.TotalStakeValue) + `,`,
		`LockedStake:` + fmt.Sprintf("%v", this.LockedStake) + `,`,
		`MaxStakePerNode:` + fmt.Sprintf("%v", this.MaxStakePerNode) + `,`,
		`BlsPubKeys:` + fmt.Sprintf("%v", this.BlsPubKeys) + `,`,
		`NumRegistered:` + fmt.Sprintf("%v", this.NumRegistered) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnstakedValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnstakedValue{`,
		`UnstakedEpoch:` + fmt.Sprintf("%v", this.UnstakedEpoch) + `,`,
		`UnstakedValue:` + fmt.Sprintf("%v", this.UnstakedValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidatorDataV2) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUnstakedInfo := "[]*UnstakedValue{"
	for _, f := range this.UnstakedInfo {
		repeatedStringForUnstakedInfo += strings.Replace(f.String(), "UnstakedValue", "UnstakedValue", 1) + ","
	}
	repeatedStringForUnstakedInfo += "}"
	s := strings.Join([]string{`&ValidatorDataV2{`,
		`RegisterNonce:` + fmt.Sprintf("%v", this.RegisterNonce) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`RewardAddress:` + fmt.Sprintf("%v", this.RewardAddress) + `,`,
		`TotalStakeValue:` + fmt.Sprintf("%v", this.TotalStakeValue) + `,`,
		`LockedStake:` + fmt.Sprintf("%v", this.LockedStake) + `,`,
		`MaxStakePerNode:` + fmt.Sprintf("%v", this.MaxStakePerNode) + `,`,
		`BlsPubKeys:` + fmt.Sprintf("%v", this.BlsPubKeys) + `,`,
		`NumRegistered:` + fmt.Sprintf("%v", this.NumRegistered) + `,`,
		`UnstakedInfo:` + repeatedStringForUnstakedInfo + `,`,
		`TotalUnstaked:` + fmt.Sprintf("%v", this.TotalUnstaked) + `,`,
		`TotalSlashed:` + fmt.Sprintf("%v", this.TotalSlashed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidatorConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidatorConfig{`,
		`MinStakeValue:` + fmt.Sprintf("%v", this.MinStakeValue) + `,`,
		`TotalSupply:` + fmt.Sprintf("%v", this.TotalSupply) + `,`,
		`MinStep:` + fmt.Sprintf("%v", this.MinStep) + `,`,
		`NodePrice:` + fmt.Sprintf("%v", this.NodePrice) + `,`,
		`UnJailPrice:` + fmt.Sprintf("%v", this.UnJailPrice) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringValidator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ValidatorDataV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorDataV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorDataV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterNonce", wireType)
			}
			m.RegisterNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisterNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = append(m.RewardAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAddress == nil {
				m.RewardAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakeValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalStakeValue = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedStake", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.LockedStake = tmp
				}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStakePerNode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MaxStakePerNode = tmp
				}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlsPubKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlsPubKeys = append(m.BlsPubKeys, make([]byte, postIndex-iNdEx))
			copy(m.BlsPubKeys[len(m.BlsPubKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRegistered", wireType)
			}
			m.NumRegistered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRegistered |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnstakedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnstakedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnstakedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakedEpoch", wireType)
			}
			m.UnstakedEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnstakedEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakedValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.UnstakedValue = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorDataV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorDataV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorDataV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterNonce", wireType)
			}
			m.RegisterNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisterNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = append(m.RewardAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAddress == nil {
				m.RewardAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakeValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalStakeValue = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedStake", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.LockedStake = tmp
				}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStakePerNode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MaxStakePerNode = tmp
				}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlsPubKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlsPubKeys = append(m.BlsPubKeys, make([]byte, postIndex-iNdEx))
			copy(m.BlsPubKeys[len(m.BlsPubKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRegistered", wireType)
			}
			m.NumRegistered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRegistered |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakedInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnstakedInfo = append(m.UnstakedInfo, &UnstakedValue{})
			if err := m.UnstakedInfo[len(m.UnstakedInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnstaked", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalUnstaked = tmp
				}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSlashed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalSlashed = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MinStakeValue = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalSupply = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStep", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MinStep = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePrice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.NodePrice = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnJailPrice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.UnJailPrice = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
