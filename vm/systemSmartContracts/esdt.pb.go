// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: esdt.proto

package systemSmartContracts

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_multiversx_mx_chain_core_go_data "github.com/multiversx/mx-chain-core-go/data"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ESDTDataV1 struct {
	OwnerAddress             []byte        `protobuf:"bytes,1,opt,name=OwnerAddress,proto3" json:"OwnerAddress"`
	TokenName                []byte        `protobuf:"bytes,2,opt,name=TokenName,proto3" json:"TokenName"`
	TickerName               []byte        `protobuf:"bytes,3,opt,name=TickerName,proto3" json:"TickerName"`
	TokenType                []byte        `protobuf:"bytes,4,opt,name=TokenType,proto3" json:"TokenType"`
	Mintable                 bool          `protobuf:"varint,5,opt,name=Mintable,proto3" json:"Mintable"`
	Burnable                 bool          `protobuf:"varint,6,opt,name=Burnable,proto3" json:"Burnable"`
	CanPause                 bool          `protobuf:"varint,7,opt,name=CanPause,proto3" json:"CanPause"`
	CanFreeze                bool          `protobuf:"varint,8,opt,name=CanFreeze,proto3" json:"CanFreeze"`
	CanWipe                  bool          `protobuf:"varint,9,opt,name=CanWipe,proto3" json:"CanWipe"`
	Upgradable               bool          `protobuf:"varint,10,opt,name=Upgradable,proto3" json:"CanUpgrade"`
	CanChangeOwner           bool          `protobuf:"varint,11,opt,name=CanChangeOwner,proto3" json:"CanChangeOwner"`
	IsPaused                 bool          `protobuf:"varint,12,opt,name=IsPaused,proto3" json:"IsPaused"`
	MintedValue              *math_big.Int `protobuf:"bytes,13,opt,name=MintedValue,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"MintedValue"`
	BurntValue               *math_big.Int `protobuf:"bytes,14,opt,name=BurntValue,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"BurntValue"`
	NumDecimals              uint32        `protobuf:"varint,15,opt,name=NumDecimals,proto3" json:"NumDecimals"`
	CanAddSpecialRoles       bool          `protobuf:"varint,16,opt,name=CanAddSpecialRoles,proto3" json:"CanAddSpecialRoles"`
	NFTCreateStopped         bool          `protobuf:"varint,17,opt,name=NFTCreateStopped,proto3" json:"NFTCreateStopped"`
	CanTransferNFTCreateRole bool          `protobuf:"varint,18,opt,name=CanTransferNFTCreateRole,proto3" json:"CanTransferNFTCreateRole"`
	SpecialRoles             []*ESDTRoles  `protobuf:"bytes,19,rep,name=SpecialRoles,proto3" json:"SpecialRoles"`
	NumWiped                 uint32        `protobuf:"varint,20,opt,name=NumWiped,proto3" json:"NumWiped"`
}

func (m *ESDTDataV1) Reset()      { *m = ESDTDataV1{} }
func (*ESDTDataV1) ProtoMessage() {}
func (*ESDTDataV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_e413e402abc6a34c, []int{0}
}
func (m *ESDTDataV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESDTDataV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ESDTDataV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESDTDataV1.Merge(m, src)
}
func (m *ESDTDataV1) XXX_Size() int {
	return m.Size()
}
func (m *ESDTDataV1) XXX_DiscardUnknown() {
	xxx_messageInfo_ESDTDataV1.DiscardUnknown(m)
}

var xxx_messageInfo_ESDTDataV1 proto.InternalMessageInfo

func (m *ESDTDataV1) GetOwnerAddress() []byte {
	if m != nil {
		return m.OwnerAddress
	}
	return nil
}

func (m *ESDTDataV1) GetTokenName() []byte {
	if m != nil {
		return m.TokenName
	}
	return nil
}

func (m *ESDTDataV1) GetTickerName() []byte {
	if m != nil {
		return m.TickerName
	}
	return nil
}

func (m *ESDTDataV1) GetTokenType() []byte {
	if m != nil {
		return m.TokenType
	}
	return nil
}

func (m *ESDTDataV1) GetMintable() bool {
	if m != nil {
		return m.Mintable
	}
	return false
}

func (m *ESDTDataV1) GetBurnable() bool {
	if m != nil {
		return m.Burnable
	}
	return false
}

func (m *ESDTDataV1) GetCanPause() bool {
	if m != nil {
		return m.CanPause
	}
	return false
}

func (m *ESDTDataV1) GetCanFreeze() bool {
	if m != nil {
		return m.CanFreeze
	}
	return false
}

func (m *ESDTDataV1) GetCanWipe() bool {
	if m != nil {
		return m.CanWipe
	}
	return false
}

func (m *ESDTDataV1) GetUpgradable() bool {
	if m != nil {
		return m.Upgradable
	}
	return false
}

func (m *ESDTDataV1) GetCanChangeOwner() bool {
	if m != nil {
		return m.CanChangeOwner
	}
	return false
}

func (m *ESDTDataV1) GetIsPaused() bool {
	if m != nil {
		return m.IsPaused
	}
	return false
}

func (m *ESDTDataV1) GetMintedValue() *math_big.Int {
	if m != nil {
		return m.MintedValue
	}
	return nil
}

func (m *ESDTDataV1) GetBurntValue() *math_big.Int {
	if m != nil {
		return m.BurntValue
	}
	return nil
}

func (m *ESDTDataV1) GetNumDecimals() uint32 {
	if m != nil {
		return m.NumDecimals
	}
	return 0
}

func (m *ESDTDataV1) GetCanAddSpecialRoles() bool {
	if m != nil {
		return m.CanAddSpecialRoles
	}
	return false
}

func (m *ESDTDataV1) GetNFTCreateStopped() bool {
	if m != nil {
		return m.NFTCreateStopped
	}
	return false
}

func (m *ESDTDataV1) GetCanTransferNFTCreateRole() bool {
	if m != nil {
		return m.CanTransferNFTCreateRole
	}
	return false
}

func (m *ESDTDataV1) GetSpecialRoles() []*ESDTRoles {
	if m != nil {
		return m.SpecialRoles
	}
	return nil
}

func (m *ESDTDataV1) GetNumWiped() uint32 {
	if m != nil {
		return m.NumWiped
	}
	return 0
}

type ESDTDataV2 struct {
	OwnerAddress             []byte        `protobuf:"bytes,1,opt,name=OwnerAddress,proto3" json:"OwnerAddress"`
	TokenName                []byte        `protobuf:"bytes,2,opt,name=TokenName,proto3" json:"TokenName"`
	TickerName               []byte        `protobuf:"bytes,3,opt,name=TickerName,proto3" json:"TickerName"`
	TokenType                []byte        `protobuf:"bytes,4,opt,name=TokenType,proto3" json:"TokenType"`
	Mintable                 bool          `protobuf:"varint,5,opt,name=Mintable,proto3" json:"Mintable"`
	Burnable                 bool          `protobuf:"varint,6,opt,name=Burnable,proto3" json:"Burnable"`
	CanPause                 bool          `protobuf:"varint,7,opt,name=CanPause,proto3" json:"CanPause"`
	CanFreeze                bool          `protobuf:"varint,8,opt,name=CanFreeze,proto3" json:"CanFreeze"`
	CanWipe                  bool          `protobuf:"varint,9,opt,name=CanWipe,proto3" json:"CanWipe"`
	Upgradable               bool          `protobuf:"varint,10,opt,name=Upgradable,proto3" json:"CanUpgrade"`
	CanChangeOwner           bool          `protobuf:"varint,11,opt,name=CanChangeOwner,proto3" json:"CanChangeOwner"`
	IsPaused                 bool          `protobuf:"varint,12,opt,name=IsPaused,proto3" json:"IsPaused"`
	MintedValue              *math_big.Int `protobuf:"bytes,13,opt,name=MintedValue,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"MintedValue"`
	BurntValue               *math_big.Int `protobuf:"bytes,14,opt,name=BurntValue,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"BurntValue"`
	NumDecimals              uint32        `protobuf:"varint,15,opt,name=NumDecimals,proto3" json:"NumDecimals"`
	CanAddSpecialRoles       bool          `protobuf:"varint,16,opt,name=CanAddSpecialRoles,proto3" json:"CanAddSpecialRoles"`
	NFTCreateStopped         bool          `protobuf:"varint,17,opt,name=NFTCreateStopped,proto3" json:"NFTCreateStopped"`
	CanTransferNFTCreateRole bool          `protobuf:"varint,18,opt,name=CanTransferNFTCreateRole,proto3" json:"CanTransferNFTCreateRole"`
	SpecialRoles             []*ESDTRoles  `protobuf:"bytes,19,rep,name=SpecialRoles,proto3" json:"SpecialRoles"`
	NumWiped                 uint32        `protobuf:"varint,20,opt,name=NumWiped,proto3" json:"NumWiped"`
	CanCreateMultiShard      bool          `protobuf:"varint,21,opt,name=CanCreateMultiShard,proto3" json:"CanCreateMultiShard"`
}

func (m *ESDTDataV2) Reset()      { *m = ESDTDataV2{} }
func (*ESDTDataV2) ProtoMessage() {}
func (*ESDTDataV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_e413e402abc6a34c, []int{1}
}
func (m *ESDTDataV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESDTDataV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ESDTDataV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESDTDataV2.Merge(m, src)
}
func (m *ESDTDataV2) XXX_Size() int {
	return m.Size()
}
func (m *ESDTDataV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ESDTDataV2.DiscardUnknown(m)
}

var xxx_messageInfo_ESDTDataV2 proto.InternalMessageInfo

func (m *ESDTDataV2) GetOwnerAddress() []byte {
	if m != nil {
		return m.OwnerAddress
	}
	return nil
}

func (m *ESDTDataV2) GetTokenName() []byte {
	if m != nil {
		return m.TokenName
	}
	return nil
}

func (m *ESDTDataV2) GetTickerName() []byte {
	if m != nil {
		return m.TickerName
	}
	return nil
}

func (m *ESDTDataV2) GetTokenType() []byte {
	if m != nil {
		return m.TokenType
	}
	return nil
}

func (m *ESDTDataV2) GetMintable() bool {
	if m != nil {
		return m.Mintable
	}
	return false
}

func (m *ESDTDataV2) GetBurnable() bool {
	if m != nil {
		return m.Burnable
	}
	return false
}

func (m *ESDTDataV2) GetCanPause() bool {
	if m != nil {
		return m.CanPause
	}
	return false
}

func (m *ESDTDataV2) GetCanFreeze() bool {
	if m != nil {
		return m.CanFreeze
	}
	return false
}

func (m *ESDTDataV2) GetCanWipe() bool {
	if m != nil {
		return m.CanWipe
	}
	return false
}

func (m *ESDTDataV2) GetUpgradable() bool {
	if m != nil {
		return m.Upgradable
	}
	return false
}

func (m *ESDTDataV2) GetCanChangeOwner() bool {
	if m != nil {
		return m.CanChangeOwner
	}
	return false
}

func (m *ESDTDataV2) GetIsPaused() bool {
	if m != nil {
		return m.IsPaused
	}
	return false
}

func (m *ESDTDataV2) GetMintedValue() *math_big.Int {
	if m != nil {
		return m.MintedValue
	}
	return nil
}

func (m *ESDTDataV2) GetBurntValue() *math_big.Int {
	if m != nil {
		return m.BurntValue
	}
	return nil
}

func (m *ESDTDataV2) GetNumDecimals() uint32 {
	if m != nil {
		return m.NumDecimals
	}
	return 0
}

func (m *ESDTDataV2) GetCanAddSpecialRoles() bool {
	if m != nil {
		return m.CanAddSpecialRoles
	}
	return false
}

func (m *ESDTDataV2) GetNFTCreateStopped() bool {
	if m != nil {
		return m.NFTCreateStopped
	}
	return false
}

func (m *ESDTDataV2) GetCanTransferNFTCreateRole() bool {
	if m != nil {
		return m.CanTransferNFTCreateRole
	}
	return false
}

func (m *ESDTDataV2) GetSpecialRoles() []*ESDTRoles {
	if m != nil {
		return m.SpecialRoles
	}
	return nil
}

func (m *ESDTDataV2) GetNumWiped() uint32 {
	if m != nil {
		return m.NumWiped
	}
	return 0
}

func (m *ESDTDataV2) GetCanCreateMultiShard() bool {
	if m != nil {
		return m.CanCreateMultiShard
	}
	return false
}

type ESDTRoles struct {
	Address []byte   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address"`
	Roles   [][]byte `protobuf:"bytes,2,rep,name=Roles,proto3" json:"Roles"`
}

func (m *ESDTRoles) Reset()      { *m = ESDTRoles{} }
func (*ESDTRoles) ProtoMessage() {}
func (*ESDTRoles) Descriptor() ([]byte, []int) {
	return fileDescriptor_e413e402abc6a34c, []int{2}
}
func (m *ESDTRoles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESDTRoles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ESDTRoles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESDTRoles.Merge(m, src)
}
func (m *ESDTRoles) XXX_Size() int {
	return m.Size()
}
func (m *ESDTRoles) XXX_DiscardUnknown() {
	xxx_messageInfo_ESDTRoles.DiscardUnknown(m)
}

var xxx_messageInfo_ESDTRoles proto.InternalMessageInfo

func (m *ESDTRoles) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ESDTRoles) GetRoles() [][]byte {
	if m != nil {
		return m.Roles
	}
	return nil
}

type ESDTConfig struct {
	OwnerAddress       []byte        `protobuf:"bytes,1,opt,name=OwnerAddress,proto3" json:"OwnerAddress"`
	BaseIssuingCost    *math_big.Int `protobuf:"bytes,2,opt,name=BaseIssuingCost,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"BaseIssuingCost"`
	MinTokenNameLength uint32        `protobuf:"varint,3,opt,name=MinTokenNameLength,proto3" json:"MinTokenNameLength"`
	MaxTokenNameLength uint32        `protobuf:"varint,4,opt,name=MaxTokenNameLength,proto3" json:"MaxTokenNameLength"`
}

func (m *ESDTConfig) Reset()      { *m = ESDTConfig{} }
func (*ESDTConfig) ProtoMessage() {}
func (*ESDTConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e413e402abc6a34c, []int{3}
}
func (m *ESDTConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ESDTConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ESDTConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESDTConfig.Merge(m, src)
}
func (m *ESDTConfig) XXX_Size() int {
	return m.Size()
}
func (m *ESDTConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ESDTConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ESDTConfig proto.InternalMessageInfo

func (m *ESDTConfig) GetOwnerAddress() []byte {
	if m != nil {
		return m.OwnerAddress
	}
	return nil
}

func (m *ESDTConfig) GetBaseIssuingCost() *math_big.Int {
	if m != nil {
		return m.BaseIssuingCost
	}
	return nil
}

func (m *ESDTConfig) GetMinTokenNameLength() uint32 {
	if m != nil {
		return m.MinTokenNameLength
	}
	return 0
}

func (m *ESDTConfig) GetMaxTokenNameLength() uint32 {
	if m != nil {
		return m.MaxTokenNameLength
	}
	return 0
}

func init() {
	proto.RegisterType((*ESDTDataV1)(nil), "proto.ESDTDataV1")
	proto.RegisterType((*ESDTDataV2)(nil), "proto.ESDTDataV2")
	proto.RegisterType((*ESDTRoles)(nil), "proto.ESDTRoles")
	proto.RegisterType((*ESDTConfig)(nil), "proto.ESDTConfig")
}

func init() { proto.RegisterFile("esdt.proto", fileDescriptor_e413e402abc6a34c) }

var fileDescriptor_e413e402abc6a34c = []byte{
	// 849 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x54, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x26, 0x4d, 0x1b, 0x8f, 0x9d, 0x1f, 0x4c, 0x03, 0x8c, 0x10, 0xda, 0xb5, 0x22, 0x21,
	0x59, 0x42, 0xb1, 0xd5, 0xc2, 0x09, 0x2e, 0xd4, 0x9b, 0x46, 0xb2, 0x44, 0x0c, 0x1a, 0x9b, 0xb6,
	0x42, 0x5c, 0xc6, 0xde, 0xc9, 0x7a, 0x55, 0xef, 0xac, 0x35, 0x33, 0x4b, 0xd3, 0x9e, 0x38, 0x71,
	0xe6, 0xcf, 0x40, 0x1c, 0xf9, 0x2b, 0x38, 0xe6, 0x18, 0x09, 0x69, 0x21, 0xce, 0x05, 0xed, 0xa9,
	0xff, 0x00, 0x12, 0x9a, 0xb7, 0xec, 0x0f, 0x3b, 0xee, 0x05, 0xf5, 0xc0, 0x21, 0xa7, 0xfd, 0xde,
	0xf7, 0xbe, 0x7d, 0x3b, 0xef, 0xcd, 0xdb, 0x0f, 0x21, 0xae, 0x3c, 0xdd, 0x99, 0xcb, 0x48, 0x47,
	0x78, 0x0b, 0x1e, 0x1f, 0x1c, 0xf9, 0x81, 0x9e, 0xc6, 0xe3, 0xce, 0x24, 0x0a, 0xbb, 0x7e, 0xe4,
	0x47, 0x5d, 0xa0, 0xc7, 0xf1, 0x19, 0x44, 0x10, 0x00, 0xca, 0xde, 0x3a, 0xfc, 0xb5, 0x8e, 0xd0,
	0xe3, 0xe1, 0xf1, 0xe8, 0x98, 0x69, 0xf6, 0xe4, 0x01, 0xfe, 0x14, 0x35, 0xbf, 0x7a, 0x21, 0xb8,
	0x7c, 0xe4, 0x79, 0x92, 0x2b, 0x45, 0xac, 0x96, 0xd5, 0x6e, 0xf6, 0xf6, 0xd3, 0xc4, 0x59, 0xe2,
	0xe9, 0x52, 0x84, 0x3f, 0x46, 0xf5, 0x51, 0xf4, 0x9c, 0x8b, 0x01, 0x0b, 0x39, 0xd9, 0x80, 0x57,
	0x76, 0xd2, 0xc4, 0x29, 0x49, 0x5a, 0x42, 0xdc, 0x41, 0x68, 0x14, 0x4c, 0x9e, 0x73, 0x09, 0xea,
	0x4d, 0x50, 0xef, 0xa6, 0x89, 0x53, 0x61, 0x69, 0x05, 0x17, 0xc5, 0x47, 0x2f, 0xe7, 0x9c, 0xdc,
	0x59, 0x29, 0x6e, 0x48, 0x5a, 0x42, 0xdc, 0x46, 0xdb, 0xa7, 0x81, 0xd0, 0x6c, 0x3c, 0xe3, 0x64,
	0xab, 0x65, 0xb5, 0xb7, 0x7b, 0xcd, 0x34, 0x71, 0x0a, 0x8e, 0x16, 0xc8, 0x28, 0x7b, 0xb1, 0x14,
	0xa0, 0xbc, 0x5b, 0x2a, 0x73, 0x8e, 0x16, 0xc8, 0x28, 0x5d, 0x26, 0xbe, 0x66, 0xb1, 0xe2, 0xe4,
	0x5e, 0xa9, 0xcc, 0x39, 0x5a, 0x20, 0x73, 0x54, 0x97, 0x89, 0x13, 0xc9, 0xf9, 0x2b, 0x4e, 0xb6,
	0x41, 0x0a, 0x47, 0x2d, 0x48, 0x5a, 0x42, 0xfc, 0x11, 0xba, 0xe7, 0x32, 0xf1, 0x34, 0x98, 0x73,
	0x52, 0x07, 0x69, 0x23, 0x4d, 0x9c, 0x9c, 0xa2, 0x39, 0x30, 0xe3, 0xfa, 0x66, 0xee, 0x4b, 0xe6,
	0xc1, 0x49, 0x11, 0x28, 0x61, 0x5c, 0x2e, 0x13, 0x59, 0x82, 0xd3, 0x8a, 0x02, 0x7f, 0x86, 0x76,
	0x5d, 0x26, 0xdc, 0x29, 0x13, 0x3e, 0x87, 0x4b, 0x22, 0x0d, 0x78, 0x07, 0xa7, 0x89, 0xb3, 0x92,
	0xa1, 0x2b, 0xb1, 0xe9, 0xb4, 0xaf, 0xa0, 0x15, 0x8f, 0x34, 0xcb, 0x4e, 0x73, 0x8e, 0x16, 0x08,
	0xbf, 0x42, 0x0d, 0x33, 0x49, 0xee, 0x3d, 0x61, 0xb3, 0x98, 0x93, 0x1d, 0xb8, 0x96, 0x67, 0x69,
	0xe2, 0x54, 0xe9, 0x5f, 0xfe, 0x70, 0x1e, 0x87, 0x4c, 0x4f, 0xbb, 0xe3, 0xc0, 0xef, 0xf4, 0x85,
	0xfe, 0xbc, 0xb2, 0x9a, 0x61, 0x3c, 0xd3, 0xc1, 0xf7, 0x5c, 0xaa, 0xf3, 0x6e, 0x78, 0x7e, 0x34,
	0x99, 0xb2, 0x40, 0x1c, 0x4d, 0x22, 0xc9, 0x8f, 0xfc, 0xa8, 0xeb, 0x31, 0xcd, 0x3a, 0xbd, 0xc0,
	0xef, 0x0b, 0xed, 0x32, 0xa5, 0xb9, 0xa4, 0xd5, 0xaa, 0xf8, 0x05, 0x42, 0xe6, 0x6e, 0x74, 0xf6,
	0xe9, 0x5d, 0xf8, 0xf4, 0x53, 0x33, 0x91, 0x92, 0x7d, 0x7b, 0x5f, 0xae, 0x14, 0xc5, 0x0f, 0x50,
	0x63, 0x10, 0x87, 0xc7, 0x7c, 0x12, 0x84, 0x6c, 0xa6, 0xc8, 0x5e, 0xcb, 0x6a, 0xef, 0xf4, 0xf6,
	0x4c, 0xd3, 0x15, 0x9a, 0x56, 0x03, 0x7c, 0x82, 0xb0, 0xcb, 0xc4, 0x23, 0xcf, 0x1b, 0xce, 0xf9,
	0x24, 0x60, 0x33, 0x1a, 0xcd, 0xb8, 0x22, 0xfb, 0x30, 0xdb, 0xf7, 0xd2, 0xc4, 0x59, 0x93, 0xa5,
	0x6b, 0x38, 0xfc, 0x05, 0xda, 0x1f, 0x9c, 0x8c, 0x5c, 0xc9, 0x99, 0xe6, 0x43, 0x1d, 0xcd, 0xe7,
	0xdc, 0x23, 0xef, 0x40, 0x95, 0x83, 0x34, 0x71, 0x6e, 0xe4, 0xe8, 0x0d, 0x06, 0x3f, 0x43, 0xc4,
	0x65, 0x62, 0x24, 0x99, 0x50, 0x67, 0x5c, 0x16, 0x69, 0x53, 0x9e, 0x60, 0xa8, 0xf4, 0x61, 0x9a,
	0x38, 0x6f, 0xd4, 0xd0, 0x37, 0x66, 0xf0, 0x09, 0x6a, 0x2e, 0x75, 0x77, 0xbf, 0xb5, 0xd9, 0x6e,
	0x3c, 0xdc, 0xcf, 0x0c, 0xa6, 0x63, 0xcc, 0x05, 0xf8, 0xcc, 0x45, 0x96, 0x3a, 0x5d, 0x8a, 0xcc,
	0xf6, 0x0d, 0xe2, 0xd0, 0x2c, 0xbd, 0x47, 0x0e, 0x60, 0xb6, 0xb0, 0x7d, 0x39, 0x47, 0x0b, 0x74,
	0xf8, 0x77, 0xd5, 0xb4, 0x1e, 0xde, 0x9a, 0xd6, 0xad, 0x69, 0xdd, 0x9a, 0xd6, 0xad, 0x69, 0xfd,
	0xbf, 0x4d, 0x0b, 0xf7, 0xd1, 0x7d, 0xb3, 0xb9, 0x70, 0x84, 0x53, 0x73, 0x9d, 0xc3, 0x29, 0x93,
	0x1e, 0x79, 0x17, 0xda, 0x78, 0x3f, 0x4d, 0x9c, 0x75, 0x69, 0xba, 0x8e, 0x3c, 0x1c, 0xa2, 0x7a,
	0x71, 0x42, 0xf3, 0x4b, 0x2e, 0x1b, 0x1f, 0xfc, 0x92, 0xb9, 0xe7, 0xe5, 0x00, 0x3b, 0x68, 0x2b,
	0xeb, 0x74, 0xa3, 0xb5, 0xd9, 0x6e, 0xf6, 0xea, 0x69, 0xe2, 0x64, 0x04, 0xcd, 0x1e, 0x87, 0xbf,
	0x6f, 0x64, 0xa6, 0xea, 0x46, 0xe2, 0x2c, 0xf0, 0xff, 0xa3, 0xa9, 0xfe, 0x68, 0xa1, 0xbd, 0x1e,
	0x53, 0xbc, 0xaf, 0x54, 0x1c, 0x08, 0xdf, 0x8d, 0x94, 0xfe, 0xd7, 0x5b, 0xbf, 0x4b, 0x13, 0x67,
	0x35, 0xf5, 0xf6, 0x36, 0x7e, 0xb5, 0xb2, 0xd9, 0xe1, 0xd3, 0x40, 0x14, 0x06, 0xfe, 0x25, 0x17,
	0xbe, 0x9e, 0x82, 0x71, 0xef, 0x64, 0x3b, 0x7c, 0x33, 0x4b, 0xd7, 0x70, 0x50, 0x87, 0x9d, 0xaf,
	0xd6, 0xb9, 0x53, 0xa9, 0x73, 0x23, 0x4b, 0xd7, 0x70, 0xbd, 0xc1, 0xc5, 0x95, 0x5d, 0xbb, 0xbc,
	0xb2, 0x6b, 0xaf, 0xaf, 0x6c, 0xeb, 0x87, 0x85, 0x6d, 0xfd, 0xbc, 0xb0, 0xad, 0xdf, 0x16, 0xb6,
	0x75, 0xb1, 0xb0, 0xad, 0xcb, 0x85, 0x6d, 0xfd, 0xb9, 0xb0, 0xad, 0xbf, 0x16, 0x76, 0xed, 0xf5,
	0xc2, 0xb6, 0x7e, 0xba, 0xb6, 0x6b, 0x17, 0xd7, 0x76, 0xed, 0xf2, 0xda, 0xae, 0x7d, 0x7b, 0xa0,
	0x5e, 0x2a, 0xcd, 0xc3, 0x61, 0xc8, 0xa4, 0x76, 0x23, 0xa1, 0x25, 0x9b, 0x68, 0x35, 0xbe, 0x0b,
	0x8b, 0xfa, 0xc9, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xad, 0x29, 0x5c, 0x02, 0x0c, 0x00,
	0x00,
}

func (this *ESDTDataV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ESDTDataV1)
	if !ok {
		that2, ok := that.(ESDTDataV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.OwnerAddress, that1.OwnerAddress) {
		return false
	}
	if !bytes.Equal(this.TokenName, that1.TokenName) {
		return false
	}
	if !bytes.Equal(this.TickerName, that1.TickerName) {
		return false
	}
	if !bytes.Equal(this.TokenType, that1.TokenType) {
		return false
	}
	if this.Mintable != that1.Mintable {
		return false
	}
	if this.Burnable != that1.Burnable {
		return false
	}
	if this.CanPause != that1.CanPause {
		return false
	}
	if this.CanFreeze != that1.CanFreeze {
		return false
	}
	if this.CanWipe != that1.CanWipe {
		return false
	}
	if this.Upgradable != that1.Upgradable {
		return false
	}
	if this.CanChangeOwner != that1.CanChangeOwner {
		return false
	}
	if this.IsPaused != that1.IsPaused {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.MintedValue, that1.MintedValue) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.BurntValue, that1.BurntValue) {
			return false
		}
	}
	if this.NumDecimals != that1.NumDecimals {
		return false
	}
	if this.CanAddSpecialRoles != that1.CanAddSpecialRoles {
		return false
	}
	if this.NFTCreateStopped != that1.NFTCreateStopped {
		return false
	}
	if this.CanTransferNFTCreateRole != that1.CanTransferNFTCreateRole {
		return false
	}
	if len(this.SpecialRoles) != len(that1.SpecialRoles) {
		return false
	}
	for i := range this.SpecialRoles {
		if !this.SpecialRoles[i].Equal(that1.SpecialRoles[i]) {
			return false
		}
	}
	if this.NumWiped != that1.NumWiped {
		return false
	}
	return true
}
func (this *ESDTDataV2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ESDTDataV2)
	if !ok {
		that2, ok := that.(ESDTDataV2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.OwnerAddress, that1.OwnerAddress) {
		return false
	}
	if !bytes.Equal(this.TokenName, that1.TokenName) {
		return false
	}
	if !bytes.Equal(this.TickerName, that1.TickerName) {
		return false
	}
	if !bytes.Equal(this.TokenType, that1.TokenType) {
		return false
	}
	if this.Mintable != that1.Mintable {
		return false
	}
	if this.Burnable != that1.Burnable {
		return false
	}
	if this.CanPause != that1.CanPause {
		return false
	}
	if this.CanFreeze != that1.CanFreeze {
		return false
	}
	if this.CanWipe != that1.CanWipe {
		return false
	}
	if this.Upgradable != that1.Upgradable {
		return false
	}
	if this.CanChangeOwner != that1.CanChangeOwner {
		return false
	}
	if this.IsPaused != that1.IsPaused {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.MintedValue, that1.MintedValue) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.BurntValue, that1.BurntValue) {
			return false
		}
	}
	if this.NumDecimals != that1.NumDecimals {
		return false
	}
	if this.CanAddSpecialRoles != that1.CanAddSpecialRoles {
		return false
	}
	if this.NFTCreateStopped != that1.NFTCreateStopped {
		return false
	}
	if this.CanTransferNFTCreateRole != that1.CanTransferNFTCreateRole {
		return false
	}
	if len(this.SpecialRoles) != len(that1.SpecialRoles) {
		return false
	}
	for i := range this.SpecialRoles {
		if !this.SpecialRoles[i].Equal(that1.SpecialRoles[i]) {
			return false
		}
	}
	if this.NumWiped != that1.NumWiped {
		return false
	}
	if this.CanCreateMultiShard != that1.CanCreateMultiShard {
		return false
	}
	return true
}
func (this *ESDTRoles) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ESDTRoles)
	if !ok {
		that2, ok := that.(ESDTRoles)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if !bytes.Equal(this.Roles[i], that1.Roles[i]) {
			return false
		}
	}
	return true
}
func (this *ESDTConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ESDTConfig)
	if !ok {
		that2, ok := that.(ESDTConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.OwnerAddress, that1.OwnerAddress) {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.BaseIssuingCost, that1.BaseIssuingCost) {
			return false
		}
	}
	if this.MinTokenNameLength != that1.MinTokenNameLength {
		return false
	}
	if this.MaxTokenNameLength != that1.MaxTokenNameLength {
		return false
	}
	return true
}
func (this *ESDTDataV1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&systemSmartContracts.ESDTDataV1{")
	s = append(s, "OwnerAddress: "+fmt.Sprintf("%#v", this.OwnerAddress)+",\n")
	s = append(s, "TokenName: "+fmt.Sprintf("%#v", this.TokenName)+",\n")
	s = append(s, "TickerName: "+fmt.Sprintf("%#v", this.TickerName)+",\n")
	s = append(s, "TokenType: "+fmt.Sprintf("%#v", this.TokenType)+",\n")
	s = append(s, "Mintable: "+fmt.Sprintf("%#v", this.Mintable)+",\n")
	s = append(s, "Burnable: "+fmt.Sprintf("%#v", this.Burnable)+",\n")
	s = append(s, "CanPause: "+fmt.Sprintf("%#v", this.CanPause)+",\n")
	s = append(s, "CanFreeze: "+fmt.Sprintf("%#v", this.CanFreeze)+",\n")
	s = append(s, "CanWipe: "+fmt.Sprintf("%#v", this.CanWipe)+",\n")
	s = append(s, "Upgradable: "+fmt.Sprintf("%#v", this.Upgradable)+",\n")
	s = append(s, "CanChangeOwner: "+fmt.Sprintf("%#v", this.CanChangeOwner)+",\n")
	s = append(s, "IsPaused: "+fmt.Sprintf("%#v", this.IsPaused)+",\n")
	s = append(s, "MintedValue: "+fmt.Sprintf("%#v", this.MintedValue)+",\n")
	s = append(s, "BurntValue: "+fmt.Sprintf("%#v", this.BurntValue)+",\n")
	s = append(s, "NumDecimals: "+fmt.Sprintf("%#v", this.NumDecimals)+",\n")
	s = append(s, "CanAddSpecialRoles: "+fmt.Sprintf("%#v", this.CanAddSpecialRoles)+",\n")
	s = append(s, "NFTCreateStopped: "+fmt.Sprintf("%#v", this.NFTCreateStopped)+",\n")
	s = append(s, "CanTransferNFTCreateRole: "+fmt.Sprintf("%#v", this.CanTransferNFTCreateRole)+",\n")
	if this.SpecialRoles != nil {
		s = append(s, "SpecialRoles: "+fmt.Sprintf("%#v", this.SpecialRoles)+",\n")
	}
	s = append(s, "NumWiped: "+fmt.Sprintf("%#v", this.NumWiped)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ESDTDataV2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&systemSmartContracts.ESDTDataV2{")
	s = append(s, "OwnerAddress: "+fmt.Sprintf("%#v", this.OwnerAddress)+",\n")
	s = append(s, "TokenName: "+fmt.Sprintf("%#v", this.TokenName)+",\n")
	s = append(s, "TickerName: "+fmt.Sprintf("%#v", this.TickerName)+",\n")
	s = append(s, "TokenType: "+fmt.Sprintf("%#v", this.TokenType)+",\n")
	s = append(s, "Mintable: "+fmt.Sprintf("%#v", this.Mintable)+",\n")
	s = append(s, "Burnable: "+fmt.Sprintf("%#v", this.Burnable)+",\n")
	s = append(s, "CanPause: "+fmt.Sprintf("%#v", this.CanPause)+",\n")
	s = append(s, "CanFreeze: "+fmt.Sprintf("%#v", this.CanFreeze)+",\n")
	s = append(s, "CanWipe: "+fmt.Sprintf("%#v", this.CanWipe)+",\n")
	s = append(s, "Upgradable: "+fmt.Sprintf("%#v", this.Upgradable)+",\n")
	s = append(s, "CanChangeOwner: "+fmt.Sprintf("%#v", this.CanChangeOwner)+",\n")
	s = append(s, "IsPaused: "+fmt.Sprintf("%#v", this.IsPaused)+",\n")
	s = append(s, "MintedValue: "+fmt.Sprintf("%#v", this.MintedValue)+",\n")
	s = append(s, "BurntValue: "+fmt.Sprintf("%#v", this.BurntValue)+",\n")
	s = append(s, "NumDecimals: "+fmt.Sprintf("%#v", this.NumDecimals)+",\n")
	s = append(s, "CanAddSpecialRoles: "+fmt.Sprintf("%#v", this.CanAddSpecialRoles)+",\n")
	s = append(s, "NFTCreateStopped: "+fmt.Sprintf("%#v", this.NFTCreateStopped)+",\n")
	s = append(s, "CanTransferNFTCreateRole: "+fmt.Sprintf("%#v", this.CanTransferNFTCreateRole)+",\n")
	if this.SpecialRoles != nil {
		s = append(s, "SpecialRoles: "+fmt.Sprintf("%#v", this.SpecialRoles)+",\n")
	}
	s = append(s, "NumWiped: "+fmt.Sprintf("%#v", this.NumWiped)+",\n")
	s = append(s, "CanCreateMultiShard: "+fmt.Sprintf("%#v", this.CanCreateMultiShard)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ESDTRoles) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&systemSmartContracts.ESDTRoles{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Roles: "+fmt.Sprintf("%#v", this.Roles)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ESDTConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&systemSmartContracts.ESDTConfig{")
	s = append(s, "OwnerAddress: "+fmt.Sprintf("%#v", this.OwnerAddress)+",\n")
	s = append(s, "BaseIssuingCost: "+fmt.Sprintf("%#v", this.BaseIssuingCost)+",\n")
	s = append(s, "MinTokenNameLength: "+fmt.Sprintf("%#v", this.MinTokenNameLength)+",\n")
	s = append(s, "MaxTokenNameLength: "+fmt.Sprintf("%#v", this.MaxTokenNameLength)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEsdt(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ESDTDataV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESDTDataV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ESDTDataV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumWiped != 0 {
		i = encodeVarintEsdt(dAtA, i, uint64(m.NumWiped))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.SpecialRoles) > 0 {
		for iNdEx := len(m.SpecialRoles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpecialRoles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEsdt(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.CanTransferNFTCreateRole {
		i--
		if m.CanTransferNFTCreateRole {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.NFTCreateStopped {
		i--
		if m.NFTCreateStopped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CanAddSpecialRoles {
		i--
		if m.CanAddSpecialRoles {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.NumDecimals != 0 {
		i = encodeVarintEsdt(dAtA, i, uint64(m.NumDecimals))
		i--
		dAtA[i] = 0x78
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.BurntValue)
		i -= size
		if _, err := __caster.MarshalTo(m.BurntValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEsdt(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.MintedValue)
		i -= size
		if _, err := __caster.MarshalTo(m.MintedValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEsdt(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.IsPaused {
		i--
		if m.IsPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.CanChangeOwner {
		i--
		if m.CanChangeOwner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Upgradable {
		i--
		if m.Upgradable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.CanWipe {
		i--
		if m.CanWipe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.CanFreeze {
		i--
		if m.CanFreeze {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.CanPause {
		i--
		if m.CanPause {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Burnable {
		i--
		if m.Burnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Mintable {
		i--
		if m.Mintable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenType) > 0 {
		i -= len(m.TokenType)
		copy(dAtA[i:], m.TokenType)
		i = encodeVarintEsdt(dAtA, i, uint64(len(m.TokenType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TickerName) > 0 {
		i -= len(m.TickerName)
		copy(dAtA[i:], m.TickerName)
		i = encodeVarintEsdt(dAtA, i, uint64(len(m.TickerName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintEsdt(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintEsdt(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ESDTDataV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESDTDataV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ESDTDataV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanCreateMultiShard {
		i--
		if m.CanCreateMultiShard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.NumWiped != 0 {
		i = encodeVarintEsdt(dAtA, i, uint64(m.NumWiped))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.SpecialRoles) > 0 {
		for iNdEx := len(m.SpecialRoles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpecialRoles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEsdt(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.CanTransferNFTCreateRole {
		i--
		if m.CanTransferNFTCreateRole {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.NFTCreateStopped {
		i--
		if m.NFTCreateStopped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CanAddSpecialRoles {
		i--
		if m.CanAddSpecialRoles {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.NumDecimals != 0 {
		i = encodeVarintEsdt(dAtA, i, uint64(m.NumDecimals))
		i--
		dAtA[i] = 0x78
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.BurntValue)
		i -= size
		if _, err := __caster.MarshalTo(m.BurntValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEsdt(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.MintedValue)
		i -= size
		if _, err := __caster.MarshalTo(m.MintedValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEsdt(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.IsPaused {
		i--
		if m.IsPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.CanChangeOwner {
		i--
		if m.CanChangeOwner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Upgradable {
		i--
		if m.Upgradable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.CanWipe {
		i--
		if m.CanWipe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.CanFreeze {
		i--
		if m.CanFreeze {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.CanPause {
		i--
		if m.CanPause {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Burnable {
		i--
		if m.Burnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Mintable {
		i--
		if m.Mintable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenType) > 0 {
		i -= len(m.TokenType)
		copy(dAtA[i:], m.TokenType)
		i = encodeVarintEsdt(dAtA, i, uint64(len(m.TokenType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TickerName) > 0 {
		i -= len(m.TickerName)
		copy(dAtA[i:], m.TickerName)
		i = encodeVarintEsdt(dAtA, i, uint64(len(m.TickerName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintEsdt(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintEsdt(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ESDTRoles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESDTRoles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ESDTRoles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintEsdt(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEsdt(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ESDTConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ESDTConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ESDTConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxTokenNameLength != 0 {
		i = encodeVarintEsdt(dAtA, i, uint64(m.MaxTokenNameLength))
		i--
		dAtA[i] = 0x20
	}
	if m.MinTokenNameLength != 0 {
		i = encodeVarintEsdt(dAtA, i, uint64(m.MinTokenNameLength))
		i--
		dAtA[i] = 0x18
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.BaseIssuingCost)
		i -= size
		if _, err := __caster.MarshalTo(m.BaseIssuingCost, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEsdt(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintEsdt(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEsdt(dAtA []byte, offset int, v uint64) int {
	offset -= sovEsdt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ESDTDataV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovEsdt(uint64(l))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovEsdt(uint64(l))
	}
	l = len(m.TickerName)
	if l > 0 {
		n += 1 + l + sovEsdt(uint64(l))
	}
	l = len(m.TokenType)
	if l > 0 {
		n += 1 + l + sovEsdt(uint64(l))
	}
	if m.Mintable {
		n += 2
	}
	if m.Burnable {
		n += 2
	}
	if m.CanPause {
		n += 2
	}
	if m.CanFreeze {
		n += 2
	}
	if m.CanWipe {
		n += 2
	}
	if m.Upgradable {
		n += 2
	}
	if m.CanChangeOwner {
		n += 2
	}
	if m.IsPaused {
		n += 2
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.MintedValue)
		n += 1 + l + sovEsdt(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.BurntValue)
		n += 1 + l + sovEsdt(uint64(l))
	}
	if m.NumDecimals != 0 {
		n += 1 + sovEsdt(uint64(m.NumDecimals))
	}
	if m.CanAddSpecialRoles {
		n += 3
	}
	if m.NFTCreateStopped {
		n += 3
	}
	if m.CanTransferNFTCreateRole {
		n += 3
	}
	if len(m.SpecialRoles) > 0 {
		for _, e := range m.SpecialRoles {
			l = e.Size()
			n += 2 + l + sovEsdt(uint64(l))
		}
	}
	if m.NumWiped != 0 {
		n += 2 + sovEsdt(uint64(m.NumWiped))
	}
	return n
}

func (m *ESDTDataV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovEsdt(uint64(l))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovEsdt(uint64(l))
	}
	l = len(m.TickerName)
	if l > 0 {
		n += 1 + l + sovEsdt(uint64(l))
	}
	l = len(m.TokenType)
	if l > 0 {
		n += 1 + l + sovEsdt(uint64(l))
	}
	if m.Mintable {
		n += 2
	}
	if m.Burnable {
		n += 2
	}
	if m.CanPause {
		n += 2
	}
	if m.CanFreeze {
		n += 2
	}
	if m.CanWipe {
		n += 2
	}
	if m.Upgradable {
		n += 2
	}
	if m.CanChangeOwner {
		n += 2
	}
	if m.IsPaused {
		n += 2
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.MintedValue)
		n += 1 + l + sovEsdt(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.BurntValue)
		n += 1 + l + sovEsdt(uint64(l))
	}
	if m.NumDecimals != 0 {
		n += 1 + sovEsdt(uint64(m.NumDecimals))
	}
	if m.CanAddSpecialRoles {
		n += 3
	}
	if m.NFTCreateStopped {
		n += 3
	}
	if m.CanTransferNFTCreateRole {
		n += 3
	}
	if len(m.SpecialRoles) > 0 {
		for _, e := range m.SpecialRoles {
			l = e.Size()
			n += 2 + l + sovEsdt(uint64(l))
		}
	}
	if m.NumWiped != 0 {
		n += 2 + sovEsdt(uint64(m.NumWiped))
	}
	if m.CanCreateMultiShard {
		n += 3
	}
	return n
}

func (m *ESDTRoles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEsdt(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, b := range m.Roles {
			l = len(b)
			n += 1 + l + sovEsdt(uint64(l))
		}
	}
	return n
}

func (m *ESDTConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovEsdt(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.BaseIssuingCost)
		n += 1 + l + sovEsdt(uint64(l))
	}
	if m.MinTokenNameLength != 0 {
		n += 1 + sovEsdt(uint64(m.MinTokenNameLength))
	}
	if m.MaxTokenNameLength != 0 {
		n += 1 + sovEsdt(uint64(m.MaxTokenNameLength))
	}
	return n
}

func sovEsdt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEsdt(x uint64) (n int) {
	return sovEsdt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ESDTDataV1) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSpecialRoles := "[]*ESDTRoles{"
	for _, f := range this.SpecialRoles {
		repeatedStringForSpecialRoles += strings.Replace(f.String(), "ESDTRoles", "ESDTRoles", 1) + ","
	}
	repeatedStringForSpecialRoles += "}"
	s := strings.Join([]string{`&ESDTDataV1{`,
		`OwnerAddress:` + fmt.Sprintf("%v", this.OwnerAddress) + `,`,
		`TokenName:` + fmt.Sprintf("%v", this.TokenName) + `,`,
		`TickerName:` + fmt.Sprintf("%v", this.TickerName) + `,`,
		`TokenType:` + fmt.Sprintf("%v", this.TokenType) + `,`,
		`Mintable:` + fmt.Sprintf("%v", this.Mintable) + `,`,
		`Burnable:` + fmt.Sprintf("%v", this.Burnable) + `,`,
		`CanPause:` + fmt.Sprintf("%v", this.CanPause) + `,`,
		`CanFreeze:` + fmt.Sprintf("%v", this.CanFreeze) + `,`,
		`CanWipe:` + fmt.Sprintf("%v", this.CanWipe) + `,`,
		`Upgradable:` + fmt.Sprintf("%v", this.Upgradable) + `,`,
		`CanChangeOwner:` + fmt.Sprintf("%v", this.CanChangeOwner) + `,`,
		`IsPaused:` + fmt.Sprintf("%v", this.IsPaused) + `,`,
		`MintedValue:` + fmt.Sprintf("%v", this.MintedValue) + `,`,
		`BurntValue:` + fmt.Sprintf("%v", this.BurntValue) + `,`,
		`NumDecimals:` + fmt.Sprintf("%v", this.NumDecimals) + `,`,
		`CanAddSpecialRoles:` + fmt.Sprintf("%v", this.CanAddSpecialRoles) + `,`,
		`NFTCreateStopped:` + fmt.Sprintf("%v", this.NFTCreateStopped) + `,`,
		`CanTransferNFTCreateRole:` + fmt.Sprintf("%v", this.CanTransferNFTCreateRole) + `,`,
		`SpecialRoles:` + repeatedStringForSpecialRoles + `,`,
		`NumWiped:` + fmt.Sprintf("%v", this.NumWiped) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ESDTDataV2) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSpecialRoles := "[]*ESDTRoles{"
	for _, f := range this.SpecialRoles {
		repeatedStringForSpecialRoles += strings.Replace(f.String(), "ESDTRoles", "ESDTRoles", 1) + ","
	}
	repeatedStringForSpecialRoles += "}"
	s := strings.Join([]string{`&ESDTDataV2{`,
		`OwnerAddress:` + fmt.Sprintf("%v", this.OwnerAddress) + `,`,
		`TokenName:` + fmt.Sprintf("%v", this.TokenName) + `,`,
		`TickerName:` + fmt.Sprintf("%v", this.TickerName) + `,`,
		`TokenType:` + fmt.Sprintf("%v", this.TokenType) + `,`,
		`Mintable:` + fmt.Sprintf("%v", this.Mintable) + `,`,
		`Burnable:` + fmt.Sprintf("%v", this.Burnable) + `,`,
		`CanPause:` + fmt.Sprintf("%v", this.CanPause) + `,`,
		`CanFreeze:` + fmt.Sprintf("%v", this.CanFreeze) + `,`,
		`CanWipe:` + fmt.Sprintf("%v", this.CanWipe) + `,`,
		`Upgradable:` + fmt.Sprintf("%v", this.Upgradable) + `,`,
		`CanChangeOwner:` + fmt.Sprintf("%v", this.CanChangeOwner) + `,`,
		`IsPaused:` + fmt.Sprintf("%v", this.IsPaused) + `,`,
		`MintedValue:` + fmt.Sprintf("%v", this.MintedValue) + `,`,
		`BurntValue:` + fmt.Sprintf("%v", this.BurntValue) + `,`,
		`NumDecimals:` + fmt.Sprintf("%v", this.NumDecimals) + `,`,
		`CanAddSpecialRoles:` + fmt.Sprintf("%v", this.CanAddSpecialRoles) + `,`,
		`NFTCreateStopped:` + fmt.Sprintf("%v", this.NFTCreateStopped) + `,`,
		`CanTransferNFTCreateRole:` + fmt.Sprintf("%v", this.CanTransferNFTCreateRole) + `,`,
		`SpecialRoles:` + repeatedStringForSpecialRoles + `,`,
		`NumWiped:` + fmt.Sprintf("%v", this.NumWiped) + `,`,
		`CanCreateMultiShard:` + fmt.Sprintf("%v", this.CanCreateMultiShard) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ESDTRoles) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ESDTRoles{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ESDTConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ESDTConfig{`,
		`OwnerAddress:` + fmt.Sprintf("%v", this.OwnerAddress) + `,`,
		`BaseIssuingCost:` + fmt.Sprintf("%v", this.BaseIssuingCost) + `,`,
		`MinTokenNameLength:` + fmt.Sprintf("%v", this.MinTokenNameLength) + `,`,
		`MaxTokenNameLength:` + fmt.Sprintf("%v", this.MaxTokenNameLength) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEsdt(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ESDTDataV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsdt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESDTDataV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESDTDataV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = append(m.OwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OwnerAddress == nil {
				m.OwnerAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = append(m.TokenName[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenName == nil {
				m.TokenName = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickerName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TickerName = append(m.TickerName[:0], dAtA[iNdEx:postIndex]...)
			if m.TickerName == nil {
				m.TickerName = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = append(m.TokenType[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenType == nil {
				m.TokenType = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mintable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mintable = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Burnable = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPause", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanPause = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanFreeze", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanFreeze = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanWipe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanWipe = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgradable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Upgradable = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanChangeOwner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanChangeOwner = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPaused = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MintedValue = tmp
				}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurntValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.BurntValue = tmp
				}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDecimals", wireType)
			}
			m.NumDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDecimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanAddSpecialRoles", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanAddSpecialRoles = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFTCreateStopped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NFTCreateStopped = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanTransferNFTCreateRole", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanTransferNFTCreateRole = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialRoles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialRoles = append(m.SpecialRoles, &ESDTRoles{})
			if err := m.SpecialRoles[len(m.SpecialRoles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumWiped", wireType)
			}
			m.NumWiped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumWiped |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEsdt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEsdt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEsdt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESDTDataV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsdt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESDTDataV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESDTDataV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = append(m.OwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OwnerAddress == nil {
				m.OwnerAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = append(m.TokenName[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenName == nil {
				m.TokenName = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickerName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TickerName = append(m.TickerName[:0], dAtA[iNdEx:postIndex]...)
			if m.TickerName == nil {
				m.TickerName = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = append(m.TokenType[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenType == nil {
				m.TokenType = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mintable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mintable = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Burnable = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPause", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanPause = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanFreeze", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanFreeze = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanWipe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanWipe = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgradable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Upgradable = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanChangeOwner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanChangeOwner = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPaused = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MintedValue = tmp
				}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurntValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.BurntValue = tmp
				}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDecimals", wireType)
			}
			m.NumDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDecimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanAddSpecialRoles", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanAddSpecialRoles = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFTCreateStopped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NFTCreateStopped = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanTransferNFTCreateRole", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanTransferNFTCreateRole = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialRoles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialRoles = append(m.SpecialRoles, &ESDTRoles{})
			if err := m.SpecialRoles[len(m.SpecialRoles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumWiped", wireType)
			}
			m.NumWiped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumWiped |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanCreateMultiShard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanCreateMultiShard = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEsdt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEsdt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEsdt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESDTRoles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsdt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESDTRoles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESDTRoles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, make([]byte, postIndex-iNdEx))
			copy(m.Roles[len(m.Roles)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEsdt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEsdt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEsdt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ESDTConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEsdt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ESDTConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ESDTConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = append(m.OwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OwnerAddress == nil {
				m.OwnerAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseIssuingCost", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEsdt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEsdt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.BaseIssuingCost = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTokenNameLength", wireType)
			}
			m.MinTokenNameLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinTokenNameLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTokenNameLength", wireType)
			}
			m.MaxTokenNameLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTokenNameLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEsdt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEsdt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEsdt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEsdt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEsdt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEsdt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEsdt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEsdt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEsdt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEsdt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEsdt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEsdt = fmt.Errorf("proto: unexpected end of group")
)
