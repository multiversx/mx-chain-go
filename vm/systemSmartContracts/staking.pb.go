// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: staking.proto

package systemSmartContracts

import (
	bytes "bytes"
	fmt "fmt"
	github_com_ElrondNetwork_elrond_go_core_data "github.com/ElrondNetwork/elrond-go-core/data"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakedDataV1_0 struct {
	RegisterNonce uint64        `protobuf:"varint,1,opt,name=RegisterNonce,proto3" json:"RegisterNonce"`
	StakedNonce   uint64        `protobuf:"varint,2,opt,name=StakedNonce,proto3" json:"StakedNonce"`
	Staked        bool          `protobuf:"varint,3,opt,name=Staked,proto3" json:"Staked"`
	UnStakedNonce uint64        `protobuf:"varint,4,opt,name=UnStakedNonce,proto3" json:"UnStakedNonce"`
	UnStakedEpoch uint32        `protobuf:"varint,5,opt,name=UnStakedEpoch,proto3" json:"UnStakedEpoch"`
	RewardAddress []byte        `protobuf:"bytes,6,opt,name=RewardAddress,proto3" json:"RewardAddress"`
	StakeValue    *math_big.Int `protobuf:"bytes,7,opt,name=StakeValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"StakeValue"`
	JailedRound   uint64        `protobuf:"varint,8,opt,name=JailedRound,proto3" json:"JailedRound"`
	JailedNonce   uint64        `protobuf:"varint,9,opt,name=JailedNonce,proto3" json:"JailedNonce"`
	UnJailedNonce uint64        `protobuf:"varint,10,opt,name=UnJailedNonce,proto3" json:"UnJailedNonce"`
	Jailed        bool          `protobuf:"varint,11,opt,name=Jailed,proto3" json:"Jailed"`
	Waiting       bool          `protobuf:"varint,12,opt,name=Waiting,proto3" json:"Waiting"`
}

func (m *StakedDataV1_0) Reset()      { *m = StakedDataV1_0{} }
func (*StakedDataV1_0) ProtoMessage() {}
func (*StakedDataV1_0) Descriptor() ([]byte, []int) {
	return fileDescriptor_289e7c8aea278311, []int{0}
}
func (m *StakedDataV1_0) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakedDataV1_0) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StakedDataV1_0) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakedDataV1_0.Merge(m, src)
}
func (m *StakedDataV1_0) XXX_Size() int {
	return m.Size()
}
func (m *StakedDataV1_0) XXX_DiscardUnknown() {
	xxx_messageInfo_StakedDataV1_0.DiscardUnknown(m)
}

var xxx_messageInfo_StakedDataV1_0 proto.InternalMessageInfo

func (m *StakedDataV1_0) GetRegisterNonce() uint64 {
	if m != nil {
		return m.RegisterNonce
	}
	return 0
}

func (m *StakedDataV1_0) GetStakedNonce() uint64 {
	if m != nil {
		return m.StakedNonce
	}
	return 0
}

func (m *StakedDataV1_0) GetStaked() bool {
	if m != nil {
		return m.Staked
	}
	return false
}

func (m *StakedDataV1_0) GetUnStakedNonce() uint64 {
	if m != nil {
		return m.UnStakedNonce
	}
	return 0
}

func (m *StakedDataV1_0) GetUnStakedEpoch() uint32 {
	if m != nil {
		return m.UnStakedEpoch
	}
	return 0
}

func (m *StakedDataV1_0) GetRewardAddress() []byte {
	if m != nil {
		return m.RewardAddress
	}
	return nil
}

func (m *StakedDataV1_0) GetStakeValue() *math_big.Int {
	if m != nil {
		return m.StakeValue
	}
	return nil
}

func (m *StakedDataV1_0) GetJailedRound() uint64 {
	if m != nil {
		return m.JailedRound
	}
	return 0
}

func (m *StakedDataV1_0) GetJailedNonce() uint64 {
	if m != nil {
		return m.JailedNonce
	}
	return 0
}

func (m *StakedDataV1_0) GetUnJailedNonce() uint64 {
	if m != nil {
		return m.UnJailedNonce
	}
	return 0
}

func (m *StakedDataV1_0) GetJailed() bool {
	if m != nil {
		return m.Jailed
	}
	return false
}

func (m *StakedDataV1_0) GetWaiting() bool {
	if m != nil {
		return m.Waiting
	}
	return false
}

type StakedDataV1_1 struct {
	RegisterNonce uint64        `protobuf:"varint,1,opt,name=RegisterNonce,proto3" json:"RegisterNonce"`
	StakedNonce   uint64        `protobuf:"varint,2,opt,name=StakedNonce,proto3" json:"StakedNonce"`
	Staked        bool          `protobuf:"varint,3,opt,name=Staked,proto3" json:"Staked"`
	UnStakedNonce uint64        `protobuf:"varint,4,opt,name=UnStakedNonce,proto3" json:"UnStakedNonce"`
	UnStakedEpoch uint32        `protobuf:"varint,5,opt,name=UnStakedEpoch,proto3" json:"UnStakedEpoch"`
	RewardAddress []byte        `protobuf:"bytes,6,opt,name=RewardAddress,proto3" json:"RewardAddress"`
	StakeValue    *math_big.Int `protobuf:"bytes,7,opt,name=StakeValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"StakeValue"`
	JailedRound   uint64        `protobuf:"varint,8,opt,name=JailedRound,proto3" json:"JailedRound"`
	JailedNonce   uint64        `protobuf:"varint,9,opt,name=JailedNonce,proto3" json:"JailedNonce"`
	UnJailedNonce uint64        `protobuf:"varint,10,opt,name=UnJailedNonce,proto3" json:"UnJailedNonce"`
	Jailed        bool          `protobuf:"varint,11,opt,name=Jailed,proto3" json:"Jailed"`
	Waiting       bool          `protobuf:"varint,12,opt,name=Waiting,proto3" json:"Waiting"`
	NumJailed     uint32        `protobuf:"varint,13,opt,name=NumJailed,proto3" json:"NumJailed"`
	SlashValue    *math_big.Int `protobuf:"bytes,14,opt,name=SlashValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"SlashValue"`
}

func (m *StakedDataV1_1) Reset()      { *m = StakedDataV1_1{} }
func (*StakedDataV1_1) ProtoMessage() {}
func (*StakedDataV1_1) Descriptor() ([]byte, []int) {
	return fileDescriptor_289e7c8aea278311, []int{1}
}
func (m *StakedDataV1_1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakedDataV1_1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StakedDataV1_1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakedDataV1_1.Merge(m, src)
}
func (m *StakedDataV1_1) XXX_Size() int {
	return m.Size()
}
func (m *StakedDataV1_1) XXX_DiscardUnknown() {
	xxx_messageInfo_StakedDataV1_1.DiscardUnknown(m)
}

var xxx_messageInfo_StakedDataV1_1 proto.InternalMessageInfo

func (m *StakedDataV1_1) GetRegisterNonce() uint64 {
	if m != nil {
		return m.RegisterNonce
	}
	return 0
}

func (m *StakedDataV1_1) GetStakedNonce() uint64 {
	if m != nil {
		return m.StakedNonce
	}
	return 0
}

func (m *StakedDataV1_1) GetStaked() bool {
	if m != nil {
		return m.Staked
	}
	return false
}

func (m *StakedDataV1_1) GetUnStakedNonce() uint64 {
	if m != nil {
		return m.UnStakedNonce
	}
	return 0
}

func (m *StakedDataV1_1) GetUnStakedEpoch() uint32 {
	if m != nil {
		return m.UnStakedEpoch
	}
	return 0
}

func (m *StakedDataV1_1) GetRewardAddress() []byte {
	if m != nil {
		return m.RewardAddress
	}
	return nil
}

func (m *StakedDataV1_1) GetStakeValue() *math_big.Int {
	if m != nil {
		return m.StakeValue
	}
	return nil
}

func (m *StakedDataV1_1) GetJailedRound() uint64 {
	if m != nil {
		return m.JailedRound
	}
	return 0
}

func (m *StakedDataV1_1) GetJailedNonce() uint64 {
	if m != nil {
		return m.JailedNonce
	}
	return 0
}

func (m *StakedDataV1_1) GetUnJailedNonce() uint64 {
	if m != nil {
		return m.UnJailedNonce
	}
	return 0
}

func (m *StakedDataV1_1) GetJailed() bool {
	if m != nil {
		return m.Jailed
	}
	return false
}

func (m *StakedDataV1_1) GetWaiting() bool {
	if m != nil {
		return m.Waiting
	}
	return false
}

func (m *StakedDataV1_1) GetNumJailed() uint32 {
	if m != nil {
		return m.NumJailed
	}
	return 0
}

func (m *StakedDataV1_1) GetSlashValue() *math_big.Int {
	if m != nil {
		return m.SlashValue
	}
	return nil
}

type StakedDataV2_0 struct {
	RegisterNonce uint64        `protobuf:"varint,1,opt,name=RegisterNonce,proto3" json:"RegisterNonce"`
	StakedNonce   uint64        `protobuf:"varint,2,opt,name=StakedNonce,proto3" json:"StakedNonce"`
	Staked        bool          `protobuf:"varint,3,opt,name=Staked,proto3" json:"Staked"`
	UnStakedNonce uint64        `protobuf:"varint,4,opt,name=UnStakedNonce,proto3" json:"UnStakedNonce"`
	UnStakedEpoch uint32        `protobuf:"varint,5,opt,name=UnStakedEpoch,proto3" json:"UnStakedEpoch"`
	RewardAddress []byte        `protobuf:"bytes,6,opt,name=RewardAddress,proto3" json:"RewardAddress"`
	StakeValue    *math_big.Int `protobuf:"bytes,7,opt,name=StakeValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"StakeValue"`
	JailedRound   uint64        `protobuf:"varint,8,opt,name=JailedRound,proto3" json:"JailedRound"`
	JailedNonce   uint64        `protobuf:"varint,9,opt,name=JailedNonce,proto3" json:"JailedNonce"`
	UnJailedNonce uint64        `protobuf:"varint,10,opt,name=UnJailedNonce,proto3" json:"UnJailedNonce"`
	Jailed        bool          `protobuf:"varint,11,opt,name=Jailed,proto3" json:"Jailed"`
	Waiting       bool          `protobuf:"varint,12,opt,name=Waiting,proto3" json:"Waiting"`
	NumJailed     uint32        `protobuf:"varint,13,opt,name=NumJailed,proto3" json:"NumJailed"`
	SlashValue    *math_big.Int `protobuf:"bytes,14,opt,name=SlashValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"SlashValue"`
	OwnerAddress  []byte        `protobuf:"bytes,15,opt,name=OwnerAddress,proto3" json:"OwnerAddress"`
}

func (m *StakedDataV2_0) Reset()      { *m = StakedDataV2_0{} }
func (*StakedDataV2_0) ProtoMessage() {}
func (*StakedDataV2_0) Descriptor() ([]byte, []int) {
	return fileDescriptor_289e7c8aea278311, []int{2}
}
func (m *StakedDataV2_0) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakedDataV2_0) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StakedDataV2_0) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakedDataV2_0.Merge(m, src)
}
func (m *StakedDataV2_0) XXX_Size() int {
	return m.Size()
}
func (m *StakedDataV2_0) XXX_DiscardUnknown() {
	xxx_messageInfo_StakedDataV2_0.DiscardUnknown(m)
}

var xxx_messageInfo_StakedDataV2_0 proto.InternalMessageInfo

func (m *StakedDataV2_0) GetRegisterNonce() uint64 {
	if m != nil {
		return m.RegisterNonce
	}
	return 0
}

func (m *StakedDataV2_0) GetStakedNonce() uint64 {
	if m != nil {
		return m.StakedNonce
	}
	return 0
}

func (m *StakedDataV2_0) GetStaked() bool {
	if m != nil {
		return m.Staked
	}
	return false
}

func (m *StakedDataV2_0) GetUnStakedNonce() uint64 {
	if m != nil {
		return m.UnStakedNonce
	}
	return 0
}

func (m *StakedDataV2_0) GetUnStakedEpoch() uint32 {
	if m != nil {
		return m.UnStakedEpoch
	}
	return 0
}

func (m *StakedDataV2_0) GetRewardAddress() []byte {
	if m != nil {
		return m.RewardAddress
	}
	return nil
}

func (m *StakedDataV2_0) GetStakeValue() *math_big.Int {
	if m != nil {
		return m.StakeValue
	}
	return nil
}

func (m *StakedDataV2_0) GetJailedRound() uint64 {
	if m != nil {
		return m.JailedRound
	}
	return 0
}

func (m *StakedDataV2_0) GetJailedNonce() uint64 {
	if m != nil {
		return m.JailedNonce
	}
	return 0
}

func (m *StakedDataV2_0) GetUnJailedNonce() uint64 {
	if m != nil {
		return m.UnJailedNonce
	}
	return 0
}

func (m *StakedDataV2_0) GetJailed() bool {
	if m != nil {
		return m.Jailed
	}
	return false
}

func (m *StakedDataV2_0) GetWaiting() bool {
	if m != nil {
		return m.Waiting
	}
	return false
}

func (m *StakedDataV2_0) GetNumJailed() uint32 {
	if m != nil {
		return m.NumJailed
	}
	return 0
}

func (m *StakedDataV2_0) GetSlashValue() *math_big.Int {
	if m != nil {
		return m.SlashValue
	}
	return nil
}

func (m *StakedDataV2_0) GetOwnerAddress() []byte {
	if m != nil {
		return m.OwnerAddress
	}
	return nil
}

type StakingNodesConfig struct {
	MinNumNodes int64 `protobuf:"varint,1,opt,name=MinNumNodes,proto3" json:"MinNumNodes"`
	MaxNumNodes int64 `protobuf:"varint,2,opt,name=MaxNumNodes,proto3" json:"MaxNumNodes"`
	StakedNodes int64 `protobuf:"varint,3,opt,name=StakedNodes,proto3" json:"StakedNodes"`
	JailedNodes int64 `protobuf:"varint,4,opt,name=JailedNodes,proto3" json:"JailedNodes"`
}

func (m *StakingNodesConfig) Reset()      { *m = StakingNodesConfig{} }
func (*StakingNodesConfig) ProtoMessage() {}
func (*StakingNodesConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_289e7c8aea278311, []int{3}
}
func (m *StakingNodesConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingNodesConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StakingNodesConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingNodesConfig.Merge(m, src)
}
func (m *StakingNodesConfig) XXX_Size() int {
	return m.Size()
}
func (m *StakingNodesConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingNodesConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StakingNodesConfig proto.InternalMessageInfo

func (m *StakingNodesConfig) GetMinNumNodes() int64 {
	if m != nil {
		return m.MinNumNodes
	}
	return 0
}

func (m *StakingNodesConfig) GetMaxNumNodes() int64 {
	if m != nil {
		return m.MaxNumNodes
	}
	return 0
}

func (m *StakingNodesConfig) GetStakedNodes() int64 {
	if m != nil {
		return m.StakedNodes
	}
	return 0
}

func (m *StakingNodesConfig) GetJailedNodes() int64 {
	if m != nil {
		return m.JailedNodes
	}
	return 0
}

type ElementInList struct {
	BLSPublicKey []byte `protobuf:"bytes,1,opt,name=BLSPublicKey,proto3" json:"BLSPublicKey"`
	PreviousKey  []byte `protobuf:"bytes,2,opt,name=PreviousKey,proto3" json:"PreviousKey"`
	NextKey      []byte `protobuf:"bytes,3,opt,name=NextKey,proto3" json:"NextKey"`
}

func (m *ElementInList) Reset()      { *m = ElementInList{} }
func (*ElementInList) ProtoMessage() {}
func (*ElementInList) Descriptor() ([]byte, []int) {
	return fileDescriptor_289e7c8aea278311, []int{4}
}
func (m *ElementInList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElementInList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ElementInList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementInList.Merge(m, src)
}
func (m *ElementInList) XXX_Size() int {
	return m.Size()
}
func (m *ElementInList) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementInList.DiscardUnknown(m)
}

var xxx_messageInfo_ElementInList proto.InternalMessageInfo

func (m *ElementInList) GetBLSPublicKey() []byte {
	if m != nil {
		return m.BLSPublicKey
	}
	return nil
}

func (m *ElementInList) GetPreviousKey() []byte {
	if m != nil {
		return m.PreviousKey
	}
	return nil
}

func (m *ElementInList) GetNextKey() []byte {
	if m != nil {
		return m.NextKey
	}
	return nil
}

type WaitingList struct {
	FirstKey      []byte `protobuf:"bytes,1,opt,name=FirstKey,proto3" json:"FirstKey"`
	LastKey       []byte `protobuf:"bytes,2,opt,name=LastKey,proto3" json:"LastKey"`
	Length        uint32 `protobuf:"varint,3,opt,name=Length,proto3" json:"Length"`
	LastJailedKey []byte `protobuf:"bytes,4,opt,name=LastJailedKey,proto3" json:"LastJailedKey"`
}

func (m *WaitingList) Reset()      { *m = WaitingList{} }
func (*WaitingList) ProtoMessage() {}
func (*WaitingList) Descriptor() ([]byte, []int) {
	return fileDescriptor_289e7c8aea278311, []int{5}
}
func (m *WaitingList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitingList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WaitingList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitingList.Merge(m, src)
}
func (m *WaitingList) XXX_Size() int {
	return m.Size()
}
func (m *WaitingList) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitingList.DiscardUnknown(m)
}

var xxx_messageInfo_WaitingList proto.InternalMessageInfo

func (m *WaitingList) GetFirstKey() []byte {
	if m != nil {
		return m.FirstKey
	}
	return nil
}

func (m *WaitingList) GetLastKey() []byte {
	if m != nil {
		return m.LastKey
	}
	return nil
}

func (m *WaitingList) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *WaitingList) GetLastJailedKey() []byte {
	if m != nil {
		return m.LastJailedKey
	}
	return nil
}

func init() {
	proto.RegisterType((*StakedDataV1_0)(nil), "proto.StakedDataV1_0")
	proto.RegisterType((*StakedDataV1_1)(nil), "proto.StakedDataV1_1")
	proto.RegisterType((*StakedDataV2_0)(nil), "proto.StakedDataV2_0")
	proto.RegisterType((*StakingNodesConfig)(nil), "proto.StakingNodesConfig")
	proto.RegisterType((*ElementInList)(nil), "proto.ElementInList")
	proto.RegisterType((*WaitingList)(nil), "proto.WaitingList")
}

func init() { proto.RegisterFile("staking.proto", fileDescriptor_289e7c8aea278311) }

var fileDescriptor_289e7c8aea278311 = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xb1, 0x6e, 0x13, 0x4b,
	0x14, 0xf5, 0xd8, 0x8e, 0x93, 0x8c, 0xed, 0xe4, 0xbd, 0xd5, 0x2b, 0x56, 0xaf, 0xd8, 0xb5, 0x2c,
	0x21, 0x59, 0x42, 0xb1, 0x09, 0x20, 0x51, 0x50, 0xe1, 0x90, 0x48, 0x01, 0x63, 0xa2, 0xb1, 0x08,
	0x88, 0x06, 0x8d, 0xbd, 0x93, 0xf5, 0x2a, 0xf6, 0x4c, 0xb4, 0x3b, 0x4b, 0x92, 0x8e, 0x0f, 0xa0,
	0xe0, 0x0f, 0x68, 0x11, 0x0d, 0x1f, 0xc0, 0x0f, 0x50, 0xa6, 0x42, 0xa9, 0x96, 0x64, 0xd3, 0xa0,
	0xad, 0xf2, 0x09, 0x68, 0x66, 0xd6, 0xde, 0xd9, 0xb4, 0x50, 0x50, 0xb8, 0x9a, 0x39, 0x67, 0xe6,
	0xdc, 0xb9, 0xb9, 0xe7, 0xde, 0xd8, 0x86, 0xf5, 0x80, 0xe3, 0x43, 0x8f, 0xba, 0xed, 0x23, 0x9f,
	0x71, 0x66, 0x2c, 0xc9, 0xe5, 0xff, 0x0d, 0xd7, 0xe3, 0xe3, 0x70, 0xd8, 0x1e, 0xb1, 0x69, 0xc7,
	0x65, 0x2e, 0xeb, 0x48, 0x7a, 0x18, 0x1e, 0x48, 0x24, 0x81, 0xdc, 0x29, 0x55, 0xf3, 0xcb, 0x12,
	0x5c, 0x1b, 0x70, 0x7c, 0x48, 0x9c, 0xc7, 0x98, 0xe3, 0xfd, 0xcd, 0x37, 0x77, 0x8c, 0x07, 0xb0,
	0x8e, 0x88, 0xeb, 0x05, 0x9c, 0xf8, 0x7d, 0x46, 0x47, 0xc4, 0x04, 0x0d, 0xd0, 0x2a, 0x77, 0xff,
	0x4d, 0x22, 0x3b, 0x7f, 0x80, 0xf2, 0xd0, 0xd8, 0x84, 0x55, 0x15, 0x4a, 0xc9, 0x8a, 0x52, 0xb6,
	0x9e, 0x44, 0xb6, 0x4e, 0x23, 0x1d, 0x18, 0x4d, 0x58, 0x51, 0xd0, 0x2c, 0x35, 0x40, 0x6b, 0xa5,
	0x0b, 0x93, 0xc8, 0x4e, 0x19, 0x94, 0xae, 0x22, 0x9f, 0x17, 0x54, 0x0f, 0x5c, 0xce, 0xf2, 0xc9,
	0x1d, 0xa0, 0x3c, 0xd4, 0x85, 0xdb, 0x47, 0x6c, 0x34, 0x36, 0x97, 0x1a, 0xa0, 0x55, 0xcf, 0x0b,
	0xe5, 0x01, 0xca, 0x43, 0x55, 0x81, 0x63, 0xec, 0x3b, 0x8f, 0x1c, 0xc7, 0x27, 0x41, 0x60, 0x56,
	0x1a, 0xa0, 0x55, 0x9b, 0x55, 0x40, 0x3b, 0x40, 0x79, 0x68, 0x9c, 0x40, 0x28, 0xe3, 0xec, 0xe3,
	0x49, 0x48, 0xcc, 0x65, 0xa9, 0x7a, 0x95, 0x44, 0xb6, 0xc6, 0x7e, 0xfe, 0x61, 0xef, 0x4c, 0x31,
	0x1f, 0x77, 0x86, 0x9e, 0xdb, 0xde, 0xa5, 0xfc, 0xa1, 0xe6, 0xd7, 0xf6, 0xc4, 0x67, 0xd4, 0xe9,
	0x13, 0x7e, 0xcc, 0xfc, 0xc3, 0x0e, 0x91, 0x68, 0xc3, 0x65, 0x1b, 0x23, 0xe6, 0x93, 0x8e, 0x83,
	0x39, 0x6e, 0x77, 0x3d, 0x77, 0x97, 0xf2, 0x2d, 0x2c, 0x8a, 0x8e, 0xb4, 0xa8, 0xa2, 0xf6, 0x4f,
	0xb0, 0x37, 0x21, 0x0e, 0x62, 0x21, 0x75, 0xcc, 0x95, 0xac, 0xf6, 0x1a, 0x8d, 0x74, 0x90, 0x49,
	0x54, 0x55, 0x57, 0x6f, 0x4a, 0x52, 0xbb, 0x34, 0xa0, 0x2a, 0xaa, 0x8b, 0xa0, 0x6e, 0x85, 0x2e,
	0xcb, 0x43, 0xe1, 0xb3, 0x82, 0x66, 0x35, 0xf3, 0x39, 0x4d, 0x26, 0x5d, 0x8d, 0x5b, 0x70, 0xf9,
	0x25, 0xf6, 0xb8, 0x47, 0x5d, 0xb3, 0x26, 0x2f, 0x55, 0x93, 0xc8, 0x9e, 0x51, 0x68, 0xb6, 0x69,
	0x7e, 0xaf, 0xdc, 0xe8, 0xd8, 0xcd, 0x45, 0xc7, 0x2e, 0x3a, 0xf6, 0x2f, 0xee, 0x58, 0xe3, 0x36,
	0x5c, 0xed, 0x87, 0xd3, 0x34, 0x5a, 0x5d, 0x3a, 0x5a, 0x4f, 0x22, 0x3b, 0x23, 0x51, 0xb6, 0x95,
	0x86, 0x4c, 0x70, 0x30, 0x56, 0x86, 0xac, 0x69, 0x86, 0xcc, 0xd9, 0x3f, 0x6a, 0xc8, 0x3c, 0x6a,
	0xf3, 0xfd, 0x72, 0x6e, 0xb0, 0xee, 0x2e, 0x3e, 0x0a, 0x16, 0x83, 0xb5, 0x18, 0xac, 0xdf, 0x1f,
	0x2c, 0xe3, 0x3e, 0xac, 0x3d, 0x3f, 0xa6, 0xc4, 0x9f, 0xb5, 0xd0, 0xba, 0x7c, 0xfb, 0x9f, 0x24,
	0xb2, 0x73, 0x3c, 0xca, 0xa1, 0xe6, 0x05, 0x80, 0xc6, 0x40, 0x7d, 0xc3, 0xeb, 0x33, 0x87, 0x04,
	0x5b, 0x8c, 0x1e, 0x78, 0xae, 0xb0, 0xea, 0x99, 0x47, 0xfb, 0xe1, 0x54, 0x92, 0x72, 0x20, 0x4b,
	0xca, 0x2a, 0x8d, 0x46, 0x3a, 0x90, 0x12, 0x7c, 0x32, 0x97, 0x14, 0x35, 0x49, 0x46, 0x23, 0x1d,
	0xe8, 0xf3, 0x2b, 0x24, 0xa5, 0x4c, 0xa2, 0xd1, 0x48, 0x07, 0x7a, 0x0f, 0x09, 0x49, 0x39, 0x93,
	0x68, 0x34, 0xd2, 0x41, 0xf3, 0x23, 0x80, 0xf5, 0xed, 0x09, 0x99, 0x12, 0xca, 0x77, 0x69, 0xcf,
	0x0b, 0xb8, 0x28, 0x55, 0xb7, 0x37, 0xd8, 0x0b, 0x87, 0x13, 0x6f, 0xf4, 0x94, 0x9c, 0xca, 0x3f,
	0x2f, 0x2d, 0x95, 0xce, 0xa3, 0x1c, 0x12, 0x4f, 0xef, 0xf9, 0xe4, 0xad, 0xc7, 0xc2, 0x40, 0x88,
	0x8a, 0x52, 0x24, 0x9f, 0xd6, 0x68, 0xa4, 0x03, 0xd1, 0x61, 0x7d, 0x72, 0xc2, 0xc5, 0xf5, 0x92,
	0xbc, 0x2e, 0x3b, 0x2c, 0xa5, 0xd0, 0x6c, 0xd3, 0xfc, 0x0a, 0x60, 0x35, 0xed, 0x36, 0x99, 0x5f,
	0x0b, 0xae, 0xec, 0x78, 0x7e, 0xc0, 0xb3, 0xdc, 0x6a, 0x49, 0x64, 0xcf, 0x39, 0x34, 0xdf, 0x89,
	0x07, 0x7a, 0x58, 0x5d, 0x2c, 0x66, 0x0f, 0xa4, 0x14, 0x9a, 0x6d, 0xc4, 0x34, 0xf4, 0x08, 0x75,
	0xf9, 0x58, 0xa6, 0x51, 0x57, 0xd3, 0xa0, 0x18, 0x94, 0xae, 0x62, 0xd4, 0xc4, 0x75, 0x55, 0x39,
	0x11, 0xb0, 0x9c, 0xfd, 0x0f, 0xca, 0x1d, 0xa0, 0x3c, 0xec, 0xf6, 0xcf, 0x2e, 0xad, 0xc2, 0xf9,
	0xa5, 0x55, 0xb8, 0xbe, 0xb4, 0xc0, 0xbb, 0xd8, 0x02, 0x9f, 0x62, 0x0b, 0x7c, 0x8b, 0x2d, 0x70,
	0x16, 0x5b, 0xe0, 0x3c, 0xb6, 0xc0, 0x45, 0x6c, 0x81, 0x9f, 0xb1, 0x55, 0xb8, 0x8e, 0x2d, 0xf0,
	0xe1, 0xca, 0x2a, 0x9c, 0x5d, 0x59, 0x85, 0xf3, 0x2b, 0xab, 0xf0, 0xfa, 0xbf, 0xe0, 0x34, 0xe0,
	0x64, 0x3a, 0x98, 0x62, 0x9f, 0x6f, 0x31, 0xca, 0x7d, 0x3c, 0xe2, 0xc1, 0xb0, 0x22, 0x7f, 0x33,
	0xdc, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x09, 0xed, 0xbf, 0x7a, 0x0c, 0x00, 0x00,
}

func (this *StakedDataV1_0) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StakedDataV1_0)
	if !ok {
		that2, ok := that.(StakedDataV1_0)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegisterNonce != that1.RegisterNonce {
		return false
	}
	if this.StakedNonce != that1.StakedNonce {
		return false
	}
	if this.Staked != that1.Staked {
		return false
	}
	if this.UnStakedNonce != that1.UnStakedNonce {
		return false
	}
	if this.UnStakedEpoch != that1.UnStakedEpoch {
		return false
	}
	if !bytes.Equal(this.RewardAddress, that1.RewardAddress) {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.StakeValue, that1.StakeValue) {
			return false
		}
	}
	if this.JailedRound != that1.JailedRound {
		return false
	}
	if this.JailedNonce != that1.JailedNonce {
		return false
	}
	if this.UnJailedNonce != that1.UnJailedNonce {
		return false
	}
	if this.Jailed != that1.Jailed {
		return false
	}
	if this.Waiting != that1.Waiting {
		return false
	}
	return true
}
func (this *StakedDataV1_1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StakedDataV1_1)
	if !ok {
		that2, ok := that.(StakedDataV1_1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegisterNonce != that1.RegisterNonce {
		return false
	}
	if this.StakedNonce != that1.StakedNonce {
		return false
	}
	if this.Staked != that1.Staked {
		return false
	}
	if this.UnStakedNonce != that1.UnStakedNonce {
		return false
	}
	if this.UnStakedEpoch != that1.UnStakedEpoch {
		return false
	}
	if !bytes.Equal(this.RewardAddress, that1.RewardAddress) {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.StakeValue, that1.StakeValue) {
			return false
		}
	}
	if this.JailedRound != that1.JailedRound {
		return false
	}
	if this.JailedNonce != that1.JailedNonce {
		return false
	}
	if this.UnJailedNonce != that1.UnJailedNonce {
		return false
	}
	if this.Jailed != that1.Jailed {
		return false
	}
	if this.Waiting != that1.Waiting {
		return false
	}
	if this.NumJailed != that1.NumJailed {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.SlashValue, that1.SlashValue) {
			return false
		}
	}
	return true
}
func (this *StakedDataV2_0) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StakedDataV2_0)
	if !ok {
		that2, ok := that.(StakedDataV2_0)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegisterNonce != that1.RegisterNonce {
		return false
	}
	if this.StakedNonce != that1.StakedNonce {
		return false
	}
	if this.Staked != that1.Staked {
		return false
	}
	if this.UnStakedNonce != that1.UnStakedNonce {
		return false
	}
	if this.UnStakedEpoch != that1.UnStakedEpoch {
		return false
	}
	if !bytes.Equal(this.RewardAddress, that1.RewardAddress) {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.StakeValue, that1.StakeValue) {
			return false
		}
	}
	if this.JailedRound != that1.JailedRound {
		return false
	}
	if this.JailedNonce != that1.JailedNonce {
		return false
	}
	if this.UnJailedNonce != that1.UnJailedNonce {
		return false
	}
	if this.Jailed != that1.Jailed {
		return false
	}
	if this.Waiting != that1.Waiting {
		return false
	}
	if this.NumJailed != that1.NumJailed {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.SlashValue, that1.SlashValue) {
			return false
		}
	}
	if !bytes.Equal(this.OwnerAddress, that1.OwnerAddress) {
		return false
	}
	return true
}
func (this *StakingNodesConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StakingNodesConfig)
	if !ok {
		that2, ok := that.(StakingNodesConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinNumNodes != that1.MinNumNodes {
		return false
	}
	if this.MaxNumNodes != that1.MaxNumNodes {
		return false
	}
	if this.StakedNodes != that1.StakedNodes {
		return false
	}
	if this.JailedNodes != that1.JailedNodes {
		return false
	}
	return true
}
func (this *ElementInList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ElementInList)
	if !ok {
		that2, ok := that.(ElementInList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BLSPublicKey, that1.BLSPublicKey) {
		return false
	}
	if !bytes.Equal(this.PreviousKey, that1.PreviousKey) {
		return false
	}
	if !bytes.Equal(this.NextKey, that1.NextKey) {
		return false
	}
	return true
}
func (this *WaitingList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WaitingList)
	if !ok {
		that2, ok := that.(WaitingList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.FirstKey, that1.FirstKey) {
		return false
	}
	if !bytes.Equal(this.LastKey, that1.LastKey) {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	if !bytes.Equal(this.LastJailedKey, that1.LastJailedKey) {
		return false
	}
	return true
}
func (this *StakedDataV1_0) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&systemSmartContracts.StakedDataV1_0{")
	s = append(s, "RegisterNonce: "+fmt.Sprintf("%#v", this.RegisterNonce)+",\n")
	s = append(s, "StakedNonce: "+fmt.Sprintf("%#v", this.StakedNonce)+",\n")
	s = append(s, "Staked: "+fmt.Sprintf("%#v", this.Staked)+",\n")
	s = append(s, "UnStakedNonce: "+fmt.Sprintf("%#v", this.UnStakedNonce)+",\n")
	s = append(s, "UnStakedEpoch: "+fmt.Sprintf("%#v", this.UnStakedEpoch)+",\n")
	s = append(s, "RewardAddress: "+fmt.Sprintf("%#v", this.RewardAddress)+",\n")
	s = append(s, "StakeValue: "+fmt.Sprintf("%#v", this.StakeValue)+",\n")
	s = append(s, "JailedRound: "+fmt.Sprintf("%#v", this.JailedRound)+",\n")
	s = append(s, "JailedNonce: "+fmt.Sprintf("%#v", this.JailedNonce)+",\n")
	s = append(s, "UnJailedNonce: "+fmt.Sprintf("%#v", this.UnJailedNonce)+",\n")
	s = append(s, "Jailed: "+fmt.Sprintf("%#v", this.Jailed)+",\n")
	s = append(s, "Waiting: "+fmt.Sprintf("%#v", this.Waiting)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StakedDataV1_1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&systemSmartContracts.StakedDataV1_1{")
	s = append(s, "RegisterNonce: "+fmt.Sprintf("%#v", this.RegisterNonce)+",\n")
	s = append(s, "StakedNonce: "+fmt.Sprintf("%#v", this.StakedNonce)+",\n")
	s = append(s, "Staked: "+fmt.Sprintf("%#v", this.Staked)+",\n")
	s = append(s, "UnStakedNonce: "+fmt.Sprintf("%#v", this.UnStakedNonce)+",\n")
	s = append(s, "UnStakedEpoch: "+fmt.Sprintf("%#v", this.UnStakedEpoch)+",\n")
	s = append(s, "RewardAddress: "+fmt.Sprintf("%#v", this.RewardAddress)+",\n")
	s = append(s, "StakeValue: "+fmt.Sprintf("%#v", this.StakeValue)+",\n")
	s = append(s, "JailedRound: "+fmt.Sprintf("%#v", this.JailedRound)+",\n")
	s = append(s, "JailedNonce: "+fmt.Sprintf("%#v", this.JailedNonce)+",\n")
	s = append(s, "UnJailedNonce: "+fmt.Sprintf("%#v", this.UnJailedNonce)+",\n")
	s = append(s, "Jailed: "+fmt.Sprintf("%#v", this.Jailed)+",\n")
	s = append(s, "Waiting: "+fmt.Sprintf("%#v", this.Waiting)+",\n")
	s = append(s, "NumJailed: "+fmt.Sprintf("%#v", this.NumJailed)+",\n")
	s = append(s, "SlashValue: "+fmt.Sprintf("%#v", this.SlashValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StakedDataV2_0) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&systemSmartContracts.StakedDataV2_0{")
	s = append(s, "RegisterNonce: "+fmt.Sprintf("%#v", this.RegisterNonce)+",\n")
	s = append(s, "StakedNonce: "+fmt.Sprintf("%#v", this.StakedNonce)+",\n")
	s = append(s, "Staked: "+fmt.Sprintf("%#v", this.Staked)+",\n")
	s = append(s, "UnStakedNonce: "+fmt.Sprintf("%#v", this.UnStakedNonce)+",\n")
	s = append(s, "UnStakedEpoch: "+fmt.Sprintf("%#v", this.UnStakedEpoch)+",\n")
	s = append(s, "RewardAddress: "+fmt.Sprintf("%#v", this.RewardAddress)+",\n")
	s = append(s, "StakeValue: "+fmt.Sprintf("%#v", this.StakeValue)+",\n")
	s = append(s, "JailedRound: "+fmt.Sprintf("%#v", this.JailedRound)+",\n")
	s = append(s, "JailedNonce: "+fmt.Sprintf("%#v", this.JailedNonce)+",\n")
	s = append(s, "UnJailedNonce: "+fmt.Sprintf("%#v", this.UnJailedNonce)+",\n")
	s = append(s, "Jailed: "+fmt.Sprintf("%#v", this.Jailed)+",\n")
	s = append(s, "Waiting: "+fmt.Sprintf("%#v", this.Waiting)+",\n")
	s = append(s, "NumJailed: "+fmt.Sprintf("%#v", this.NumJailed)+",\n")
	s = append(s, "SlashValue: "+fmt.Sprintf("%#v", this.SlashValue)+",\n")
	s = append(s, "OwnerAddress: "+fmt.Sprintf("%#v", this.OwnerAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StakingNodesConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&systemSmartContracts.StakingNodesConfig{")
	s = append(s, "MinNumNodes: "+fmt.Sprintf("%#v", this.MinNumNodes)+",\n")
	s = append(s, "MaxNumNodes: "+fmt.Sprintf("%#v", this.MaxNumNodes)+",\n")
	s = append(s, "StakedNodes: "+fmt.Sprintf("%#v", this.StakedNodes)+",\n")
	s = append(s, "JailedNodes: "+fmt.Sprintf("%#v", this.JailedNodes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ElementInList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&systemSmartContracts.ElementInList{")
	s = append(s, "BLSPublicKey: "+fmt.Sprintf("%#v", this.BLSPublicKey)+",\n")
	s = append(s, "PreviousKey: "+fmt.Sprintf("%#v", this.PreviousKey)+",\n")
	s = append(s, "NextKey: "+fmt.Sprintf("%#v", this.NextKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WaitingList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&systemSmartContracts.WaitingList{")
	s = append(s, "FirstKey: "+fmt.Sprintf("%#v", this.FirstKey)+",\n")
	s = append(s, "LastKey: "+fmt.Sprintf("%#v", this.LastKey)+",\n")
	s = append(s, "Length: "+fmt.Sprintf("%#v", this.Length)+",\n")
	s = append(s, "LastJailedKey: "+fmt.Sprintf("%#v", this.LastJailedKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStaking(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StakedDataV1_0) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakedDataV1_0) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakedDataV1_0) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Waiting {
		i--
		if m.Waiting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.UnJailedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnJailedNonce))
		i--
		dAtA[i] = 0x50
	}
	if m.JailedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.JailedNonce))
		i--
		dAtA[i] = 0x48
	}
	if m.JailedRound != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.JailedRound))
		i--
		dAtA[i] = 0x40
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.StakeValue)
		i -= size
		if _, err := __caster.MarshalTo(m.StakeValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.UnStakedEpoch != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnStakedEpoch))
		i--
		dAtA[i] = 0x28
	}
	if m.UnStakedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnStakedNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.Staked {
		i--
		if m.Staked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.StakedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.StakedNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.RegisterNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.RegisterNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StakedDataV1_1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakedDataV1_1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakedDataV1_1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.SlashValue)
		i -= size
		if _, err := __caster.MarshalTo(m.SlashValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if m.NumJailed != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.NumJailed))
		i--
		dAtA[i] = 0x68
	}
	if m.Waiting {
		i--
		if m.Waiting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.UnJailedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnJailedNonce))
		i--
		dAtA[i] = 0x50
	}
	if m.JailedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.JailedNonce))
		i--
		dAtA[i] = 0x48
	}
	if m.JailedRound != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.JailedRound))
		i--
		dAtA[i] = 0x40
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.StakeValue)
		i -= size
		if _, err := __caster.MarshalTo(m.StakeValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.UnStakedEpoch != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnStakedEpoch))
		i--
		dAtA[i] = 0x28
	}
	if m.UnStakedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnStakedNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.Staked {
		i--
		if m.Staked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.StakedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.StakedNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.RegisterNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.RegisterNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StakedDataV2_0) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakedDataV2_0) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakedDataV2_0) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x7a
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.SlashValue)
		i -= size
		if _, err := __caster.MarshalTo(m.SlashValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if m.NumJailed != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.NumJailed))
		i--
		dAtA[i] = 0x68
	}
	if m.Waiting {
		i--
		if m.Waiting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.UnJailedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnJailedNonce))
		i--
		dAtA[i] = 0x50
	}
	if m.JailedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.JailedNonce))
		i--
		dAtA[i] = 0x48
	}
	if m.JailedRound != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.JailedRound))
		i--
		dAtA[i] = 0x40
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.StakeValue)
		i -= size
		if _, err := __caster.MarshalTo(m.StakeValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.UnStakedEpoch != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnStakedEpoch))
		i--
		dAtA[i] = 0x28
	}
	if m.UnStakedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnStakedNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.Staked {
		i--
		if m.Staked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.StakedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.StakedNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.RegisterNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.RegisterNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StakingNodesConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingNodesConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingNodesConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JailedNodes != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.JailedNodes))
		i--
		dAtA[i] = 0x20
	}
	if m.StakedNodes != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.StakedNodes))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxNumNodes != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.MaxNumNodes))
		i--
		dAtA[i] = 0x10
	}
	if m.MinNumNodes != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.MinNumNodes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ElementInList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElementInList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElementInList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextKey) > 0 {
		i -= len(m.NextKey)
		copy(dAtA[i:], m.NextKey)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.NextKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PreviousKey) > 0 {
		i -= len(m.PreviousKey)
		copy(dAtA[i:], m.PreviousKey)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.PreviousKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BLSPublicKey) > 0 {
		i -= len(m.BLSPublicKey)
		copy(dAtA[i:], m.BLSPublicKey)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.BLSPublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WaitingList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitingList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaitingList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastJailedKey) > 0 {
		i -= len(m.LastJailedKey)
		copy(dAtA[i:], m.LastJailedKey)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.LastJailedKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.Length != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LastKey) > 0 {
		i -= len(m.LastKey)
		copy(dAtA[i:], m.LastKey)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.LastKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstKey) > 0 {
		i -= len(m.FirstKey)
		copy(dAtA[i:], m.FirstKey)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.FirstKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovStaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakedDataV1_0) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterNonce != 0 {
		n += 1 + sovStaking(uint64(m.RegisterNonce))
	}
	if m.StakedNonce != 0 {
		n += 1 + sovStaking(uint64(m.StakedNonce))
	}
	if m.Staked {
		n += 2
	}
	if m.UnStakedNonce != 0 {
		n += 1 + sovStaking(uint64(m.UnStakedNonce))
	}
	if m.UnStakedEpoch != 0 {
		n += 1 + sovStaking(uint64(m.UnStakedEpoch))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.StakeValue)
		n += 1 + l + sovStaking(uint64(l))
	}
	if m.JailedRound != 0 {
		n += 1 + sovStaking(uint64(m.JailedRound))
	}
	if m.JailedNonce != 0 {
		n += 1 + sovStaking(uint64(m.JailedNonce))
	}
	if m.UnJailedNonce != 0 {
		n += 1 + sovStaking(uint64(m.UnJailedNonce))
	}
	if m.Jailed {
		n += 2
	}
	if m.Waiting {
		n += 2
	}
	return n
}

func (m *StakedDataV1_1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterNonce != 0 {
		n += 1 + sovStaking(uint64(m.RegisterNonce))
	}
	if m.StakedNonce != 0 {
		n += 1 + sovStaking(uint64(m.StakedNonce))
	}
	if m.Staked {
		n += 2
	}
	if m.UnStakedNonce != 0 {
		n += 1 + sovStaking(uint64(m.UnStakedNonce))
	}
	if m.UnStakedEpoch != 0 {
		n += 1 + sovStaking(uint64(m.UnStakedEpoch))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.StakeValue)
		n += 1 + l + sovStaking(uint64(l))
	}
	if m.JailedRound != 0 {
		n += 1 + sovStaking(uint64(m.JailedRound))
	}
	if m.JailedNonce != 0 {
		n += 1 + sovStaking(uint64(m.JailedNonce))
	}
	if m.UnJailedNonce != 0 {
		n += 1 + sovStaking(uint64(m.UnJailedNonce))
	}
	if m.Jailed {
		n += 2
	}
	if m.Waiting {
		n += 2
	}
	if m.NumJailed != 0 {
		n += 1 + sovStaking(uint64(m.NumJailed))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.SlashValue)
		n += 1 + l + sovStaking(uint64(l))
	}
	return n
}

func (m *StakedDataV2_0) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterNonce != 0 {
		n += 1 + sovStaking(uint64(m.RegisterNonce))
	}
	if m.StakedNonce != 0 {
		n += 1 + sovStaking(uint64(m.StakedNonce))
	}
	if m.Staked {
		n += 2
	}
	if m.UnStakedNonce != 0 {
		n += 1 + sovStaking(uint64(m.UnStakedNonce))
	}
	if m.UnStakedEpoch != 0 {
		n += 1 + sovStaking(uint64(m.UnStakedEpoch))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.StakeValue)
		n += 1 + l + sovStaking(uint64(l))
	}
	if m.JailedRound != 0 {
		n += 1 + sovStaking(uint64(m.JailedRound))
	}
	if m.JailedNonce != 0 {
		n += 1 + sovStaking(uint64(m.JailedNonce))
	}
	if m.UnJailedNonce != 0 {
		n += 1 + sovStaking(uint64(m.UnJailedNonce))
	}
	if m.Jailed {
		n += 2
	}
	if m.Waiting {
		n += 2
	}
	if m.NumJailed != 0 {
		n += 1 + sovStaking(uint64(m.NumJailed))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.SlashValue)
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	return n
}

func (m *StakingNodesConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinNumNodes != 0 {
		n += 1 + sovStaking(uint64(m.MinNumNodes))
	}
	if m.MaxNumNodes != 0 {
		n += 1 + sovStaking(uint64(m.MaxNumNodes))
	}
	if m.StakedNodes != 0 {
		n += 1 + sovStaking(uint64(m.StakedNodes))
	}
	if m.JailedNodes != 0 {
		n += 1 + sovStaking(uint64(m.JailedNodes))
	}
	return n
}

func (m *ElementInList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BLSPublicKey)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.PreviousKey)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.NextKey)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	return n
}

func (m *WaitingList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstKey)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	l = len(m.LastKey)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovStaking(uint64(m.Length))
	}
	l = len(m.LastJailedKey)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	return n
}

func sovStaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStaking(x uint64) (n int) {
	return sovStaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StakedDataV1_0) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StakedDataV1_0{`,
		`RegisterNonce:` + fmt.Sprintf("%v", this.RegisterNonce) + `,`,
		`StakedNonce:` + fmt.Sprintf("%v", this.StakedNonce) + `,`,
		`Staked:` + fmt.Sprintf("%v", this.Staked) + `,`,
		`UnStakedNonce:` + fmt.Sprintf("%v", this.UnStakedNonce) + `,`,
		`UnStakedEpoch:` + fmt.Sprintf("%v", this.UnStakedEpoch) + `,`,
		`RewardAddress:` + fmt.Sprintf("%v", this.RewardAddress) + `,`,
		`StakeValue:` + fmt.Sprintf("%v", this.StakeValue) + `,`,
		`JailedRound:` + fmt.Sprintf("%v", this.JailedRound) + `,`,
		`JailedNonce:` + fmt.Sprintf("%v", this.JailedNonce) + `,`,
		`UnJailedNonce:` + fmt.Sprintf("%v", this.UnJailedNonce) + `,`,
		`Jailed:` + fmt.Sprintf("%v", this.Jailed) + `,`,
		`Waiting:` + fmt.Sprintf("%v", this.Waiting) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StakedDataV1_1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StakedDataV1_1{`,
		`RegisterNonce:` + fmt.Sprintf("%v", this.RegisterNonce) + `,`,
		`StakedNonce:` + fmt.Sprintf("%v", this.StakedNonce) + `,`,
		`Staked:` + fmt.Sprintf("%v", this.Staked) + `,`,
		`UnStakedNonce:` + fmt.Sprintf("%v", this.UnStakedNonce) + `,`,
		`UnStakedEpoch:` + fmt.Sprintf("%v", this.UnStakedEpoch) + `,`,
		`RewardAddress:` + fmt.Sprintf("%v", this.RewardAddress) + `,`,
		`StakeValue:` + fmt.Sprintf("%v", this.StakeValue) + `,`,
		`JailedRound:` + fmt.Sprintf("%v", this.JailedRound) + `,`,
		`JailedNonce:` + fmt.Sprintf("%v", this.JailedNonce) + `,`,
		`UnJailedNonce:` + fmt.Sprintf("%v", this.UnJailedNonce) + `,`,
		`Jailed:` + fmt.Sprintf("%v", this.Jailed) + `,`,
		`Waiting:` + fmt.Sprintf("%v", this.Waiting) + `,`,
		`NumJailed:` + fmt.Sprintf("%v", this.NumJailed) + `,`,
		`SlashValue:` + fmt.Sprintf("%v", this.SlashValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StakedDataV2_0) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StakedDataV2_0{`,
		`RegisterNonce:` + fmt.Sprintf("%v", this.RegisterNonce) + `,`,
		`StakedNonce:` + fmt.Sprintf("%v", this.StakedNonce) + `,`,
		`Staked:` + fmt.Sprintf("%v", this.Staked) + `,`,
		`UnStakedNonce:` + fmt.Sprintf("%v", this.UnStakedNonce) + `,`,
		`UnStakedEpoch:` + fmt.Sprintf("%v", this.UnStakedEpoch) + `,`,
		`RewardAddress:` + fmt.Sprintf("%v", this.RewardAddress) + `,`,
		`StakeValue:` + fmt.Sprintf("%v", this.StakeValue) + `,`,
		`JailedRound:` + fmt.Sprintf("%v", this.JailedRound) + `,`,
		`JailedNonce:` + fmt.Sprintf("%v", this.JailedNonce) + `,`,
		`UnJailedNonce:` + fmt.Sprintf("%v", this.UnJailedNonce) + `,`,
		`Jailed:` + fmt.Sprintf("%v", this.Jailed) + `,`,
		`Waiting:` + fmt.Sprintf("%v", this.Waiting) + `,`,
		`NumJailed:` + fmt.Sprintf("%v", this.NumJailed) + `,`,
		`SlashValue:` + fmt.Sprintf("%v", this.SlashValue) + `,`,
		`OwnerAddress:` + fmt.Sprintf("%v", this.OwnerAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StakingNodesConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StakingNodesConfig{`,
		`MinNumNodes:` + fmt.Sprintf("%v", this.MinNumNodes) + `,`,
		`MaxNumNodes:` + fmt.Sprintf("%v", this.MaxNumNodes) + `,`,
		`StakedNodes:` + fmt.Sprintf("%v", this.StakedNodes) + `,`,
		`JailedNodes:` + fmt.Sprintf("%v", this.JailedNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ElementInList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ElementInList{`,
		`BLSPublicKey:` + fmt.Sprintf("%v", this.BLSPublicKey) + `,`,
		`PreviousKey:` + fmt.Sprintf("%v", this.PreviousKey) + `,`,
		`NextKey:` + fmt.Sprintf("%v", this.NextKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WaitingList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WaitingList{`,
		`FirstKey:` + fmt.Sprintf("%v", this.FirstKey) + `,`,
		`LastKey:` + fmt.Sprintf("%v", this.LastKey) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`LastJailedKey:` + fmt.Sprintf("%v", this.LastJailedKey) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStaking(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StakedDataV1_0) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakedDataV1_0: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakedDataV1_0: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterNonce", wireType)
			}
			m.RegisterNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisterNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedNonce", wireType)
			}
			m.StakedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Staked = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedNonce", wireType)
			}
			m.UnStakedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnStakedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedEpoch", wireType)
			}
			m.UnStakedEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnStakedEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = append(m.RewardAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAddress == nil {
				m.RewardAddress = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.StakeValue = tmp
				}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedRound", wireType)
			}
			m.JailedRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailedRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedNonce", wireType)
			}
			m.JailedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnJailedNonce", wireType)
			}
			m.UnJailedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnJailedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waiting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Waiting = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakedDataV1_1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakedDataV1_1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakedDataV1_1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterNonce", wireType)
			}
			m.RegisterNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisterNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedNonce", wireType)
			}
			m.StakedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Staked = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedNonce", wireType)
			}
			m.UnStakedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnStakedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedEpoch", wireType)
			}
			m.UnStakedEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnStakedEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = append(m.RewardAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAddress == nil {
				m.RewardAddress = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.StakeValue = tmp
				}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedRound", wireType)
			}
			m.JailedRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailedRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedNonce", wireType)
			}
			m.JailedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnJailedNonce", wireType)
			}
			m.UnJailedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnJailedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waiting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Waiting = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumJailed", wireType)
			}
			m.NumJailed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumJailed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.SlashValue = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakedDataV2_0) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakedDataV2_0: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakedDataV2_0: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterNonce", wireType)
			}
			m.RegisterNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisterNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedNonce", wireType)
			}
			m.StakedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Staked = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedNonce", wireType)
			}
			m.UnStakedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnStakedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedEpoch", wireType)
			}
			m.UnStakedEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnStakedEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = append(m.RewardAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAddress == nil {
				m.RewardAddress = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.StakeValue = tmp
				}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedRound", wireType)
			}
			m.JailedRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailedRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedNonce", wireType)
			}
			m.JailedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnJailedNonce", wireType)
			}
			m.UnJailedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnJailedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waiting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Waiting = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumJailed", wireType)
			}
			m.NumJailed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumJailed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.SlashValue = tmp
				}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = append(m.OwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OwnerAddress == nil {
				m.OwnerAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingNodesConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingNodesConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingNodesConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNumNodes", wireType)
			}
			m.MinNumNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinNumNodes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumNodes", wireType)
			}
			m.MaxNumNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumNodes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedNodes", wireType)
			}
			m.StakedNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakedNodes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedNodes", wireType)
			}
			m.JailedNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailedNodes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElementInList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElementInList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElementInList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BLSPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BLSPublicKey = append(m.BLSPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BLSPublicKey == nil {
				m.BLSPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousKey = append(m.PreviousKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousKey == nil {
				m.PreviousKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextKey = append(m.NextKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NextKey == nil {
				m.NextKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitingList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitingList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitingList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstKey = append(m.FirstKey[:0], dAtA[iNdEx:postIndex]...)
			if m.FirstKey == nil {
				m.FirstKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastKey = append(m.LastKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LastKey == nil {
				m.LastKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastJailedKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastJailedKey = append(m.LastJailedKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LastJailedKey == nil {
				m.LastJailedKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStaking = fmt.Errorf("proto: unexpected end of group")
)
