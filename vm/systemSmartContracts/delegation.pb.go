// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: delegation.proto

package systemSmartContracts

import (
	bytes "bytes"
	fmt "fmt"
	github_com_ElrondNetwork_elrond_go_core_data "github.com/ElrondNetwork/elrond-go-core/data"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegationManagement struct {
	NumOfContracts      uint32        `protobuf:"varint,1,opt,name=NumOfContracts,proto3" json:"NumOfContracts"`
	LastAddress         []byte        `protobuf:"bytes,2,opt,name=LastAddress,proto3" json:"LastAddress"`
	MinServiceFee       uint64        `protobuf:"varint,3,opt,name=MinServiceFee,proto3" json:"MinServiceFee"`
	MaxServiceFee       uint64        `protobuf:"varint,4,opt,name=MaxServiceFee,proto3" json:"MaxServiceFee"`
	MinDeposit          *math_big.Int `protobuf:"bytes,5,opt,name=MinDeposit,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"MinDeposit"`
	MinDelegationAmount *math_big.Int `protobuf:"bytes,6,opt,name=MinDelegationAmount,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"MinDelegationAmount"`
}

func (m *DelegationManagement) Reset()      { *m = DelegationManagement{} }
func (*DelegationManagement) ProtoMessage() {}
func (*DelegationManagement) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{0}
}
func (m *DelegationManagement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationManagement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegationManagement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationManagement.Merge(m, src)
}
func (m *DelegationManagement) XXX_Size() int {
	return m.Size()
}
func (m *DelegationManagement) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationManagement.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationManagement proto.InternalMessageInfo

func (m *DelegationManagement) GetNumOfContracts() uint32 {
	if m != nil {
		return m.NumOfContracts
	}
	return 0
}

func (m *DelegationManagement) GetLastAddress() []byte {
	if m != nil {
		return m.LastAddress
	}
	return nil
}

func (m *DelegationManagement) GetMinServiceFee() uint64 {
	if m != nil {
		return m.MinServiceFee
	}
	return 0
}

func (m *DelegationManagement) GetMaxServiceFee() uint64 {
	if m != nil {
		return m.MaxServiceFee
	}
	return 0
}

func (m *DelegationManagement) GetMinDeposit() *math_big.Int {
	if m != nil {
		return m.MinDeposit
	}
	return nil
}

func (m *DelegationManagement) GetMinDelegationAmount() *math_big.Int {
	if m != nil {
		return m.MinDelegationAmount
	}
	return nil
}

type DelegationContractList struct {
	Addresses [][]byte `protobuf:"bytes,1,rep,name=Addresses,proto3" json:"Addresses"`
}

func (m *DelegationContractList) Reset()      { *m = DelegationContractList{} }
func (*DelegationContractList) ProtoMessage() {}
func (*DelegationContractList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{1}
}
func (m *DelegationContractList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationContractList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegationContractList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationContractList.Merge(m, src)
}
func (m *DelegationContractList) XXX_Size() int {
	return m.Size()
}
func (m *DelegationContractList) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationContractList.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationContractList proto.InternalMessageInfo

func (m *DelegationContractList) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type DelegationConfig struct {
	MaxDelegationCap            *math_big.Int `protobuf:"bytes,1,opt,name=MaxDelegationCap,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"MaxDelegationCap"`
	InitialOwnerFunds           *math_big.Int `protobuf:"bytes,2,opt,name=InitialOwnerFunds,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"InitialOwnerFunds"`
	AutomaticActivation         bool          `protobuf:"varint,3,opt,name=AutomaticActivation,proto3" json:"AutomaticActivation"`
	ChangeableServiceFee        bool          `protobuf:"varint,4,opt,name=ChangeableServiceFee,proto3" json:"ChangeableServiceFee"`
	CreatedNonce                uint64        `protobuf:"varint,5,opt,name=CreatedNonce,proto3" json:"CreatedNonce"`
	UnBondPeriodInEpochs        uint32        `protobuf:"varint,6,opt,name=UnBondPeriodInEpochs,proto3" json:"UnBondPeriodInEpochs"`
	CheckCapOnReDelegateRewards bool          `protobuf:"varint,7,opt,name=CheckCapOnReDelegateRewards,proto3" json:"CheckCapOnReDelegateRewards"`
}

func (m *DelegationConfig) Reset()      { *m = DelegationConfig{} }
func (*DelegationConfig) ProtoMessage() {}
func (*DelegationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{2}
}
func (m *DelegationConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationConfig.Merge(m, src)
}
func (m *DelegationConfig) XXX_Size() int {
	return m.Size()
}
func (m *DelegationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationConfig proto.InternalMessageInfo

func (m *DelegationConfig) GetMaxDelegationCap() *math_big.Int {
	if m != nil {
		return m.MaxDelegationCap
	}
	return nil
}

func (m *DelegationConfig) GetInitialOwnerFunds() *math_big.Int {
	if m != nil {
		return m.InitialOwnerFunds
	}
	return nil
}

func (m *DelegationConfig) GetAutomaticActivation() bool {
	if m != nil {
		return m.AutomaticActivation
	}
	return false
}

func (m *DelegationConfig) GetChangeableServiceFee() bool {
	if m != nil {
		return m.ChangeableServiceFee
	}
	return false
}

func (m *DelegationConfig) GetCreatedNonce() uint64 {
	if m != nil {
		return m.CreatedNonce
	}
	return 0
}

func (m *DelegationConfig) GetUnBondPeriodInEpochs() uint32 {
	if m != nil {
		return m.UnBondPeriodInEpochs
	}
	return 0
}

func (m *DelegationConfig) GetCheckCapOnReDelegateRewards() bool {
	if m != nil {
		return m.CheckCapOnReDelegateRewards
	}
	return false
}

type DelegationMetaData struct {
	Name       []byte `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name"`
	Website    []byte `protobuf:"bytes,2,opt,name=Website,proto3" json:"Website"`
	Identifier []byte `protobuf:"bytes,3,opt,name=Identifier,proto3" json:"Identifier"`
}

func (m *DelegationMetaData) Reset()      { *m = DelegationMetaData{} }
func (*DelegationMetaData) ProtoMessage() {}
func (*DelegationMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{3}
}
func (m *DelegationMetaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegationMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationMetaData.Merge(m, src)
}
func (m *DelegationMetaData) XXX_Size() int {
	return m.Size()
}
func (m *DelegationMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationMetaData proto.InternalMessageInfo

func (m *DelegationMetaData) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DelegationMetaData) GetWebsite() []byte {
	if m != nil {
		return m.Website
	}
	return nil
}

func (m *DelegationMetaData) GetIdentifier() []byte {
	if m != nil {
		return m.Identifier
	}
	return nil
}

type DelegationContractStatus struct {
	StakedKeys    []*NodesData `protobuf:"bytes,1,rep,name=StakedKeys,proto3" json:"StakedKeys"`
	NotStakedKeys []*NodesData `protobuf:"bytes,2,rep,name=NotStakedKeys,proto3" json:"NotStakedKeys"`
	UnStakedKeys  []*NodesData `protobuf:"bytes,3,rep,name=UnStakedKeys,proto3" json:"UnStakedKeys"`
	NumUsers      uint64       `protobuf:"varint,4,opt,name=NumUsers,proto3" json:"NumUsers"`
}

func (m *DelegationContractStatus) Reset()      { *m = DelegationContractStatus{} }
func (*DelegationContractStatus) ProtoMessage() {}
func (*DelegationContractStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{4}
}
func (m *DelegationContractStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationContractStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegationContractStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationContractStatus.Merge(m, src)
}
func (m *DelegationContractStatus) XXX_Size() int {
	return m.Size()
}
func (m *DelegationContractStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationContractStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationContractStatus proto.InternalMessageInfo

func (m *DelegationContractStatus) GetStakedKeys() []*NodesData {
	if m != nil {
		return m.StakedKeys
	}
	return nil
}

func (m *DelegationContractStatus) GetNotStakedKeys() []*NodesData {
	if m != nil {
		return m.NotStakedKeys
	}
	return nil
}

func (m *DelegationContractStatus) GetUnStakedKeys() []*NodesData {
	if m != nil {
		return m.UnStakedKeys
	}
	return nil
}

func (m *DelegationContractStatus) GetNumUsers() uint64 {
	if m != nil {
		return m.NumUsers
	}
	return 0
}

type Fund struct {
	Value   *math_big.Int `protobuf:"bytes,1,opt,name=Value,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"Value"`
	Address []byte        `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address"`
	Epoch   uint32        `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch"`
	Type    uint32        `protobuf:"varint,4,opt,name=Type,proto3" json:"Type"`
}

func (m *Fund) Reset()      { *m = Fund{} }
func (*Fund) ProtoMessage() {}
func (*Fund) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{5}
}
func (m *Fund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Fund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fund.Merge(m, src)
}
func (m *Fund) XXX_Size() int {
	return m.Size()
}
func (m *Fund) XXX_DiscardUnknown() {
	xxx_messageInfo_Fund.DiscardUnknown(m)
}

var xxx_messageInfo_Fund proto.InternalMessageInfo

func (m *Fund) GetValue() *math_big.Int {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Fund) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Fund) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Fund) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type DelegatorData struct {
	ActiveFund            []byte        `protobuf:"bytes,1,opt,name=ActiveFund,proto3" json:"ActiveFund"`
	UnStakedFunds         [][]byte      `protobuf:"bytes,2,rep,name=UnStakedFunds,proto3" json:"UnStakedFunds"`
	RewardsCheckpoint     uint32        `protobuf:"varint,3,opt,name=RewardsCheckpoint,proto3" json:"RewardsCheckpoint"`
	UnClaimedRewards      *math_big.Int `protobuf:"bytes,4,opt,name=UnClaimedRewards,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"UnClaimedRewards"`
	TotalCumulatedRewards *math_big.Int `protobuf:"bytes,5,opt,name=TotalCumulatedRewards,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"TotalCumulatedRewards"`
}

func (m *DelegatorData) Reset()      { *m = DelegatorData{} }
func (*DelegatorData) ProtoMessage() {}
func (*DelegatorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{6}
}
func (m *DelegatorData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegatorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorData.Merge(m, src)
}
func (m *DelegatorData) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorData) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorData.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorData proto.InternalMessageInfo

func (m *DelegatorData) GetActiveFund() []byte {
	if m != nil {
		return m.ActiveFund
	}
	return nil
}

func (m *DelegatorData) GetUnStakedFunds() [][]byte {
	if m != nil {
		return m.UnStakedFunds
	}
	return nil
}

func (m *DelegatorData) GetRewardsCheckpoint() uint32 {
	if m != nil {
		return m.RewardsCheckpoint
	}
	return 0
}

func (m *DelegatorData) GetUnClaimedRewards() *math_big.Int {
	if m != nil {
		return m.UnClaimedRewards
	}
	return nil
}

func (m *DelegatorData) GetTotalCumulatedRewards() *math_big.Int {
	if m != nil {
		return m.TotalCumulatedRewards
	}
	return nil
}

type GlobalFundData struct {
	TotalActive   *math_big.Int `protobuf:"bytes,1,opt,name=TotalActive,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"TotalActive"`
	TotalUnStaked *math_big.Int `protobuf:"bytes,2,opt,name=TotalUnStaked,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"TotalUnStaked"`
}

func (m *GlobalFundData) Reset()      { *m = GlobalFundData{} }
func (*GlobalFundData) ProtoMessage() {}
func (*GlobalFundData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{7}
}
func (m *GlobalFundData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalFundData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalFundData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalFundData.Merge(m, src)
}
func (m *GlobalFundData) XXX_Size() int {
	return m.Size()
}
func (m *GlobalFundData) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalFundData.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalFundData proto.InternalMessageInfo

func (m *GlobalFundData) GetTotalActive() *math_big.Int {
	if m != nil {
		return m.TotalActive
	}
	return nil
}

func (m *GlobalFundData) GetTotalUnStaked() *math_big.Int {
	if m != nil {
		return m.TotalUnStaked
	}
	return nil
}

type NodesData struct {
	BLSKey    []byte `protobuf:"bytes,1,opt,name=BLSKey,proto3" json:"BLSKey"`
	SignedMsg []byte `protobuf:"bytes,2,opt,name=SignedMsg,proto3" json:"SignedMsg"`
}

func (m *NodesData) Reset()      { *m = NodesData{} }
func (*NodesData) ProtoMessage() {}
func (*NodesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{8}
}
func (m *NodesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesData.Merge(m, src)
}
func (m *NodesData) XXX_Size() int {
	return m.Size()
}
func (m *NodesData) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesData.DiscardUnknown(m)
}

var xxx_messageInfo_NodesData proto.InternalMessageInfo

func (m *NodesData) GetBLSKey() []byte {
	if m != nil {
		return m.BLSKey
	}
	return nil
}

func (m *NodesData) GetSignedMsg() []byte {
	if m != nil {
		return m.SignedMsg
	}
	return nil
}

type RewardComputationData struct {
	RewardsToDistribute *math_big.Int `protobuf:"bytes,1,opt,name=RewardsToDistribute,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"RewardsToDistribute"`
	TotalActive         *math_big.Int `protobuf:"bytes,2,opt,name=TotalActive,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"TotalActive"`
	ServiceFee          uint64        `protobuf:"varint,3,opt,name=ServiceFee,proto3" json:"ServiceFee"`
}

func (m *RewardComputationData) Reset()      { *m = RewardComputationData{} }
func (*RewardComputationData) ProtoMessage() {}
func (*RewardComputationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{9}
}
func (m *RewardComputationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardComputationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RewardComputationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardComputationData.Merge(m, src)
}
func (m *RewardComputationData) XXX_Size() int {
	return m.Size()
}
func (m *RewardComputationData) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardComputationData.DiscardUnknown(m)
}

var xxx_messageInfo_RewardComputationData proto.InternalMessageInfo

func (m *RewardComputationData) GetRewardsToDistribute() *math_big.Int {
	if m != nil {
		return m.RewardsToDistribute
	}
	return nil
}

func (m *RewardComputationData) GetTotalActive() *math_big.Int {
	if m != nil {
		return m.TotalActive
	}
	return nil
}

func (m *RewardComputationData) GetServiceFee() uint64 {
	if m != nil {
		return m.ServiceFee
	}
	return 0
}

func init() {
	proto.RegisterType((*DelegationManagement)(nil), "proto.DelegationManagement")
	proto.RegisterType((*DelegationContractList)(nil), "proto.DelegationContractList")
	proto.RegisterType((*DelegationConfig)(nil), "proto.DelegationConfig")
	proto.RegisterType((*DelegationMetaData)(nil), "proto.DelegationMetaData")
	proto.RegisterType((*DelegationContractStatus)(nil), "proto.DelegationContractStatus")
	proto.RegisterType((*Fund)(nil), "proto.Fund")
	proto.RegisterType((*DelegatorData)(nil), "proto.DelegatorData")
	proto.RegisterType((*GlobalFundData)(nil), "proto.GlobalFundData")
	proto.RegisterType((*NodesData)(nil), "proto.NodesData")
	proto.RegisterType((*RewardComputationData)(nil), "proto.RewardComputationData")
}

func init() { proto.RegisterFile("delegation.proto", fileDescriptor_b823c7d67e95582e) }

var fileDescriptor_b823c7d67e95582e = []byte{
	// 1145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0xe3, 0xc4,
	0x17, 0x8f, 0xd3, 0x74, 0xb7, 0xfb, 0x9a, 0xec, 0xb7, 0x3b, 0xdb, 0x7e, 0x89, 0x00, 0xd9, 0x55,
	0x24, 0xa4, 0x4a, 0xa8, 0xa9, 0xf8, 0x21, 0x21, 0xc1, 0x85, 0x3a, 0x6d, 0x51, 0xb4, 0x6d, 0x8a,
	0x26, 0x2d, 0xbf, 0x05, 0x9a, 0xc4, 0x53, 0x77, 0xd4, 0x78, 0x26, 0xb2, 0xc7, 0xdb, 0x56, 0x5c,
	0xe0, 0x84, 0x40, 0x42, 0x02, 0x71, 0xda, 0xff, 0x00, 0x71, 0xe1, 0xdf, 0xe0, 0xd8, 0x1b, 0x15,
	0x07, 0x43, 0x53, 0x09, 0x21, 0x9f, 0xf6, 0x4f, 0x40, 0x1e, 0xdb, 0x89, 0x9d, 0x78, 0xf7, 0x14,
	0x71, 0x89, 0xdf, 0xfb, 0xbc, 0xf1, 0xf3, 0x9b, 0x79, 0x9f, 0xf7, 0xe6, 0x05, 0x56, 0x2c, 0x3a,
	0xa0, 0x36, 0x91, 0x4c, 0xf0, 0xe6, 0xd0, 0x15, 0x52, 0xa0, 0x45, 0xf5, 0x78, 0x71, 0xd3, 0x66,
	0xf2, 0xd4, 0xef, 0x35, 0xfb, 0xc2, 0xd9, 0xb2, 0x85, 0x2d, 0xb6, 0x14, 0xdc, 0xf3, 0x4f, 0x94,
	0xa6, 0x14, 0x25, 0xc5, 0x6f, 0x35, 0xbe, 0xa9, 0xc0, 0xea, 0xce, 0xd8, 0xd5, 0x01, 0xe1, 0xc4,
	0xa6, 0x0e, 0xe5, 0x12, 0xbd, 0x0d, 0xf7, 0x3b, 0xbe, 0x73, 0x78, 0xd2, 0x12, 0x5c, 0xba, 0xa4,
	0x2f, 0xbd, 0xba, 0xb6, 0xae, 0x6d, 0xd4, 0x4c, 0x14, 0x06, 0xc6, 0x94, 0x05, 0x4f, 0xe9, 0xe8,
	0x35, 0x58, 0xde, 0x27, 0x9e, 0xdc, 0xb6, 0x2c, 0x97, 0x7a, 0x5e, 0xbd, 0xbc, 0xae, 0x6d, 0x54,
	0xcd, 0xff, 0x85, 0x81, 0x91, 0x85, 0x71, 0x56, 0x41, 0x6f, 0x41, 0xed, 0x80, 0xf1, 0x2e, 0x75,
	0x1f, 0xb3, 0x3e, 0xdd, 0xa3, 0xb4, 0xbe, 0xb0, 0xae, 0x6d, 0x54, 0xcc, 0x07, 0x61, 0x60, 0xe4,
	0x0d, 0x38, 0xaf, 0xaa, 0x17, 0xc9, 0x45, 0xe6, 0xc5, 0x4a, 0xe6, 0xc5, 0xac, 0x01, 0xe7, 0x55,
	0x74, 0x01, 0x70, 0xc0, 0xf8, 0x0e, 0x1d, 0x0a, 0x8f, 0xc9, 0xfa, 0xa2, 0x8a, 0xf1, 0xa3, 0x30,
	0x30, 0x32, 0xe8, 0x2f, 0x7f, 0x1a, 0x7b, 0x0e, 0x91, 0xa7, 0x5b, 0x3d, 0x66, 0x37, 0xdb, 0x5c,
	0xbe, 0x93, 0x39, 0xdb, 0xdd, 0x81, 0x2b, 0xb8, 0xd5, 0xa1, 0xf2, 0x5c, 0xb8, 0x67, 0x5b, 0x54,
	0x69, 0x9b, 0xb6, 0xd8, 0xec, 0x0b, 0x97, 0x6e, 0x59, 0x44, 0x92, 0xa6, 0xc9, 0xec, 0x36, 0x97,
	0x2d, 0xe2, 0x49, 0xea, 0xe2, 0x8c, 0x57, 0xf4, 0x93, 0x06, 0x0f, 0x95, 0x9a, 0x1e, 0xfb, 0xb6,
	0x23, 0x7c, 0x2e, 0xeb, 0x77, 0x54, 0x0c, 0x24, 0x0c, 0x8c, 0x22, 0xf3, 0x1c, 0x83, 0x29, 0x72,
	0xdf, 0xd8, 0x85, 0xff, 0x4f, 0xb0, 0x34, 0x97, 0xfb, 0xcc, 0x93, 0xe8, 0x55, 0xb8, 0x97, 0xa4,
	0x89, 0x46, 0x2c, 0x58, 0xd8, 0xa8, 0x9a, 0xb5, 0x30, 0x30, 0x26, 0x20, 0x9e, 0x88, 0x8d, 0x5f,
	0x17, 0x61, 0x25, 0xe7, 0xe7, 0x84, 0xd9, 0xe8, 0x3b, 0x0d, 0x56, 0x0e, 0xc8, 0x45, 0x06, 0x27,
	0x43, 0xc5, 0xa7, 0xaa, 0xf9, 0x79, 0x18, 0x18, 0x33, 0xb6, 0x39, 0xee, 0x75, 0xc6, 0x37, 0xfa,
	0x5e, 0x83, 0x07, 0x6d, 0xce, 0x24, 0x23, 0x83, 0xc3, 0x73, 0x4e, 0xdd, 0x3d, 0x9f, 0x5b, 0x29,
	0x49, 0xbf, 0x08, 0x03, 0x63, 0xd6, 0x38, 0xc7, 0x70, 0x66, 0x9d, 0xa3, 0x36, 0x3c, 0xdc, 0xf6,
	0xa5, 0x70, 0x88, 0x64, 0xfd, 0xed, 0xbe, 0x64, 0x8f, 0x55, 0xa4, 0xaa, 0x00, 0x96, 0xcc, 0x17,
	0x22, 0x36, 0x14, 0x98, 0x71, 0x11, 0x88, 0xf6, 0x61, 0xb5, 0x75, 0x4a, 0xb8, 0x4d, 0x49, 0x6f,
	0x40, 0xa7, 0x6a, 0x62, 0xc9, 0xac, 0x87, 0x81, 0x51, 0x68, 0xc7, 0x85, 0x28, 0x7a, 0x13, 0xaa,
	0x2d, 0x97, 0x12, 0x49, 0xad, 0x8e, 0xe0, 0x7d, 0xaa, 0x6a, 0xa4, 0x62, 0xae, 0x84, 0x81, 0x91,
	0xc3, 0x71, 0x4e, 0x8b, 0x62, 0x38, 0xe6, 0xa6, 0xe0, 0xd6, 0xfb, 0xd4, 0x65, 0xc2, 0x6a, 0xf3,
	0xdd, 0xa1, 0xe8, 0x9f, 0x7a, 0x8a, 0xdd, 0xb5, 0x38, 0x86, 0x22, 0x3b, 0x2e, 0x44, 0x11, 0x81,
	0x97, 0x5a, 0xa7, 0xb4, 0x7f, 0xd6, 0x22, 0xc3, 0x43, 0x8e, 0x69, 0x92, 0x49, 0x8a, 0xe9, 0x39,
	0x71, 0x2d, 0xaf, 0x7e, 0x57, 0x6d, 0xcc, 0x08, 0x03, 0xe3, 0x79, 0xcb, 0xf0, 0xf3, 0x8c, 0x8d,
	0x6f, 0x35, 0x40, 0x99, 0x16, 0x48, 0x25, 0xd9, 0x21, 0x92, 0xa0, 0x97, 0xa1, 0xd2, 0x21, 0x0e,
	0x4d, 0x68, 0xba, 0x14, 0x06, 0x86, 0xd2, 0xb1, 0xfa, 0x45, 0xaf, 0xc0, 0xdd, 0x0f, 0x69, 0xcf,
	0x63, 0x92, 0x26, 0xcc, 0x59, 0x0e, 0x03, 0x23, 0x85, 0x70, 0x2a, 0xa0, 0x26, 0x40, 0xdb, 0xa2,
	0x5c, 0xb2, 0x13, 0x46, 0x5d, 0x95, 0xd2, 0xaa, 0x79, 0x3f, 0x6a, 0x32, 0x13, 0x14, 0x67, 0xe4,
	0xc6, 0x93, 0x32, 0xd4, 0x67, 0xab, 0xb0, 0x2b, 0x89, 0xf4, 0x3d, 0xf4, 0x2e, 0x40, 0x57, 0x92,
	0x33, 0x6a, 0x3d, 0xa2, 0x97, 0x71, 0x21, 0x2e, 0xbf, 0xbe, 0x12, 0xf7, 0xf1, 0x66, 0x47, 0x58,
	0xd4, 0x8b, 0xe2, 0x8e, 0xdd, 0x4f, 0xd6, 0xe1, 0x8c, 0x8c, 0xda, 0x50, 0xeb, 0x08, 0x99, 0x71,
	0x52, 0x7e, 0x86, 0x13, 0xd5, 0x3e, 0x73, 0x4b, 0x71, 0x5e, 0x45, 0x7b, 0x50, 0x3d, 0xe6, 0x19,
	0x4f, 0x0b, 0xcf, 0xf0, 0xa4, 0xe8, 0x92, 0x5d, 0x89, 0x73, 0x1a, 0xda, 0x80, 0xa5, 0x8e, 0xef,
	0x1c, 0x7b, 0xd4, 0xf5, 0x92, 0xd6, 0x5d, 0x0d, 0x03, 0x63, 0x8c, 0xe1, 0xb1, 0xd4, 0xf8, 0x5d,
	0x83, 0x4a, 0x54, 0x31, 0x88, 0xc1, 0xe2, 0x07, 0x64, 0xe0, 0xa7, 0xa9, 0xe9, 0x86, 0x81, 0x11,
	0x03, 0x73, 0xac, 0xd3, 0xd8, 0x61, 0x94, 0xe6, 0xfc, 0x2d, 0xa6, 0xd2, 0x9c, 0xde, 0x60, 0xa9,
	0x80, 0x0c, 0x58, 0x54, 0x7c, 0x55, 0x19, 0xae, 0x99, 0xf7, 0xa2, 0x88, 0x14, 0x80, 0xe3, 0x47,
	0x44, 0xa6, 0xa3, 0xcb, 0x61, 0x5c, 0x88, 0xb5, 0x98, 0x4c, 0x91, 0x8e, 0xd5, 0x6f, 0xe3, 0xef,
	0x05, 0xa8, 0x25, 0x59, 0x17, 0xae, 0x22, 0x5f, 0x13, 0x40, 0x95, 0x35, 0x8d, 0x36, 0x9c, 0xec,
	0x53, 0x25, 0x76, 0x82, 0xe2, 0x8c, 0x1c, 0xdd, 0x82, 0xe9, 0xa9, 0xa6, 0xed, 0x2c, 0x6a, 0xd3,
	0x2a, 0x8d, 0x39, 0x03, 0xce, 0xab, 0xa8, 0x05, 0x0f, 0x92, 0x3a, 0x50, 0x25, 0x32, 0x14, 0x8c,
	0xcb, 0x64, 0x17, 0x6b, 0x51, 0x2f, 0x9c, 0x31, 0xe2, 0x59, 0x48, 0xb5, 0xf7, 0x63, 0xde, 0x1a,
	0x10, 0xe6, 0x50, 0x2b, 0x2d, 0xcd, 0xca, 0xa4, 0xbd, 0x4f, 0xdb, 0xe6, 0xd9, 0xde, 0xa7, 0x7d,
	0xa3, 0x27, 0x1a, 0xac, 0x1d, 0x09, 0x49, 0x06, 0x2d, 0xdf, 0xf1, 0x07, 0x51, 0x5f, 0x4a, 0x23,
	0x8a, 0xef, 0xf8, 0x7e, 0x18, 0x18, 0xc5, 0x0b, 0xe6, 0x18, 0x56, 0xf1, 0x07, 0x1a, 0x3f, 0x96,
	0xe1, 0xfe, 0x7b, 0x03, 0xd1, 0x23, 0x83, 0xe8, 0xf4, 0x55, 0xa6, 0xbf, 0x84, 0x65, 0xb5, 0x36,
	0x4e, 0x66, 0x92, 0xea, 0x8f, 0xa3, 0x59, 0x29, 0x03, 0xcf, 0x31, 0xb2, 0xac, 0x5b, 0xf4, 0xb5,
	0x06, 0x35, 0xa5, 0xa7, 0xa4, 0x48, 0x58, 0xfe, 0x69, 0xc4, 0x9b, 0x9c, 0x61, 0x8e, 0x11, 0xe4,
	0x1d, 0x37, 0x3e, 0x83, 0x7b, 0xe3, 0x6e, 0x81, 0x1a, 0x70, 0xc7, 0xdc, 0xef, 0x3e, 0xa2, 0x97,
	0xc9, 0x41, 0x40, 0x18, 0x18, 0x09, 0x82, 0x93, 0x67, 0x34, 0x8e, 0x74, 0x99, 0xcd, 0xa9, 0x75,
	0xe0, 0xd9, 0x49, 0xbc, 0x6a, 0x1c, 0x19, 0x83, 0x78, 0x22, 0x36, 0xfe, 0x28, 0xc3, 0x5a, 0x7c,
	0xfa, 0x2d, 0xe1, 0x0c, 0x7d, 0xa9, 0xfa, 0xaa, 0xfa, 0x54, 0x34, 0x85, 0x25, 0x79, 0x39, 0x12,
	0x3b, 0xcc, 0x93, 0x2e, 0xeb, 0xf9, 0x32, 0xcd, 0x80, 0x9a, 0xc2, 0x0a, 0xcc, 0xf3, 0x9c, 0xc2,
	0x0a, 0xdc, 0x4f, 0xd3, 0xa1, 0xfc, 0x9f, 0xd2, 0xa1, 0x09, 0x30, 0x33, 0x81, 0xc7, 0xd7, 0xc9,
	0x64, 0x54, 0xc8, 0xc8, 0x66, 0xe7, 0xea, 0x46, 0x2f, 0x5d, 0xdf, 0xe8, 0xa5, 0xa7, 0x37, 0xba,
	0xf6, 0xd5, 0x48, 0xd7, 0x7e, 0x1e, 0xe9, 0xda, 0x6f, 0x23, 0x5d, 0xbb, 0x1a, 0xe9, 0xda, 0xf5,
	0x48, 0xd7, 0xfe, 0x1a, 0xe9, 0xda, 0x3f, 0x23, 0xbd, 0xf4, 0x74, 0xa4, 0x6b, 0x3f, 0xdc, 0xea,
	0xa5, 0xab, 0x5b, 0xbd, 0x74, 0x7d, 0xab, 0x97, 0x3e, 0x59, 0xf5, 0x2e, 0x3d, 0x49, 0x9d, 0xae,
	0x43, 0x5c, 0x39, 0xfe, 0xdf, 0xd0, 0xbb, 0xa3, 0x2e, 0x8f, 0x37, 0xfe, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x60, 0x31, 0xda, 0xbf, 0xdd, 0x0c, 0x00, 0x00,
}

func (this *DelegationManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegationManagement)
	if !ok {
		that2, ok := that.(DelegationManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumOfContracts != that1.NumOfContracts {
		return false
	}
	if !bytes.Equal(this.LastAddress, that1.LastAddress) {
		return false
	}
	if this.MinServiceFee != that1.MinServiceFee {
		return false
	}
	if this.MaxServiceFee != that1.MaxServiceFee {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.MinDeposit, that1.MinDeposit) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.MinDelegationAmount, that1.MinDelegationAmount) {
			return false
		}
	}
	return true
}
func (this *DelegationContractList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegationContractList)
	if !ok {
		that2, ok := that.(DelegationContractList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if !bytes.Equal(this.Addresses[i], that1.Addresses[i]) {
			return false
		}
	}
	return true
}
func (this *DelegationConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegationConfig)
	if !ok {
		that2, ok := that.(DelegationConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.MaxDelegationCap, that1.MaxDelegationCap) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.InitialOwnerFunds, that1.InitialOwnerFunds) {
			return false
		}
	}
	if this.AutomaticActivation != that1.AutomaticActivation {
		return false
	}
	if this.ChangeableServiceFee != that1.ChangeableServiceFee {
		return false
	}
	if this.CreatedNonce != that1.CreatedNonce {
		return false
	}
	if this.UnBondPeriodInEpochs != that1.UnBondPeriodInEpochs {
		return false
	}
	if this.CheckCapOnReDelegateRewards != that1.CheckCapOnReDelegateRewards {
		return false
	}
	return true
}
func (this *DelegationMetaData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegationMetaData)
	if !ok {
		that2, ok := that.(DelegationMetaData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Name, that1.Name) {
		return false
	}
	if !bytes.Equal(this.Website, that1.Website) {
		return false
	}
	if !bytes.Equal(this.Identifier, that1.Identifier) {
		return false
	}
	return true
}
func (this *DelegationContractStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegationContractStatus)
	if !ok {
		that2, ok := that.(DelegationContractStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StakedKeys) != len(that1.StakedKeys) {
		return false
	}
	for i := range this.StakedKeys {
		if !this.StakedKeys[i].Equal(that1.StakedKeys[i]) {
			return false
		}
	}
	if len(this.NotStakedKeys) != len(that1.NotStakedKeys) {
		return false
	}
	for i := range this.NotStakedKeys {
		if !this.NotStakedKeys[i].Equal(that1.NotStakedKeys[i]) {
			return false
		}
	}
	if len(this.UnStakedKeys) != len(that1.UnStakedKeys) {
		return false
	}
	for i := range this.UnStakedKeys {
		if !this.UnStakedKeys[i].Equal(that1.UnStakedKeys[i]) {
			return false
		}
	}
	if this.NumUsers != that1.NumUsers {
		return false
	}
	return true
}
func (this *Fund) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Fund)
	if !ok {
		that2, ok := that.(Fund)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.Value, that1.Value) {
			return false
		}
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *DelegatorData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegatorData)
	if !ok {
		that2, ok := that.(DelegatorData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ActiveFund, that1.ActiveFund) {
		return false
	}
	if len(this.UnStakedFunds) != len(that1.UnStakedFunds) {
		return false
	}
	for i := range this.UnStakedFunds {
		if !bytes.Equal(this.UnStakedFunds[i], that1.UnStakedFunds[i]) {
			return false
		}
	}
	if this.RewardsCheckpoint != that1.RewardsCheckpoint {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.UnClaimedRewards, that1.UnClaimedRewards) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.TotalCumulatedRewards, that1.TotalCumulatedRewards) {
			return false
		}
	}
	return true
}
func (this *GlobalFundData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalFundData)
	if !ok {
		that2, ok := that.(GlobalFundData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.TotalActive, that1.TotalActive) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.TotalUnStaked, that1.TotalUnStaked) {
			return false
		}
	}
	return true
}
func (this *NodesData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodesData)
	if !ok {
		that2, ok := that.(NodesData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BLSKey, that1.BLSKey) {
		return false
	}
	if !bytes.Equal(this.SignedMsg, that1.SignedMsg) {
		return false
	}
	return true
}
func (this *RewardComputationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardComputationData)
	if !ok {
		that2, ok := that.(RewardComputationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.RewardsToDistribute, that1.RewardsToDistribute) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.TotalActive, that1.TotalActive) {
			return false
		}
	}
	if this.ServiceFee != that1.ServiceFee {
		return false
	}
	return true
}
func (this *DelegationManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&systemSmartContracts.DelegationManagement{")
	s = append(s, "NumOfContracts: "+fmt.Sprintf("%#v", this.NumOfContracts)+",\n")
	s = append(s, "LastAddress: "+fmt.Sprintf("%#v", this.LastAddress)+",\n")
	s = append(s, "MinServiceFee: "+fmt.Sprintf("%#v", this.MinServiceFee)+",\n")
	s = append(s, "MaxServiceFee: "+fmt.Sprintf("%#v", this.MaxServiceFee)+",\n")
	s = append(s, "MinDeposit: "+fmt.Sprintf("%#v", this.MinDeposit)+",\n")
	s = append(s, "MinDelegationAmount: "+fmt.Sprintf("%#v", this.MinDelegationAmount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelegationContractList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&systemSmartContracts.DelegationContractList{")
	s = append(s, "Addresses: "+fmt.Sprintf("%#v", this.Addresses)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelegationConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&systemSmartContracts.DelegationConfig{")
	s = append(s, "MaxDelegationCap: "+fmt.Sprintf("%#v", this.MaxDelegationCap)+",\n")
	s = append(s, "InitialOwnerFunds: "+fmt.Sprintf("%#v", this.InitialOwnerFunds)+",\n")
	s = append(s, "AutomaticActivation: "+fmt.Sprintf("%#v", this.AutomaticActivation)+",\n")
	s = append(s, "ChangeableServiceFee: "+fmt.Sprintf("%#v", this.ChangeableServiceFee)+",\n")
	s = append(s, "CreatedNonce: "+fmt.Sprintf("%#v", this.CreatedNonce)+",\n")
	s = append(s, "UnBondPeriodInEpochs: "+fmt.Sprintf("%#v", this.UnBondPeriodInEpochs)+",\n")
	s = append(s, "CheckCapOnReDelegateRewards: "+fmt.Sprintf("%#v", this.CheckCapOnReDelegateRewards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelegationMetaData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&systemSmartContracts.DelegationMetaData{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Website: "+fmt.Sprintf("%#v", this.Website)+",\n")
	s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelegationContractStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&systemSmartContracts.DelegationContractStatus{")
	if this.StakedKeys != nil {
		s = append(s, "StakedKeys: "+fmt.Sprintf("%#v", this.StakedKeys)+",\n")
	}
	if this.NotStakedKeys != nil {
		s = append(s, "NotStakedKeys: "+fmt.Sprintf("%#v", this.NotStakedKeys)+",\n")
	}
	if this.UnStakedKeys != nil {
		s = append(s, "UnStakedKeys: "+fmt.Sprintf("%#v", this.UnStakedKeys)+",\n")
	}
	s = append(s, "NumUsers: "+fmt.Sprintf("%#v", this.NumUsers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Fund) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&systemSmartContracts.Fund{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelegatorData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&systemSmartContracts.DelegatorData{")
	s = append(s, "ActiveFund: "+fmt.Sprintf("%#v", this.ActiveFund)+",\n")
	s = append(s, "UnStakedFunds: "+fmt.Sprintf("%#v", this.UnStakedFunds)+",\n")
	s = append(s, "RewardsCheckpoint: "+fmt.Sprintf("%#v", this.RewardsCheckpoint)+",\n")
	s = append(s, "UnClaimedRewards: "+fmt.Sprintf("%#v", this.UnClaimedRewards)+",\n")
	s = append(s, "TotalCumulatedRewards: "+fmt.Sprintf("%#v", this.TotalCumulatedRewards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalFundData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&systemSmartContracts.GlobalFundData{")
	s = append(s, "TotalActive: "+fmt.Sprintf("%#v", this.TotalActive)+",\n")
	s = append(s, "TotalUnStaked: "+fmt.Sprintf("%#v", this.TotalUnStaked)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodesData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&systemSmartContracts.NodesData{")
	s = append(s, "BLSKey: "+fmt.Sprintf("%#v", this.BLSKey)+",\n")
	s = append(s, "SignedMsg: "+fmt.Sprintf("%#v", this.SignedMsg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RewardComputationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&systemSmartContracts.RewardComputationData{")
	s = append(s, "RewardsToDistribute: "+fmt.Sprintf("%#v", this.RewardsToDistribute)+",\n")
	s = append(s, "TotalActive: "+fmt.Sprintf("%#v", this.TotalActive)+",\n")
	s = append(s, "ServiceFee: "+fmt.Sprintf("%#v", this.ServiceFee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDelegation(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DelegationManagement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.MinDelegationAmount)
		i -= size
		if _, err := __caster.MarshalTo(m.MinDelegationAmount, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.MinDeposit)
		i -= size
		if _, err := __caster.MarshalTo(m.MinDeposit, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaxServiceFee != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.MaxServiceFee))
		i--
		dAtA[i] = 0x20
	}
	if m.MinServiceFee != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.MinServiceFee))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LastAddress) > 0 {
		i -= len(m.LastAddress)
		copy(dAtA[i:], m.LastAddress)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.LastAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.NumOfContracts != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.NumOfContracts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationContractList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationContractList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationContractList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintDelegation(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegationConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckCapOnReDelegateRewards {
		i--
		if m.CheckCapOnReDelegateRewards {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.UnBondPeriodInEpochs != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.UnBondPeriodInEpochs))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedNonce != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.CreatedNonce))
		i--
		dAtA[i] = 0x28
	}
	if m.ChangeableServiceFee {
		i--
		if m.ChangeableServiceFee {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AutomaticActivation {
		i--
		if m.AutomaticActivation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.InitialOwnerFunds)
		i -= size
		if _, err := __caster.MarshalTo(m.InitialOwnerFunds, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.MaxDelegationCap)
		i -= size
		if _, err := __caster.MarshalTo(m.MaxDelegationCap, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DelegationMetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationMetaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationMetaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationContractStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationContractStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationContractStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumUsers != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.NumUsers))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UnStakedKeys) > 0 {
		for iNdEx := len(m.UnStakedKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnStakedKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NotStakedKeys) > 0 {
		for iNdEx := len(m.NotStakedKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NotStakedKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StakedKeys) > 0 {
		for iNdEx := len(m.StakedKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakedKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Fund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.Value)
		i -= size
		if _, err := __caster.MarshalTo(m.Value, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DelegatorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.TotalCumulatedRewards)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalCumulatedRewards, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.UnClaimedRewards)
		i -= size
		if _, err := __caster.MarshalTo(m.UnClaimedRewards, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.RewardsCheckpoint != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.RewardsCheckpoint))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UnStakedFunds) > 0 {
		for iNdEx := len(m.UnStakedFunds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UnStakedFunds[iNdEx])
			copy(dAtA[i:], m.UnStakedFunds[iNdEx])
			i = encodeVarintDelegation(dAtA, i, uint64(len(m.UnStakedFunds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ActiveFund) > 0 {
		i -= len(m.ActiveFund)
		copy(dAtA[i:], m.ActiveFund)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.ActiveFund)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalFundData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalFundData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalFundData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.TotalUnStaked)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalUnStaked, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.TotalActive)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalActive, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignedMsg) > 0 {
		i -= len(m.SignedMsg)
		copy(dAtA[i:], m.SignedMsg)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.SignedMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BLSKey) > 0 {
		i -= len(m.BLSKey)
		copy(dAtA[i:], m.BLSKey)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.BLSKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardComputationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardComputationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardComputationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceFee != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.ServiceFee))
		i--
		dAtA[i] = 0x18
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.TotalActive)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalActive, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.RewardsToDistribute)
		i -= size
		if _, err := __caster.MarshalTo(m.RewardsToDistribute, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDelegation(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegationManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumOfContracts != 0 {
		n += 1 + sovDelegation(uint64(m.NumOfContracts))
	}
	l = len(m.LastAddress)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.MinServiceFee != 0 {
		n += 1 + sovDelegation(uint64(m.MinServiceFee))
	}
	if m.MaxServiceFee != 0 {
		n += 1 + sovDelegation(uint64(m.MaxServiceFee))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.MinDeposit)
		n += 1 + l + sovDelegation(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.MinDelegationAmount)
		n += 1 + l + sovDelegation(uint64(l))
	}
	return n
}

func (m *DelegationContractList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, b := range m.Addresses {
			l = len(b)
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	return n
}

func (m *DelegationConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.MaxDelegationCap)
		n += 1 + l + sovDelegation(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.InitialOwnerFunds)
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.AutomaticActivation {
		n += 2
	}
	if m.ChangeableServiceFee {
		n += 2
	}
	if m.CreatedNonce != 0 {
		n += 1 + sovDelegation(uint64(m.CreatedNonce))
	}
	if m.UnBondPeriodInEpochs != 0 {
		n += 1 + sovDelegation(uint64(m.UnBondPeriodInEpochs))
	}
	if m.CheckCapOnReDelegateRewards {
		n += 2
	}
	return n
}

func (m *DelegationMetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	return n
}

func (m *DelegationContractStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakedKeys) > 0 {
		for _, e := range m.StakedKeys {
			l = e.Size()
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	if len(m.NotStakedKeys) > 0 {
		for _, e := range m.NotStakedKeys {
			l = e.Size()
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	if len(m.UnStakedKeys) > 0 {
		for _, e := range m.UnStakedKeys {
			l = e.Size()
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	if m.NumUsers != 0 {
		n += 1 + sovDelegation(uint64(m.NumUsers))
	}
	return n
}

func (m *Fund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.Value)
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovDelegation(uint64(m.Epoch))
	}
	if m.Type != 0 {
		n += 1 + sovDelegation(uint64(m.Type))
	}
	return n
}

func (m *DelegatorData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActiveFund)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if len(m.UnStakedFunds) > 0 {
		for _, b := range m.UnStakedFunds {
			l = len(b)
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	if m.RewardsCheckpoint != 0 {
		n += 1 + sovDelegation(uint64(m.RewardsCheckpoint))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.UnClaimedRewards)
		n += 1 + l + sovDelegation(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.TotalCumulatedRewards)
		n += 1 + l + sovDelegation(uint64(l))
	}
	return n
}

func (m *GlobalFundData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.TotalActive)
		n += 1 + l + sovDelegation(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.TotalUnStaked)
		n += 1 + l + sovDelegation(uint64(l))
	}
	return n
}

func (m *NodesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BLSKey)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.SignedMsg)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	return n
}

func (m *RewardComputationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.RewardsToDistribute)
		n += 1 + l + sovDelegation(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.TotalActive)
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.ServiceFee != 0 {
		n += 1 + sovDelegation(uint64(m.ServiceFee))
	}
	return n
}

func sovDelegation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegation(x uint64) (n int) {
	return sovDelegation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DelegationManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelegationManagement{`,
		`NumOfContracts:` + fmt.Sprintf("%v", this.NumOfContracts) + `,`,
		`LastAddress:` + fmt.Sprintf("%v", this.LastAddress) + `,`,
		`MinServiceFee:` + fmt.Sprintf("%v", this.MinServiceFee) + `,`,
		`MaxServiceFee:` + fmt.Sprintf("%v", this.MaxServiceFee) + `,`,
		`MinDeposit:` + fmt.Sprintf("%v", this.MinDeposit) + `,`,
		`MinDelegationAmount:` + fmt.Sprintf("%v", this.MinDelegationAmount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelegationContractList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelegationContractList{`,
		`Addresses:` + fmt.Sprintf("%v", this.Addresses) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelegationConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelegationConfig{`,
		`MaxDelegationCap:` + fmt.Sprintf("%v", this.MaxDelegationCap) + `,`,
		`InitialOwnerFunds:` + fmt.Sprintf("%v", this.InitialOwnerFunds) + `,`,
		`AutomaticActivation:` + fmt.Sprintf("%v", this.AutomaticActivation) + `,`,
		`ChangeableServiceFee:` + fmt.Sprintf("%v", this.ChangeableServiceFee) + `,`,
		`CreatedNonce:` + fmt.Sprintf("%v", this.CreatedNonce) + `,`,
		`UnBondPeriodInEpochs:` + fmt.Sprintf("%v", this.UnBondPeriodInEpochs) + `,`,
		`CheckCapOnReDelegateRewards:` + fmt.Sprintf("%v", this.CheckCapOnReDelegateRewards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelegationMetaData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelegationMetaData{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Website:` + fmt.Sprintf("%v", this.Website) + `,`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelegationContractStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStakedKeys := "[]*NodesData{"
	for _, f := range this.StakedKeys {
		repeatedStringForStakedKeys += strings.Replace(f.String(), "NodesData", "NodesData", 1) + ","
	}
	repeatedStringForStakedKeys += "}"
	repeatedStringForNotStakedKeys := "[]*NodesData{"
	for _, f := range this.NotStakedKeys {
		repeatedStringForNotStakedKeys += strings.Replace(f.String(), "NodesData", "NodesData", 1) + ","
	}
	repeatedStringForNotStakedKeys += "}"
	repeatedStringForUnStakedKeys := "[]*NodesData{"
	for _, f := range this.UnStakedKeys {
		repeatedStringForUnStakedKeys += strings.Replace(f.String(), "NodesData", "NodesData", 1) + ","
	}
	repeatedStringForUnStakedKeys += "}"
	s := strings.Join([]string{`&DelegationContractStatus{`,
		`StakedKeys:` + repeatedStringForStakedKeys + `,`,
		`NotStakedKeys:` + repeatedStringForNotStakedKeys + `,`,
		`UnStakedKeys:` + repeatedStringForUnStakedKeys + `,`,
		`NumUsers:` + fmt.Sprintf("%v", this.NumUsers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Fund) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Fund{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelegatorData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelegatorData{`,
		`ActiveFund:` + fmt.Sprintf("%v", this.ActiveFund) + `,`,
		`UnStakedFunds:` + fmt.Sprintf("%v", this.UnStakedFunds) + `,`,
		`RewardsCheckpoint:` + fmt.Sprintf("%v", this.RewardsCheckpoint) + `,`,
		`UnClaimedRewards:` + fmt.Sprintf("%v", this.UnClaimedRewards) + `,`,
		`TotalCumulatedRewards:` + fmt.Sprintf("%v", this.TotalCumulatedRewards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalFundData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalFundData{`,
		`TotalActive:` + fmt.Sprintf("%v", this.TotalActive) + `,`,
		`TotalUnStaked:` + fmt.Sprintf("%v", this.TotalUnStaked) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesData{`,
		`BLSKey:` + fmt.Sprintf("%v", this.BLSKey) + `,`,
		`SignedMsg:` + fmt.Sprintf("%v", this.SignedMsg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RewardComputationData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RewardComputationData{`,
		`RewardsToDistribute:` + fmt.Sprintf("%v", this.RewardsToDistribute) + `,`,
		`TotalActive:` + fmt.Sprintf("%v", this.TotalActive) + `,`,
		`ServiceFee:` + fmt.Sprintf("%v", this.ServiceFee) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDelegation(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DelegationManagement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationManagement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationManagement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfContracts", wireType)
			}
			m.NumOfContracts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfContracts |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastAddress = append(m.LastAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.LastAddress == nil {
				m.LastAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinServiceFee", wireType)
			}
			m.MinServiceFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinServiceFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxServiceFee", wireType)
			}
			m.MaxServiceFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxServiceFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MinDeposit = tmp
				}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDelegationAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MinDelegationAmount = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationContractList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationContractList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationContractList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, make([]byte, postIndex-iNdEx))
			copy(m.Addresses[len(m.Addresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelegationCap", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MaxDelegationCap = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialOwnerFunds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.InitialOwnerFunds = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticActivation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutomaticActivation = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeableServiceFee", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeableServiceFee = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedNonce", wireType)
			}
			m.CreatedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnBondPeriodInEpochs", wireType)
			}
			m.UnBondPeriodInEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnBondPeriodInEpochs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckCapOnReDelegateRewards", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckCapOnReDelegateRewards = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationMetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationMetaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationMetaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = append(m.Website[:0], dAtA[iNdEx:postIndex]...)
			if m.Website == nil {
				m.Website = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = append(m.Identifier[:0], dAtA[iNdEx:postIndex]...)
			if m.Identifier == nil {
				m.Identifier = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationContractStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationContractStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationContractStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakedKeys = append(m.StakedKeys, &NodesData{})
			if err := m.StakedKeys[len(m.StakedKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotStakedKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotStakedKeys = append(m.NotStakedKeys, &NodesData{})
			if err := m.NotStakedKeys[len(m.NotStakedKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnStakedKeys = append(m.UnStakedKeys, &NodesData{})
			if err := m.UnStakedKeys[len(m.UnStakedKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUsers", wireType)
			}
			m.NumUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumUsers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Value = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveFund", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveFund = append(m.ActiveFund[:0], dAtA[iNdEx:postIndex]...)
			if m.ActiveFund == nil {
				m.ActiveFund = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedFunds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnStakedFunds = append(m.UnStakedFunds, make([]byte, postIndex-iNdEx))
			copy(m.UnStakedFunds[len(m.UnStakedFunds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsCheckpoint", wireType)
			}
			m.RewardsCheckpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsCheckpoint |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnClaimedRewards", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.UnClaimedRewards = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCumulatedRewards", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalCumulatedRewards = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalFundData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalFundData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalFundData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalActive = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnStaked", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalUnStaked = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BLSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BLSKey = append(m.BLSKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BLSKey == nil {
				m.BLSKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedMsg = append(m.SignedMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.SignedMsg == nil {
				m.SignedMsg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardComputationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardComputationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardComputationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsToDistribute", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.RewardsToDistribute = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalActive = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFee", wireType)
			}
			m.ServiceFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegation = fmt.Errorf("proto: unexpected end of group")
)
