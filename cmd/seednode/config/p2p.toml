#P2P config file

#NodeConfig holds the P2P settings
[Node]
    #Port is the port that will be opened by the node on all interfaces so other peers can connect to it
    #Can use single values such as 0, 10230, 15670 or a range such as 5000-10000
    Port = "10000"

    #Seed represents the seed string generator for p2p identity (used during authentication and message passing).
    #An empty Seed value will mean that the identity will be generated randomly in a secure cryptographically manner.
    #The seed provided in this string can be of any length.
    #########################################################################################
    # WARNING! FOR SECURITY REASONS, ONE MIGHT USE A GENERATED STRING AS LONG AS POSSIBLE!  #
    # IT IS RECOMMENDED THAT THE SEED FIELD SHOULD REMAIN EMPTY (NO CHARACTERS BETWEEN "")  #
    # THIS SEED WILL BE USED FOR P2P'S PRIVATE KEY GENERATION. SAME SEED USED WILL LEAD TO  #
    # THE GENERATION OF THE SAME P2P IDENTITY.                                              #
    # SPECIFY A SEED VALUE IF YOU KNOW WHAT YOU ARE DOING!                                  #
    #########################################################################################
    #The seed provided will be hashed using SHA256 and the resulting 32 byte length byte array will be used in
    #p2p identity generation
    Seed = "seed"

    # The maximum peers that will connect to this node
    MaximumExpectedPeerCount = 1024

    #ThresholdMinConnectedPeers can be any value when used in conjunction with a seednode because the seednode does
    #not have a sync and consensus mechanism. Default is 0.
    ThresholdMinConnectedPeers = 0

# P2P peer discovery section

#The following sections correspond to the way new peers will be discovered
#If all config types are disabled then the peer will run in single mode (will not try to find other peers)
#If more than one peer discovery mechanism is enabled, the application will output an error and will not start

[KadDhtPeerDiscovery]
    #Enabled: true/false to enable/disable this discovery mechanism
    Enabled = true

    #Type represents the kad-dht glue code implementation.
    #"legacy" will define the first implementation.
    #"optimized" represents the new variant able to connect to multiple seeders at once. This implementation also has
    #a built-in timer that will try to automatically reconnect to the seeders (in case the seeders recover after a
    #premature shutdown)
    Type = "optimized"

    #RefreshIntervalInSec represents the time in seconds between querying for new peers
    RefreshIntervalInSec = 10

    #ProtocolID represents the protocol that this node will advertize to other peers
    #To connect to other nodes, those nodes should have the same ProtocolID string
    ProtocolID = "/erd/kad/1.0.0"

    #InitialPeerList represents the list of strings of some known nodes that will bootstrap this node
    #The address will be in a self-describing addressing format.
    #More can be found here: https://github.com/libp2p/specs/blob/master/3-requirements.md#34-transport-agnostic
    #Example:
    #   /ip6/fe80::8823:6dff:fee7:f172/tcp/4001/p2p/QmYJyUMAcXEw1b5bFfbBbzYu5wyyjLMRHXGUkCXpag74Fu
    #   /ip4/162.246.145.218/udp/4001/utp/ipfs/QmYJyUMAcXEw1b5bFfbBbzYu5wyyjLMRHXGUkCXpag74Fu
    #
    #If the initial peers list is left empty, the node will not try to connect to other peers during initial bootstrap
    #phase but will accept connections and will do the network discovery if another peer connects to it
   InitialPeerList = []

   #kademlia's routing table bucket size
   BucketSize = 100

   #RoutingTableRefreshIntervalInSec defines how many seconds should pass between 2 kad routing table auto refresh calls
   RoutingTableRefreshIntervalInSec = 300

[Sharding]
    # The targeted number of peer connections
    TargetPeerCount = 0
    MaxIntraShardValidators = 0
    MaxCrossShardValidators = 0
    MaxIntraShardObservers = 0
    MaxCrossShardObservers = 0
    MaxSeeders = 0

    #available options:
    #  `ListsSharder` will split the peers based on the shard membership (intra, cross or unknown)
    #  `OneListSharder` will do just the connection triming (upto TargetPeerCount value) not taking into account
    #              the shard membership of the connected peers
    #  `NilListSharder` will disable conection trimming (sharder is off)
    Type = "NilListSharder"

    [AdditionalConnections]
        #this value will be added to the target peer count automatically when the node will be in full archive mode
        MaxFullHistoryObservers = 0
