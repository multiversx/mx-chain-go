// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nodesCoordinatorRegistryWithAuction.proto

package nodesCoordinator

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SerializableValidator struct {
	PubKey  []byte `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"pubKey"`
	Chances uint32 `protobuf:"varint,2,opt,name=Chances,proto3" json:"chances"`
	Index   uint32 `protobuf:"varint,3,opt,name=Index,proto3" json:"index"`
}

func (m *SerializableValidator) Reset()      { *m = SerializableValidator{} }
func (*SerializableValidator) ProtoMessage() {}
func (*SerializableValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04461c784f438d5, []int{0}
}
func (m *SerializableValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializableValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializableValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializableValidator.Merge(m, src)
}
func (m *SerializableValidator) XXX_Size() int {
	return m.Size()
}
func (m *SerializableValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializableValidator.DiscardUnknown(m)
}

var xxx_messageInfo_SerializableValidator proto.InternalMessageInfo

func (m *SerializableValidator) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *SerializableValidator) GetChances() uint32 {
	if m != nil {
		return m.Chances
	}
	return 0
}

func (m *SerializableValidator) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Validators struct {
	Data []*SerializableValidator `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Validators) Reset()      { *m = Validators{} }
func (*Validators) ProtoMessage() {}
func (*Validators) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04461c784f438d5, []int{1}
}
func (m *Validators) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Validators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validators.Merge(m, src)
}
func (m *Validators) XXX_Size() int {
	return m.Size()
}
func (m *Validators) XXX_DiscardUnknown() {
	xxx_messageInfo_Validators.DiscardUnknown(m)
}

var xxx_messageInfo_Validators proto.InternalMessageInfo

func (m *Validators) GetData() []*SerializableValidator {
	if m != nil {
		return m.Data
	}
	return nil
}

type EpochValidatorsWithAuction struct {
	Eligible       map[string]Validators `protobuf:"bytes,1,rep,name=Eligible,proto3" json:"Eligible" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Waiting        map[string]Validators `protobuf:"bytes,2,rep,name=Waiting,proto3" json:"Waiting" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Leaving        map[string]Validators `protobuf:"bytes,3,rep,name=Leaving,proto3" json:"Leaving" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ShuffledOut    map[string]Validators `protobuf:"bytes,4,rep,name=ShuffledOut,proto3" json:"ShuffledOut" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LowWaitingList bool                  `protobuf:"varint,5,opt,name=LowWaitingList,proto3" json:"LowWaitingList,omitempty"`
}

func (m *EpochValidatorsWithAuction) Reset()      { *m = EpochValidatorsWithAuction{} }
func (*EpochValidatorsWithAuction) ProtoMessage() {}
func (*EpochValidatorsWithAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04461c784f438d5, []int{2}
}
func (m *EpochValidatorsWithAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochValidatorsWithAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EpochValidatorsWithAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochValidatorsWithAuction.Merge(m, src)
}
func (m *EpochValidatorsWithAuction) XXX_Size() int {
	return m.Size()
}
func (m *EpochValidatorsWithAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochValidatorsWithAuction.DiscardUnknown(m)
}

var xxx_messageInfo_EpochValidatorsWithAuction proto.InternalMessageInfo

func (m *EpochValidatorsWithAuction) GetEligible() map[string]Validators {
	if m != nil {
		return m.Eligible
	}
	return nil
}

func (m *EpochValidatorsWithAuction) GetWaiting() map[string]Validators {
	if m != nil {
		return m.Waiting
	}
	return nil
}

func (m *EpochValidatorsWithAuction) GetLeaving() map[string]Validators {
	if m != nil {
		return m.Leaving
	}
	return nil
}

func (m *EpochValidatorsWithAuction) GetShuffledOut() map[string]Validators {
	if m != nil {
		return m.ShuffledOut
	}
	return nil
}

func (m *EpochValidatorsWithAuction) GetLowWaitingList() bool {
	if m != nil {
		return m.LowWaitingList
	}
	return false
}

type NodesCoordinatorRegistryWithAuction struct {
	CurrentEpoch            uint32                                 `protobuf:"varint,1,opt,name=CurrentEpoch,proto3" json:"CurrentEpoch,omitempty"`
	EpochsConfigWithAuction map[string]*EpochValidatorsWithAuction `protobuf:"bytes,2,rep,name=EpochsConfigWithAuction,proto3" json:"EpochsConfigWithAuction,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NodesCoordinatorRegistryWithAuction) Reset()      { *m = NodesCoordinatorRegistryWithAuction{} }
func (*NodesCoordinatorRegistryWithAuction) ProtoMessage() {}
func (*NodesCoordinatorRegistryWithAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04461c784f438d5, []int{3}
}
func (m *NodesCoordinatorRegistryWithAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesCoordinatorRegistryWithAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesCoordinatorRegistryWithAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesCoordinatorRegistryWithAuction.Merge(m, src)
}
func (m *NodesCoordinatorRegistryWithAuction) XXX_Size() int {
	return m.Size()
}
func (m *NodesCoordinatorRegistryWithAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesCoordinatorRegistryWithAuction.DiscardUnknown(m)
}

var xxx_messageInfo_NodesCoordinatorRegistryWithAuction proto.InternalMessageInfo

func (m *NodesCoordinatorRegistryWithAuction) GetCurrentEpoch() uint32 {
	if m != nil {
		return m.CurrentEpoch
	}
	return 0
}

func (m *NodesCoordinatorRegistryWithAuction) GetEpochsConfigWithAuction() map[string]*EpochValidatorsWithAuction {
	if m != nil {
		return m.EpochsConfigWithAuction
	}
	return nil
}

func init() {
	proto.RegisterType((*SerializableValidator)(nil), "proto.SerializableValidator")
	proto.RegisterType((*Validators)(nil), "proto.Validators")
	proto.RegisterType((*EpochValidatorsWithAuction)(nil), "proto.EpochValidatorsWithAuction")
	proto.RegisterMapType((map[string]Validators)(nil), "proto.EpochValidatorsWithAuction.EligibleEntry")
	proto.RegisterMapType((map[string]Validators)(nil), "proto.EpochValidatorsWithAuction.LeavingEntry")
	proto.RegisterMapType((map[string]Validators)(nil), "proto.EpochValidatorsWithAuction.ShuffledOutEntry")
	proto.RegisterMapType((map[string]Validators)(nil), "proto.EpochValidatorsWithAuction.WaitingEntry")
	proto.RegisterType((*NodesCoordinatorRegistryWithAuction)(nil), "proto.NodesCoordinatorRegistryWithAuction")
	proto.RegisterMapType((map[string]*EpochValidatorsWithAuction)(nil), "proto.NodesCoordinatorRegistryWithAuction.EpochsConfigWithAuctionEntry")
}

func init() {
	proto.RegisterFile("nodesCoordinatorRegistryWithAuction.proto", fileDescriptor_f04461c784f438d5)
}

var fileDescriptor_f04461c784f438d5 = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x8e, 0xd2, 0x40,
	0x18, 0xc7, 0x3b, 0x40, 0x61, 0x77, 0x00, 0x83, 0x93, 0x18, 0x1b, 0xb2, 0x19, 0xb0, 0x46, 0xc5,
	0x83, 0xc5, 0xe0, 0x41, 0xe3, 0xc1, 0x44, 0x90, 0x18, 0x15, 0xd1, 0xed, 0x26, 0x6e, 0xb2, 0xb7,
	0x16, 0x86, 0x32, 0xb1, 0xdb, 0x21, 0xed, 0x74, 0x15, 0x4f, 0x1a, 0x5f, 0xc0, 0xc7, 0xf0, 0x21,
	0x7c, 0x80, 0x3d, 0x72, 0xf0, 0xc0, 0x89, 0x48, 0xb9, 0x18, 0x4e, 0xfb, 0x08, 0x86, 0xa1, 0xec,
	0x16, 0xb2, 0xc8, 0x26, 0xbb, 0x27, 0x66, 0xfe, 0x33, 0xff, 0xdf, 0xf7, 0xf1, 0xef, 0x97, 0x81,
	0xf7, 0x1d, 0xd6, 0x26, 0x5e, 0x8d, 0x31, 0xb7, 0x4d, 0x1d, 0x83, 0x33, 0x57, 0x27, 0x16, 0xf5,
	0xb8, 0xdb, 0xdf, 0xa7, 0xbc, 0xfb, 0xdc, 0x6f, 0x71, 0xca, 0x1c, 0xad, 0xe7, 0x32, 0xce, 0x90,
	0x2c, 0x7e, 0xf2, 0x0f, 0x2c, 0xca, 0xbb, 0xbe, 0xa9, 0xb5, 0xd8, 0x61, 0xd9, 0x62, 0x16, 0x2b,
	0x0b, 0xd9, 0xf4, 0x3b, 0x62, 0x27, 0x36, 0x62, 0x35, 0x77, 0xa9, 0xdf, 0x01, 0xbc, 0xb1, 0x47,
	0x5c, 0x6a, 0xd8, 0xf4, 0x8b, 0x61, 0xda, 0xe4, 0x83, 0x61, 0xd3, 0xf6, 0xac, 0x10, 0x52, 0x61,
	0xf2, 0xbd, 0x6f, 0xbe, 0x21, 0x7d, 0x05, 0x14, 0x41, 0x29, 0x53, 0x85, 0xd3, 0x51, 0x21, 0xd9,
	0x13, 0x8a, 0x1e, 0x9e, 0xa0, 0x3b, 0x30, 0x55, 0xeb, 0x1a, 0x4e, 0x8b, 0x78, 0x4a, 0xac, 0x08,
	0x4a, 0xd9, 0x6a, 0x7a, 0x3a, 0x2a, 0xa4, 0x5a, 0x73, 0x49, 0x5f, 0x9c, 0xa1, 0x02, 0x94, 0x5f,
	0x39, 0x6d, 0xf2, 0x59, 0x89, 0x8b, 0x4b, 0xdb, 0xd3, 0x51, 0x41, 0xa6, 0x33, 0x41, 0x9f, 0xeb,
	0xea, 0x33, 0x08, 0x4f, 0x0b, 0x7b, 0xe8, 0x21, 0x4c, 0xbc, 0x30, 0xb8, 0xa1, 0x80, 0x62, 0xbc,
	0x94, 0xae, 0xec, 0xcc, 0x3b, 0xd5, 0xce, 0xed, 0x52, 0x17, 0x37, 0xd5, 0xdf, 0x32, 0xcc, 0xd7,
	0x7b, 0xac, 0xd5, 0x3d, 0xa3, 0x44, 0x02, 0x42, 0xbb, 0x70, 0xab, 0x6e, 0x53, 0x8b, 0x9a, 0x36,
	0x09, 0xa1, 0xe5, 0x10, 0xba, 0xde, 0xa4, 0x2d, 0x1c, 0x75, 0x87, 0xbb, 0xfd, 0x6a, 0xe2, 0x78,
	0x54, 0x90, 0xf4, 0x53, 0x0c, 0x6a, 0xc2, 0xd4, 0xbe, 0x41, 0x39, 0x75, 0x2c, 0x25, 0x26, 0x88,
	0xda, 0x66, 0x62, 0x68, 0x88, 0x02, 0x17, 0x90, 0x19, 0xaf, 0x41, 0x8c, 0xa3, 0x19, 0x2f, 0x7e,
	0x51, 0x5e, 0x68, 0x58, 0xe2, 0x85, 0x1a, 0x3a, 0x80, 0xe9, 0xbd, 0xae, 0xdf, 0xe9, 0xd8, 0xa4,
	0xfd, 0xce, 0xe7, 0x4a, 0x42, 0x30, 0x2b, 0x9b, 0x99, 0x11, 0x53, 0x94, 0x1b, 0x85, 0xa1, 0xbb,
	0xf0, 0x5a, 0x83, 0x7d, 0x0a, 0x3b, 0x6f, 0x50, 0x8f, 0x2b, 0x72, 0x11, 0x94, 0xb6, 0xf4, 0x15,
	0x35, 0xdf, 0x84, 0xd9, 0xa5, 0x10, 0x51, 0x0e, 0xc6, 0x3f, 0x86, 0xf3, 0xb4, 0xad, 0xcf, 0x96,
	0xe8, 0x1e, 0x94, 0x8f, 0x0c, 0xdb, 0x27, 0x62, 0x7c, 0xd2, 0x95, 0xeb, 0x61, 0x83, 0x67, 0xbd,
	0xe9, 0xf3, 0xf3, 0xa7, 0xb1, 0x27, 0x20, 0xff, 0x16, 0x66, 0xa2, 0x11, 0x5e, 0x01, 0x2e, 0x9a,
	0xe0, 0x65, 0x71, 0xbb, 0x30, 0xb7, 0x1a, 0xde, 0x25, 0x91, 0xea, 0xaf, 0x18, 0xbc, 0xdd, 0xdc,
	0xfc, 0x00, 0x20, 0x15, 0x66, 0x6a, 0xbe, 0xeb, 0x12, 0x87, 0x8b, 0x2f, 0x2b, 0xea, 0x65, 0xf5,
	0x25, 0x0d, 0x7d, 0x03, 0xf0, 0xa6, 0x58, 0x79, 0x35, 0xe6, 0x74, 0xa8, 0x15, 0xf1, 0x87, 0x13,
	0xfc, 0x32, 0xec, 0xe5, 0x02, 0x15, 0xb5, 0x35, 0x24, 0xf1, 0xaf, 0xf5, 0x75, 0x75, 0xf2, 0x87,
	0x70, 0xe7, 0x7f, 0xc6, 0x73, 0xe2, 0x7a, 0xbc, 0x1c, 0xd7, 0xad, 0x8d, 0x03, 0x1c, 0x89, 0xaf,
	0xfa, 0x7a, 0x30, 0xc6, 0xd2, 0x70, 0x8c, 0xa5, 0x93, 0x31, 0x06, 0x5f, 0x03, 0x0c, 0x7e, 0x06,
	0x18, 0x1c, 0x07, 0x18, 0x0c, 0x02, 0x0c, 0x86, 0x01, 0x06, 0x7f, 0x02, 0x0c, 0xfe, 0x06, 0x58,
	0x3a, 0x09, 0x30, 0xf8, 0x31, 0xc1, 0xd2, 0x60, 0x82, 0xa5, 0xe1, 0x04, 0x4b, 0x07, 0xb9, 0xd5,
	0x67, 0xd7, 0x4c, 0x8a, 0xc2, 0x8f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x65, 0xa3, 0xf9, 0xfb,
	0x91, 0x05, 0x00, 0x00,
}

func (this *SerializableValidator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializableValidator)
	if !ok {
		that2, ok := that.(SerializableValidator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PubKey, that1.PubKey) {
		return false
	}
	if this.Chances != that1.Chances {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	return true
}
func (this *Validators) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Validators)
	if !ok {
		that2, ok := that.(Validators)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *EpochValidatorsWithAuction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EpochValidatorsWithAuction)
	if !ok {
		that2, ok := that.(EpochValidatorsWithAuction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Eligible) != len(that1.Eligible) {
		return false
	}
	for i := range this.Eligible {
		a := this.Eligible[i]
		b := that1.Eligible[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.Waiting) != len(that1.Waiting) {
		return false
	}
	for i := range this.Waiting {
		a := this.Waiting[i]
		b := that1.Waiting[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.Leaving) != len(that1.Leaving) {
		return false
	}
	for i := range this.Leaving {
		a := this.Leaving[i]
		b := that1.Leaving[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.ShuffledOut) != len(that1.ShuffledOut) {
		return false
	}
	for i := range this.ShuffledOut {
		a := this.ShuffledOut[i]
		b := that1.ShuffledOut[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if this.LowWaitingList != that1.LowWaitingList {
		return false
	}
	return true
}
func (this *NodesCoordinatorRegistryWithAuction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodesCoordinatorRegistryWithAuction)
	if !ok {
		that2, ok := that.(NodesCoordinatorRegistryWithAuction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CurrentEpoch != that1.CurrentEpoch {
		return false
	}
	if len(this.EpochsConfigWithAuction) != len(that1.EpochsConfigWithAuction) {
		return false
	}
	for i := range this.EpochsConfigWithAuction {
		if !this.EpochsConfigWithAuction[i].Equal(that1.EpochsConfigWithAuction[i]) {
			return false
		}
	}
	return true
}
func (this *SerializableValidator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nodesCoordinator.SerializableValidator{")
	s = append(s, "PubKey: "+fmt.Sprintf("%#v", this.PubKey)+",\n")
	s = append(s, "Chances: "+fmt.Sprintf("%#v", this.Chances)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Validators) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&nodesCoordinator.Validators{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EpochValidatorsWithAuction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&nodesCoordinator.EpochValidatorsWithAuction{")
	keysForEligible := make([]string, 0, len(this.Eligible))
	for k, _ := range this.Eligible {
		keysForEligible = append(keysForEligible, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEligible)
	mapStringForEligible := "map[string]Validators{"
	for _, k := range keysForEligible {
		mapStringForEligible += fmt.Sprintf("%#v: %#v,", k, this.Eligible[k])
	}
	mapStringForEligible += "}"
	if this.Eligible != nil {
		s = append(s, "Eligible: "+mapStringForEligible+",\n")
	}
	keysForWaiting := make([]string, 0, len(this.Waiting))
	for k, _ := range this.Waiting {
		keysForWaiting = append(keysForWaiting, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForWaiting)
	mapStringForWaiting := "map[string]Validators{"
	for _, k := range keysForWaiting {
		mapStringForWaiting += fmt.Sprintf("%#v: %#v,", k, this.Waiting[k])
	}
	mapStringForWaiting += "}"
	if this.Waiting != nil {
		s = append(s, "Waiting: "+mapStringForWaiting+",\n")
	}
	keysForLeaving := make([]string, 0, len(this.Leaving))
	for k, _ := range this.Leaving {
		keysForLeaving = append(keysForLeaving, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLeaving)
	mapStringForLeaving := "map[string]Validators{"
	for _, k := range keysForLeaving {
		mapStringForLeaving += fmt.Sprintf("%#v: %#v,", k, this.Leaving[k])
	}
	mapStringForLeaving += "}"
	if this.Leaving != nil {
		s = append(s, "Leaving: "+mapStringForLeaving+",\n")
	}
	keysForShuffledOut := make([]string, 0, len(this.ShuffledOut))
	for k, _ := range this.ShuffledOut {
		keysForShuffledOut = append(keysForShuffledOut, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForShuffledOut)
	mapStringForShuffledOut := "map[string]Validators{"
	for _, k := range keysForShuffledOut {
		mapStringForShuffledOut += fmt.Sprintf("%#v: %#v,", k, this.ShuffledOut[k])
	}
	mapStringForShuffledOut += "}"
	if this.ShuffledOut != nil {
		s = append(s, "ShuffledOut: "+mapStringForShuffledOut+",\n")
	}
	s = append(s, "LowWaitingList: "+fmt.Sprintf("%#v", this.LowWaitingList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodesCoordinatorRegistryWithAuction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nodesCoordinator.NodesCoordinatorRegistryWithAuction{")
	s = append(s, "CurrentEpoch: "+fmt.Sprintf("%#v", this.CurrentEpoch)+",\n")
	keysForEpochsConfigWithAuction := make([]string, 0, len(this.EpochsConfigWithAuction))
	for k, _ := range this.EpochsConfigWithAuction {
		keysForEpochsConfigWithAuction = append(keysForEpochsConfigWithAuction, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEpochsConfigWithAuction)
	mapStringForEpochsConfigWithAuction := "map[string]*EpochValidatorsWithAuction{"
	for _, k := range keysForEpochsConfigWithAuction {
		mapStringForEpochsConfigWithAuction += fmt.Sprintf("%#v: %#v,", k, this.EpochsConfigWithAuction[k])
	}
	mapStringForEpochsConfigWithAuction += "}"
	if this.EpochsConfigWithAuction != nil {
		s = append(s, "EpochsConfigWithAuction: "+mapStringForEpochsConfigWithAuction+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNodesCoordinatorRegistryWithAuction(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SerializableValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializableValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializableValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.Chances != 0 {
		i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(m.Chances))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validators) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validators) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EpochValidatorsWithAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochValidatorsWithAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochValidatorsWithAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LowWaitingList {
		i--
		if m.LowWaitingList {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ShuffledOut) > 0 {
		keysForShuffledOut := make([]string, 0, len(m.ShuffledOut))
		for k := range m.ShuffledOut {
			keysForShuffledOut = append(keysForShuffledOut, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForShuffledOut)
		for iNdEx := len(keysForShuffledOut) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ShuffledOut[string(keysForShuffledOut[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForShuffledOut[iNdEx])
			copy(dAtA[i:], keysForShuffledOut[iNdEx])
			i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(len(keysForShuffledOut[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Leaving) > 0 {
		keysForLeaving := make([]string, 0, len(m.Leaving))
		for k := range m.Leaving {
			keysForLeaving = append(keysForLeaving, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLeaving)
		for iNdEx := len(keysForLeaving) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Leaving[string(keysForLeaving[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForLeaving[iNdEx])
			copy(dAtA[i:], keysForLeaving[iNdEx])
			i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(len(keysForLeaving[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Waiting) > 0 {
		keysForWaiting := make([]string, 0, len(m.Waiting))
		for k := range m.Waiting {
			keysForWaiting = append(keysForWaiting, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForWaiting)
		for iNdEx := len(keysForWaiting) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Waiting[string(keysForWaiting[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForWaiting[iNdEx])
			copy(dAtA[i:], keysForWaiting[iNdEx])
			i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(len(keysForWaiting[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Eligible) > 0 {
		keysForEligible := make([]string, 0, len(m.Eligible))
		for k := range m.Eligible {
			keysForEligible = append(keysForEligible, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForEligible)
		for iNdEx := len(keysForEligible) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Eligible[string(keysForEligible[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForEligible[iNdEx])
			copy(dAtA[i:], keysForEligible[iNdEx])
			i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(len(keysForEligible[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodesCoordinatorRegistryWithAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesCoordinatorRegistryWithAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesCoordinatorRegistryWithAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochsConfigWithAuction) > 0 {
		keysForEpochsConfigWithAuction := make([]string, 0, len(m.EpochsConfigWithAuction))
		for k := range m.EpochsConfigWithAuction {
			keysForEpochsConfigWithAuction = append(keysForEpochsConfigWithAuction, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForEpochsConfigWithAuction)
		for iNdEx := len(keysForEpochsConfigWithAuction) - 1; iNdEx >= 0; iNdEx-- {
			v := m.EpochsConfigWithAuction[string(keysForEpochsConfigWithAuction[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForEpochsConfigWithAuction[iNdEx])
			copy(dAtA[i:], keysForEpochsConfigWithAuction[iNdEx])
			i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(len(keysForEpochsConfigWithAuction[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CurrentEpoch != 0 {
		i = encodeVarintNodesCoordinatorRegistryWithAuction(dAtA, i, uint64(m.CurrentEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNodesCoordinatorRegistryWithAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovNodesCoordinatorRegistryWithAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SerializableValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovNodesCoordinatorRegistryWithAuction(uint64(l))
	}
	if m.Chances != 0 {
		n += 1 + sovNodesCoordinatorRegistryWithAuction(uint64(m.Chances))
	}
	if m.Index != 0 {
		n += 1 + sovNodesCoordinatorRegistryWithAuction(uint64(m.Index))
	}
	return n
}

func (m *Validators) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovNodesCoordinatorRegistryWithAuction(uint64(l))
		}
	}
	return n
}

func (m *EpochValidatorsWithAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Eligible) > 0 {
		for k, v := range m.Eligible {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovNodesCoordinatorRegistryWithAuction(uint64(len(k))) + 1 + l + sovNodesCoordinatorRegistryWithAuction(uint64(l))
			n += mapEntrySize + 1 + sovNodesCoordinatorRegistryWithAuction(uint64(mapEntrySize))
		}
	}
	if len(m.Waiting) > 0 {
		for k, v := range m.Waiting {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovNodesCoordinatorRegistryWithAuction(uint64(len(k))) + 1 + l + sovNodesCoordinatorRegistryWithAuction(uint64(l))
			n += mapEntrySize + 1 + sovNodesCoordinatorRegistryWithAuction(uint64(mapEntrySize))
		}
	}
	if len(m.Leaving) > 0 {
		for k, v := range m.Leaving {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovNodesCoordinatorRegistryWithAuction(uint64(len(k))) + 1 + l + sovNodesCoordinatorRegistryWithAuction(uint64(l))
			n += mapEntrySize + 1 + sovNodesCoordinatorRegistryWithAuction(uint64(mapEntrySize))
		}
	}
	if len(m.ShuffledOut) > 0 {
		for k, v := range m.ShuffledOut {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovNodesCoordinatorRegistryWithAuction(uint64(len(k))) + 1 + l + sovNodesCoordinatorRegistryWithAuction(uint64(l))
			n += mapEntrySize + 1 + sovNodesCoordinatorRegistryWithAuction(uint64(mapEntrySize))
		}
	}
	if m.LowWaitingList {
		n += 2
	}
	return n
}

func (m *NodesCoordinatorRegistryWithAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentEpoch != 0 {
		n += 1 + sovNodesCoordinatorRegistryWithAuction(uint64(m.CurrentEpoch))
	}
	if len(m.EpochsConfigWithAuction) > 0 {
		for k, v := range m.EpochsConfigWithAuction {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovNodesCoordinatorRegistryWithAuction(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovNodesCoordinatorRegistryWithAuction(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovNodesCoordinatorRegistryWithAuction(uint64(mapEntrySize))
		}
	}
	return n
}

func sovNodesCoordinatorRegistryWithAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNodesCoordinatorRegistryWithAuction(x uint64) (n int) {
	return sovNodesCoordinatorRegistryWithAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SerializableValidator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializableValidator{`,
		`PubKey:` + fmt.Sprintf("%v", this.PubKey) + `,`,
		`Chances:` + fmt.Sprintf("%v", this.Chances) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Validators) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*SerializableValidator{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "SerializableValidator", "SerializableValidator", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&Validators{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *EpochValidatorsWithAuction) String() string {
	if this == nil {
		return "nil"
	}
	keysForEligible := make([]string, 0, len(this.Eligible))
	for k, _ := range this.Eligible {
		keysForEligible = append(keysForEligible, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEligible)
	mapStringForEligible := "map[string]Validators{"
	for _, k := range keysForEligible {
		mapStringForEligible += fmt.Sprintf("%v: %v,", k, this.Eligible[k])
	}
	mapStringForEligible += "}"
	keysForWaiting := make([]string, 0, len(this.Waiting))
	for k, _ := range this.Waiting {
		keysForWaiting = append(keysForWaiting, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForWaiting)
	mapStringForWaiting := "map[string]Validators{"
	for _, k := range keysForWaiting {
		mapStringForWaiting += fmt.Sprintf("%v: %v,", k, this.Waiting[k])
	}
	mapStringForWaiting += "}"
	keysForLeaving := make([]string, 0, len(this.Leaving))
	for k, _ := range this.Leaving {
		keysForLeaving = append(keysForLeaving, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLeaving)
	mapStringForLeaving := "map[string]Validators{"
	for _, k := range keysForLeaving {
		mapStringForLeaving += fmt.Sprintf("%v: %v,", k, this.Leaving[k])
	}
	mapStringForLeaving += "}"
	keysForShuffledOut := make([]string, 0, len(this.ShuffledOut))
	for k, _ := range this.ShuffledOut {
		keysForShuffledOut = append(keysForShuffledOut, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForShuffledOut)
	mapStringForShuffledOut := "map[string]Validators{"
	for _, k := range keysForShuffledOut {
		mapStringForShuffledOut += fmt.Sprintf("%v: %v,", k, this.ShuffledOut[k])
	}
	mapStringForShuffledOut += "}"
	s := strings.Join([]string{`&EpochValidatorsWithAuction{`,
		`Eligible:` + mapStringForEligible + `,`,
		`Waiting:` + mapStringForWaiting + `,`,
		`Leaving:` + mapStringForLeaving + `,`,
		`ShuffledOut:` + mapStringForShuffledOut + `,`,
		`LowWaitingList:` + fmt.Sprintf("%v", this.LowWaitingList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesCoordinatorRegistryWithAuction) String() string {
	if this == nil {
		return "nil"
	}
	keysForEpochsConfigWithAuction := make([]string, 0, len(this.EpochsConfigWithAuction))
	for k, _ := range this.EpochsConfigWithAuction {
		keysForEpochsConfigWithAuction = append(keysForEpochsConfigWithAuction, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEpochsConfigWithAuction)
	mapStringForEpochsConfigWithAuction := "map[string]*EpochValidatorsWithAuction{"
	for _, k := range keysForEpochsConfigWithAuction {
		mapStringForEpochsConfigWithAuction += fmt.Sprintf("%v: %v,", k, this.EpochsConfigWithAuction[k])
	}
	mapStringForEpochsConfigWithAuction += "}"
	s := strings.Join([]string{`&NodesCoordinatorRegistryWithAuction{`,
		`CurrentEpoch:` + fmt.Sprintf("%v", this.CurrentEpoch) + `,`,
		`EpochsConfigWithAuction:` + mapStringForEpochsConfigWithAuction + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNodesCoordinatorRegistryWithAuction(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SerializableValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodesCoordinatorRegistryWithAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializableValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializableValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chances", wireType)
			}
			m.Chances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chances |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNodesCoordinatorRegistryWithAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodesCoordinatorRegistryWithAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &SerializableValidator{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodesCoordinatorRegistryWithAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochValidatorsWithAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodesCoordinatorRegistryWithAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochValidatorsWithAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochValidatorsWithAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eligible", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Eligible == nil {
				m.Eligible = make(map[string]Validators)
			}
			var mapkey string
			mapvalue := &Validators{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNodesCoordinatorRegistryWithAuction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodesCoordinatorRegistryWithAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodesCoordinatorRegistryWithAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Validators{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNodesCoordinatorRegistryWithAuction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Eligible[mapkey] = *mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waiting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Waiting == nil {
				m.Waiting = make(map[string]Validators)
			}
			var mapkey string
			mapvalue := &Validators{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNodesCoordinatorRegistryWithAuction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodesCoordinatorRegistryWithAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodesCoordinatorRegistryWithAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Validators{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNodesCoordinatorRegistryWithAuction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Waiting[mapkey] = *mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaving", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leaving == nil {
				m.Leaving = make(map[string]Validators)
			}
			var mapkey string
			mapvalue := &Validators{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNodesCoordinatorRegistryWithAuction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodesCoordinatorRegistryWithAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodesCoordinatorRegistryWithAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Validators{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNodesCoordinatorRegistryWithAuction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Leaving[mapkey] = *mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShuffledOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShuffledOut == nil {
				m.ShuffledOut = make(map[string]Validators)
			}
			var mapkey string
			mapvalue := &Validators{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNodesCoordinatorRegistryWithAuction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodesCoordinatorRegistryWithAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodesCoordinatorRegistryWithAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Validators{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNodesCoordinatorRegistryWithAuction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ShuffledOut[mapkey] = *mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowWaitingList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LowWaitingList = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNodesCoordinatorRegistryWithAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesCoordinatorRegistryWithAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodesCoordinatorRegistryWithAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesCoordinatorRegistryWithAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesCoordinatorRegistryWithAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			m.CurrentEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochsConfigWithAuction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochsConfigWithAuction == nil {
				m.EpochsConfigWithAuction = make(map[string]*EpochValidatorsWithAuction)
			}
			var mapkey string
			var mapvalue *EpochValidatorsWithAuction
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNodesCoordinatorRegistryWithAuction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodesCoordinatorRegistryWithAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodesCoordinatorRegistryWithAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EpochValidatorsWithAuction{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNodesCoordinatorRegistryWithAuction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EpochsConfigWithAuction[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodesCoordinatorRegistryWithAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodesCoordinatorRegistryWithAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodesCoordinatorRegistryWithAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodesCoordinatorRegistryWithAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNodesCoordinatorRegistryWithAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNodesCoordinatorRegistryWithAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNodesCoordinatorRegistryWithAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNodesCoordinatorRegistryWithAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodesCoordinatorRegistryWithAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNodesCoordinatorRegistryWithAuction = fmt.Errorf("proto: unexpected end of group")
)
