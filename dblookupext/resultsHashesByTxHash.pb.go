// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resultsHashesByTxHash.proto

package dblookupext

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ScrHashesAndEpoch is used to store smart contract results and epoch
type ScResultsHashesAndEpoch struct {
	Epoch           uint32   `protobuf:"varint,1,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	ScResultsHashes [][]byte `protobuf:"bytes,2,rep,name=ScResultsHashes,proto3" json:"ScResultsHashes,omitempty"`
}

func (m *ScResultsHashesAndEpoch) Reset()      { *m = ScResultsHashesAndEpoch{} }
func (*ScResultsHashesAndEpoch) ProtoMessage() {}
func (*ScResultsHashesAndEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba151010a8dd02ab, []int{0}
}
func (m *ScResultsHashesAndEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScResultsHashesAndEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScResultsHashesAndEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScResultsHashesAndEpoch.Merge(m, src)
}
func (m *ScResultsHashesAndEpoch) XXX_Size() int {
	return m.Size()
}
func (m *ScResultsHashesAndEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_ScResultsHashesAndEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_ScResultsHashesAndEpoch proto.InternalMessageInfo

func (m *ScResultsHashesAndEpoch) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ScResultsHashesAndEpoch) GetScResultsHashes() [][]byte {
	if m != nil {
		return m.ScResultsHashes
	}
	return nil
}

// ResultsHashesByTxHash is used to store smart contract results hashes and receipt hash for a transaction hash
type ResultsHashesByTxHash struct {
	ReceiptsHash            []byte                     `protobuf:"bytes,1,opt,name=ReceiptsHash,proto3" json:"ReceiptsHash,omitempty"`
	ScResultsHashesAndEpoch []*ScResultsHashesAndEpoch `protobuf:"bytes,2,rep,name=ScResultsHashesAndEpoch,proto3" json:"ScResultsHashesAndEpoch,omitempty"`
}

func (m *ResultsHashesByTxHash) Reset()      { *m = ResultsHashesByTxHash{} }
func (*ResultsHashesByTxHash) ProtoMessage() {}
func (*ResultsHashesByTxHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba151010a8dd02ab, []int{1}
}
func (m *ResultsHashesByTxHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultsHashesByTxHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResultsHashesByTxHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultsHashesByTxHash.Merge(m, src)
}
func (m *ResultsHashesByTxHash) XXX_Size() int {
	return m.Size()
}
func (m *ResultsHashesByTxHash) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultsHashesByTxHash.DiscardUnknown(m)
}

var xxx_messageInfo_ResultsHashesByTxHash proto.InternalMessageInfo

func (m *ResultsHashesByTxHash) GetReceiptsHash() []byte {
	if m != nil {
		return m.ReceiptsHash
	}
	return nil
}

func (m *ResultsHashesByTxHash) GetScResultsHashesAndEpoch() []*ScResultsHashesAndEpoch {
	if m != nil {
		return m.ScResultsHashesAndEpoch
	}
	return nil
}

func init() {
	proto.RegisterType((*ScResultsHashesAndEpoch)(nil), "proto.ScResultsHashesAndEpoch")
	proto.RegisterType((*ResultsHashesByTxHash)(nil), "proto.ResultsHashesByTxHash")
}

func init() { proto.RegisterFile("resultsHashesByTxHash.proto", fileDescriptor_ba151010a8dd02ab) }

var fileDescriptor_ba151010a8dd02ab = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x4a, 0x2d, 0x2e,
	0xcd, 0x29, 0x29, 0xf6, 0x48, 0x2c, 0xce, 0x48, 0x2d, 0x76, 0xaa, 0x0c, 0xa9, 0x00, 0xb1, 0xf4,
	0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x58, 0xc1, 0x94, 0x94, 0x6e, 0x7a, 0x66, 0x49, 0x46, 0x69,
	0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x7a, 0x7e, 0x7a, 0xbe, 0x3e, 0x58, 0x38, 0xa9, 0x34, 0x0d,
	0xcc, 0x03, 0x73, 0xc0, 0x2c, 0x88, 0x2e, 0xa5, 0x48, 0x2e, 0xf1, 0xe0, 0xe4, 0x20, 0x64, 0x63,
	0x1d, 0xf3, 0x52, 0x5c, 0x0b, 0xf2, 0x93, 0x33, 0x84, 0x44, 0xb8, 0x58, 0xc1, 0x0c, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xde, 0x20, 0x08, 0x47, 0x48, 0x83, 0x8b, 0x1f, 0x4d, 0x83, 0x04, 0x93, 0x02,
	0xb3, 0x06, 0x4f, 0x10, 0xba, 0xb0, 0xd2, 0x54, 0x46, 0x2e, 0xd1, 0x20, 0x6c, 0x0e, 0x16, 0x52,
	0xe2, 0xe2, 0x09, 0x4a, 0x4d, 0x4e, 0xcd, 0x2c, 0x80, 0xc8, 0x80, 0x2d, 0xe0, 0x09, 0x42, 0x11,
	0x13, 0x8a, 0xc0, 0xe9, 0x30, 0xb0, 0x7d, 0xdc, 0x46, 0x72, 0x10, 0x1f, 0xe8, 0xe1, 0x50, 0x15,
	0x84, 0x4b, 0xbb, 0x93, 0xeb, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28,
	0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c,
	0x92, 0x63, 0xbc, 0xf1, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4, 0x18, 0x3e,
	0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18,
	0xa2, 0xb8, 0x53, 0x92, 0x72, 0xf2, 0xf3, 0xb3, 0x4b, 0x0b, 0x52, 0x2b, 0x4a, 0x92, 0xd8, 0xc0,
	0xd6, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x42, 0x15, 0xf9, 0xe8, 0x95, 0x01, 0x00, 0x00,
}

func (this *ScResultsHashesAndEpoch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScResultsHashesAndEpoch)
	if !ok {
		that2, ok := that.(ScResultsHashesAndEpoch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if len(this.ScResultsHashes) != len(that1.ScResultsHashes) {
		return false
	}
	for i := range this.ScResultsHashes {
		if !bytes.Equal(this.ScResultsHashes[i], that1.ScResultsHashes[i]) {
			return false
		}
	}
	return true
}
func (this *ResultsHashesByTxHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResultsHashesByTxHash)
	if !ok {
		that2, ok := that.(ResultsHashesByTxHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ReceiptsHash, that1.ReceiptsHash) {
		return false
	}
	if len(this.ScResultsHashesAndEpoch) != len(that1.ScResultsHashesAndEpoch) {
		return false
	}
	for i := range this.ScResultsHashesAndEpoch {
		if !this.ScResultsHashesAndEpoch[i].Equal(that1.ScResultsHashesAndEpoch[i]) {
			return false
		}
	}
	return true
}
func (this *ScResultsHashesAndEpoch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dblookupext.ScResultsHashesAndEpoch{")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "ScResultsHashes: "+fmt.Sprintf("%#v", this.ScResultsHashes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResultsHashesByTxHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dblookupext.ResultsHashesByTxHash{")
	s = append(s, "ReceiptsHash: "+fmt.Sprintf("%#v", this.ReceiptsHash)+",\n")
	if this.ScResultsHashesAndEpoch != nil {
		s = append(s, "ScResultsHashesAndEpoch: "+fmt.Sprintf("%#v", this.ScResultsHashesAndEpoch)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringResultsHashesByTxHash(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ScResultsHashesAndEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScResultsHashesAndEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScResultsHashesAndEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScResultsHashes) > 0 {
		for iNdEx := len(m.ScResultsHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ScResultsHashes[iNdEx])
			copy(dAtA[i:], m.ScResultsHashes[iNdEx])
			i = encodeVarintResultsHashesByTxHash(dAtA, i, uint64(len(m.ScResultsHashes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Epoch != 0 {
		i = encodeVarintResultsHashesByTxHash(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResultsHashesByTxHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultsHashesByTxHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultsHashesByTxHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScResultsHashesAndEpoch) > 0 {
		for iNdEx := len(m.ScResultsHashesAndEpoch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScResultsHashesAndEpoch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResultsHashesByTxHash(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ReceiptsHash) > 0 {
		i -= len(m.ReceiptsHash)
		copy(dAtA[i:], m.ReceiptsHash)
		i = encodeVarintResultsHashesByTxHash(dAtA, i, uint64(len(m.ReceiptsHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintResultsHashesByTxHash(dAtA []byte, offset int, v uint64) int {
	offset -= sovResultsHashesByTxHash(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScResultsHashesAndEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovResultsHashesByTxHash(uint64(m.Epoch))
	}
	if len(m.ScResultsHashes) > 0 {
		for _, b := range m.ScResultsHashes {
			l = len(b)
			n += 1 + l + sovResultsHashesByTxHash(uint64(l))
		}
	}
	return n
}

func (m *ResultsHashesByTxHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReceiptsHash)
	if l > 0 {
		n += 1 + l + sovResultsHashesByTxHash(uint64(l))
	}
	if len(m.ScResultsHashesAndEpoch) > 0 {
		for _, e := range m.ScResultsHashesAndEpoch {
			l = e.Size()
			n += 1 + l + sovResultsHashesByTxHash(uint64(l))
		}
	}
	return n
}

func sovResultsHashesByTxHash(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResultsHashesByTxHash(x uint64) (n int) {
	return sovResultsHashesByTxHash(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ScResultsHashesAndEpoch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScResultsHashesAndEpoch{`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`ScResultsHashes:` + fmt.Sprintf("%v", this.ScResultsHashes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResultsHashesByTxHash) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForScResultsHashesAndEpoch := "[]*ScResultsHashesAndEpoch{"
	for _, f := range this.ScResultsHashesAndEpoch {
		repeatedStringForScResultsHashesAndEpoch += strings.Replace(f.String(), "ScResultsHashesAndEpoch", "ScResultsHashesAndEpoch", 1) + ","
	}
	repeatedStringForScResultsHashesAndEpoch += "}"
	s := strings.Join([]string{`&ResultsHashesByTxHash{`,
		`ReceiptsHash:` + fmt.Sprintf("%v", this.ReceiptsHash) + `,`,
		`ScResultsHashesAndEpoch:` + repeatedStringForScResultsHashesAndEpoch + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringResultsHashesByTxHash(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ScResultsHashesAndEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResultsHashesByTxHash
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScResultsHashesAndEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScResultsHashesAndEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResultsHashesByTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScResultsHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResultsHashesByTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthResultsHashesByTxHash
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthResultsHashesByTxHash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScResultsHashes = append(m.ScResultsHashes, make([]byte, postIndex-iNdEx))
			copy(m.ScResultsHashes[len(m.ScResultsHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResultsHashesByTxHash(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResultsHashesByTxHash
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthResultsHashesByTxHash
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultsHashesByTxHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResultsHashesByTxHash
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultsHashesByTxHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultsHashesByTxHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResultsHashesByTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthResultsHashesByTxHash
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthResultsHashesByTxHash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptsHash = append(m.ReceiptsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptsHash == nil {
				m.ReceiptsHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScResultsHashesAndEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResultsHashesByTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResultsHashesByTxHash
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResultsHashesByTxHash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScResultsHashesAndEpoch = append(m.ScResultsHashesAndEpoch, &ScResultsHashesAndEpoch{})
			if err := m.ScResultsHashesAndEpoch[len(m.ScResultsHashesAndEpoch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResultsHashesByTxHash(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResultsHashesByTxHash
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthResultsHashesByTxHash
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResultsHashesByTxHash(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResultsHashesByTxHash
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResultsHashesByTxHash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResultsHashesByTxHash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResultsHashesByTxHash
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResultsHashesByTxHash
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResultsHashesByTxHash
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResultsHashesByTxHash        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResultsHashesByTxHash          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResultsHashesByTxHash = fmt.Errorf("proto: unexpected end of group")
)
