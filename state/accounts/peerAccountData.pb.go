// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peerAccountData.proto

package accounts

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_multiversx_mx_chain_core_go_data "github.com/multiversx/mx-chain-core-go/data"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SignRate is used to keep the number of success and failed signings
type SignRate struct {
	NumSuccess uint32 `protobuf:"varint,1,opt,name=NumSuccess,proto3" json:"NumSuccess,omitempty"`
	NumFailure uint32 `protobuf:"varint,2,opt,name=NumFailure,proto3" json:"NumFailure,omitempty"`
}

func (m *SignRate) Reset()      { *m = SignRate{} }
func (*SignRate) ProtoMessage() {}
func (*SignRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bd0314afcce126, []int{0}
}
func (m *SignRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignRate.Merge(m, src)
}
func (m *SignRate) XXX_Size() int {
	return m.Size()
}
func (m *SignRate) XXX_DiscardUnknown() {
	xxx_messageInfo_SignRate.DiscardUnknown(m)
}

var xxx_messageInfo_SignRate proto.InternalMessageInfo

func (m *SignRate) GetNumSuccess() uint32 {
	if m != nil {
		return m.NumSuccess
	}
	return 0
}

func (m *SignRate) GetNumFailure() uint32 {
	if m != nil {
		return m.NumFailure
	}
	return 0
}

// PeerAccountData represents the data that defines the PeerAccount
type PeerAccountData struct {
	BLSPublicKey                        []byte        `protobuf:"bytes,1,opt,name=BLSPublicKey,proto3" json:"blsPublicKey"`
	RewardAddress                       []byte        `protobuf:"bytes,2,opt,name=RewardAddress,proto3" json:"rewardAddress,omitempty"`
	ShardId                             uint32        `protobuf:"varint,3,opt,name=ShardId,proto3" json:"shardId"`
	ValidatorSuccessRate                SignRate      `protobuf:"bytes,4,opt,name=ValidatorSuccessRate,proto3" json:"validatorSuccessRate"`
	LeaderSuccessRate                   SignRate      `protobuf:"bytes,5,opt,name=LeaderSuccessRate,proto3" json:"leaderSuccessRate"`
	ValidatorIgnoredSignaturesRate      uint32        `protobuf:"varint,6,opt,name=ValidatorIgnoredSignaturesRate,proto3" json:"validatorIgnoredSignaturesRate"`
	Rating                              uint32        `protobuf:"varint,7,opt,name=Rating,proto3" json:"rating"`
	TempRating                          uint32        `protobuf:"varint,8,opt,name=TempRating,proto3" json:"tempRating"`
	AccumulatedFees                     *math_big.Int `protobuf:"bytes,9,opt,name=AccumulatedFees,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"accumulatedFees,omitempty"`
	NumSelectedInSuccessBlocks          uint32        `protobuf:"varint,10,opt,name=NumSelectedInSuccessBlocks,proto3" json:"numSelectedInSuccessBlocks"`
	IndexInList                         uint32        `protobuf:"varint,11,opt,name=IndexInList,proto3" json:"indexInList"`
	List                                string        `protobuf:"bytes,12,opt,name=List,proto3" json:"list,omitempty"`
	ConsecutiveProposerMisses           uint32        `protobuf:"varint,13,opt,name=ConsecutiveProposerMisses,proto3" json:"consecutiveProposerMisses"`
	TotalValidatorSuccessRate           SignRate      `protobuf:"bytes,14,opt,name=TotalValidatorSuccessRate,proto3" json:"totalValidatorSuccessRate"`
	TotalLeaderSuccessRate              SignRate      `protobuf:"bytes,15,opt,name=TotalLeaderSuccessRate,proto3" json:"totalLeaderSuccessRate"`
	TotalValidatorIgnoredSignaturesRate uint32        `protobuf:"varint,16,opt,name=TotalValidatorIgnoredSignaturesRate,proto3" json:"totalValidatorIgnoredSignaturesRate"`
	Nonce                               uint64        `protobuf:"varint,17,opt,name=Nonce,proto3" json:"nonce"`
	UnStakedEpoch                       uint32        `protobuf:"varint,18,opt,name=UnStakedEpoch,proto3" json:"unStakedEpoch"`
	PreviousList                        string        `protobuf:"bytes,19,opt,name=PreviousList,proto3" json:"previousList,omitempty"`
	PreviousIndexInList                 uint32        `protobuf:"varint,20,opt,name=PreviousIndexInList,proto3" json:"previousIndexInList,omitempty"`
	// Sovereign peer account related fields
	MainChainID []byte `protobuf:"bytes,40,opt,name=MainChainID,proto3" json:"mainChainID,omitempty"`
}

func (m *PeerAccountData) Reset()      { *m = PeerAccountData{} }
func (*PeerAccountData) ProtoMessage() {}
func (*PeerAccountData) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bd0314afcce126, []int{1}
}
func (m *PeerAccountData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerAccountData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PeerAccountData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerAccountData.Merge(m, src)
}
func (m *PeerAccountData) XXX_Size() int {
	return m.Size()
}
func (m *PeerAccountData) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerAccountData.DiscardUnknown(m)
}

var xxx_messageInfo_PeerAccountData proto.InternalMessageInfo

func (m *PeerAccountData) GetBLSPublicKey() []byte {
	if m != nil {
		return m.BLSPublicKey
	}
	return nil
}

func (m *PeerAccountData) GetRewardAddress() []byte {
	if m != nil {
		return m.RewardAddress
	}
	return nil
}

func (m *PeerAccountData) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *PeerAccountData) GetValidatorSuccessRate() SignRate {
	if m != nil {
		return m.ValidatorSuccessRate
	}
	return SignRate{}
}

func (m *PeerAccountData) GetLeaderSuccessRate() SignRate {
	if m != nil {
		return m.LeaderSuccessRate
	}
	return SignRate{}
}

func (m *PeerAccountData) GetValidatorIgnoredSignaturesRate() uint32 {
	if m != nil {
		return m.ValidatorIgnoredSignaturesRate
	}
	return 0
}

func (m *PeerAccountData) GetRating() uint32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *PeerAccountData) GetTempRating() uint32 {
	if m != nil {
		return m.TempRating
	}
	return 0
}

func (m *PeerAccountData) GetAccumulatedFees() *math_big.Int {
	if m != nil {
		return m.AccumulatedFees
	}
	return nil
}

func (m *PeerAccountData) GetNumSelectedInSuccessBlocks() uint32 {
	if m != nil {
		return m.NumSelectedInSuccessBlocks
	}
	return 0
}

func (m *PeerAccountData) GetIndexInList() uint32 {
	if m != nil {
		return m.IndexInList
	}
	return 0
}

func (m *PeerAccountData) GetList() string {
	if m != nil {
		return m.List
	}
	return ""
}

func (m *PeerAccountData) GetConsecutiveProposerMisses() uint32 {
	if m != nil {
		return m.ConsecutiveProposerMisses
	}
	return 0
}

func (m *PeerAccountData) GetTotalValidatorSuccessRate() SignRate {
	if m != nil {
		return m.TotalValidatorSuccessRate
	}
	return SignRate{}
}

func (m *PeerAccountData) GetTotalLeaderSuccessRate() SignRate {
	if m != nil {
		return m.TotalLeaderSuccessRate
	}
	return SignRate{}
}

func (m *PeerAccountData) GetTotalValidatorIgnoredSignaturesRate() uint32 {
	if m != nil {
		return m.TotalValidatorIgnoredSignaturesRate
	}
	return 0
}

func (m *PeerAccountData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *PeerAccountData) GetUnStakedEpoch() uint32 {
	if m != nil {
		return m.UnStakedEpoch
	}
	return 0
}

func (m *PeerAccountData) GetPreviousList() string {
	if m != nil {
		return m.PreviousList
	}
	return ""
}

func (m *PeerAccountData) GetPreviousIndexInList() uint32 {
	if m != nil {
		return m.PreviousIndexInList
	}
	return 0
}

func (m *PeerAccountData) GetMainChainID() []byte {
	if m != nil {
		return m.MainChainID
	}
	return nil
}

func init() {
	proto.RegisterType((*SignRate)(nil), "proto.SignRate")
	proto.RegisterType((*PeerAccountData)(nil), "proto.PeerAccountData")
}

func init() { proto.RegisterFile("peerAccountData.proto", fileDescriptor_26bd0314afcce126) }

var fileDescriptor_26bd0314afcce126 = []byte{
	// 847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0xdb, 0x36,
	0x18, 0xb5, 0xba, 0xfc, 0xd2, 0x76, 0xdc, 0xb0, 0x69, 0x27, 0x67, 0x2b, 0x99, 0xa6, 0xd8, 0xe6,
	0x8b, 0xc5, 0xc6, 0x7e, 0x80, 0x5d, 0x14, 0x18, 0x10, 0xa5, 0x2d, 0xe0, 0x2d, 0x2d, 0x02, 0xba,
	0x1b, 0x86, 0x0d, 0x18, 0x40, 0x4b, 0xac, 0xcc, 0x55, 0x12, 0x0d, 0x92, 0xca, 0x92, 0xbb, 0x3d,
	0x42, 0x1f, 0x63, 0xd8, 0x93, 0xf4, 0x32, 0x97, 0x01, 0x06, 0x70, 0x8b, 0x73, 0x33, 0xe8, 0xaa,
	0x8f, 0x30, 0x88, 0x56, 0x12, 0xb9, 0x91, 0xdb, 0x5e, 0x25, 0x3c, 0xe7, 0x7c, 0xe7, 0x23, 0x3f,
	0x9d, 0x0f, 0x06, 0xb7, 0xc7, 0x8c, 0xc9, 0x5d, 0xdf, 0x17, 0x69, 0xa2, 0x1f, 0x52, 0x4d, 0xbb,
	0x63, 0x29, 0xb4, 0x80, 0x8b, 0xf6, 0xcf, 0xe6, 0x4e, 0xc8, 0xf5, 0x28, 0x1d, 0x76, 0x7d, 0x11,
	0xf7, 0x42, 0x11, 0x8a, 0x9e, 0x85, 0x87, 0xe9, 0x73, 0x7b, 0xb2, 0x07, 0xfb, 0xdf, 0xb4, 0x6a,
	0xfb, 0x3b, 0xb0, 0x32, 0xe0, 0x61, 0x42, 0xa8, 0x66, 0x10, 0x01, 0xf0, 0x34, 0x8d, 0x07, 0xa9,
	0xef, 0x33, 0xa5, 0x5c, 0x67, 0xcb, 0xe9, 0x34, 0x49, 0x09, 0x29, 0xf8, 0xc7, 0x94, 0x47, 0xa9,
	0x64, 0xee, 0x8d, 0x4b, 0xbe, 0x40, 0xb6, 0xff, 0x6e, 0x80, 0xd6, 0xc1, 0xec, 0xdd, 0xe0, 0xd7,
	0xa0, 0xe1, 0xed, 0x0f, 0x0e, 0xd2, 0x61, 0xc4, 0xfd, 0xef, 0xd9, 0xb1, 0x75, 0x6d, 0x78, 0x37,
	0x33, 0x83, 0x1b, 0xc3, 0x48, 0x5d, 0xe2, 0x64, 0x46, 0x05, 0x77, 0x41, 0x93, 0xb0, 0xdf, 0xa9,
	0x0c, 0x76, 0x83, 0x40, 0xe6, 0x97, 0xb9, 0x61, 0xcb, 0x3e, 0xca, 0x0c, 0xfe, 0x50, 0x96, 0x89,
	0xcf, 0x45, 0xcc, 0x35, 0x8b, 0xc7, 0xfa, 0x98, 0xcc, 0x56, 0xc0, 0x4f, 0xc0, 0xf2, 0x60, 0x44,
	0x65, 0xd0, 0x0f, 0xdc, 0x0f, 0xf2, 0x9b, 0x7a, 0xf5, 0xcc, 0xe0, 0x65, 0x35, 0x85, 0xc8, 0x05,
	0x07, 0x29, 0xd8, 0xf8, 0x91, 0x46, 0x3c, 0xa0, 0x5a, 0xc8, 0xe2, 0x9d, 0xf9, 0x2c, 0xdc, 0x85,
	0x2d, 0xa7, 0x53, 0xff, 0xb2, 0x35, 0x9d, 0x52, 0xf7, 0x62, 0x44, 0xde, 0xc7, 0xaf, 0x0c, 0xae,
	0x65, 0x06, 0x6f, 0x1c, 0x56, 0x14, 0x91, 0x4a, 0x2b, 0xf8, 0x13, 0x58, 0xdf, 0x67, 0x34, 0x60,
	0x33, 0xfe, 0x8b, 0xd5, 0xfe, 0xed, 0xc2, 0x7f, 0x3d, 0x7a, 0xb3, 0x82, 0x5c, 0x37, 0x81, 0xbf,
	0x01, 0x74, 0xd9, 0xb1, 0x1f, 0x26, 0x42, 0xb2, 0x20, 0x77, 0xa2, 0x3a, 0x95, 0x6c, 0xda, 0x66,
	0xc9, 0x3e, 0x7d, 0x3b, 0x33, 0x18, 0x1d, 0xbe, 0x55, 0x49, 0xde, 0xe1, 0x04, 0xb7, 0xc1, 0x12,
	0xa1, 0x9a, 0x27, 0xa1, 0xbb, 0x6c, 0x3d, 0x41, 0x66, 0xf0, 0x92, 0xb4, 0x08, 0x29, 0x18, 0xd8,
	0x05, 0xe0, 0x19, 0x8b, 0xc7, 0x85, 0x6e, 0xc5, 0xea, 0xd6, 0x32, 0x83, 0x81, 0xbe, 0x44, 0x49,
	0x49, 0x01, 0x5f, 0x3a, 0xa0, 0xb5, 0xeb, 0xfb, 0x69, 0x9c, 0x46, 0x54, 0xb3, 0xe0, 0x31, 0x63,
	0xca, 0x5d, 0xb5, 0x5f, 0xfa, 0x79, 0x66, 0x70, 0x9b, 0xce, 0x52, 0x57, 0xdf, 0xfa, 0xaf, 0x7f,
	0xf0, 0xa3, 0x98, 0xea, 0x51, 0x6f, 0xc8, 0xc3, 0x6e, 0x3f, 0xd1, 0x0f, 0x4a, 0x99, 0x8f, 0xd3,
	0x48, 0xf3, 0x43, 0x26, 0xd5, 0x51, 0x2f, 0x3e, 0xda, 0xf1, 0x47, 0x94, 0x27, 0x3b, 0xbe, 0x90,
	0x6c, 0x27, 0x14, 0xbd, 0x20, 0xdf, 0x16, 0x8f, 0x87, 0xfd, 0x44, 0xef, 0x51, 0xa5, 0x99, 0x24,
	0x6f, 0xb6, 0x87, 0xbf, 0x82, 0xcd, 0x3c, 0xf1, 0x2c, 0x62, 0xbe, 0x66, 0x41, 0x3f, 0x29, 0xc6,
	0xed, 0x45, 0xc2, 0x7f, 0xa1, 0x5c, 0x60, 0x9f, 0x84, 0x32, 0x83, 0x37, 0x93, 0xb9, 0x2a, 0xf2,
	0x16, 0x07, 0xf8, 0x05, 0xa8, 0xf7, 0x93, 0x80, 0x1d, 0xf5, 0x93, 0x7d, 0xae, 0xb4, 0x5b, 0xb7,
	0x86, 0xad, 0xcc, 0xe0, 0x3a, 0xbf, 0x82, 0x49, 0x59, 0x03, 0x3f, 0x05, 0x0b, 0x56, 0xdb, 0xd8,
	0x72, 0x3a, 0xab, 0x1e, 0xcc, 0x0c, 0x5e, 0x8b, 0xb8, 0xd2, 0xa5, 0xe8, 0x5b, 0x1e, 0xfe, 0x02,
	0xda, 0x7b, 0x22, 0x51, 0xcc, 0x4f, 0xf3, 0x01, 0x1c, 0x48, 0x31, 0x16, 0x8a, 0xc9, 0x27, 0x5c,
	0x29, 0xa6, 0xdc, 0xa6, 0x6d, 0x74, 0x37, 0x1f, 0xab, 0x3f, 0x4f, 0x44, 0xe6, 0xd7, 0xc3, 0x31,
	0x68, 0x3f, 0x13, 0x9a, 0x46, 0x95, 0xcb, 0xb2, 0x56, 0x1d, 0xe6, 0x7b, 0x45, 0x98, 0xdb, 0x7a,
	0x5e, 0x25, 0x99, 0x6f, 0x0a, 0x43, 0x70, 0xc7, 0x92, 0xd7, 0x77, 0xa7, 0x55, 0xdd, 0x0e, 0x15,
	0xed, 0xee, 0xe8, 0xca, 0x32, 0x32, 0xc7, 0x0e, 0x1e, 0x83, 0xfb, 0xb3, 0xb7, 0xa8, 0x5e, 0xa5,
	0x9b, 0x76, 0x82, 0x9f, 0x65, 0x06, 0xdf, 0xd7, 0xef, 0x96, 0x93, 0xf7, 0xf1, 0x84, 0x18, 0x2c,
	0x3e, 0x15, 0x89, 0xcf, 0xdc, 0xf5, 0x2d, 0xa7, 0xb3, 0xe0, 0xad, 0x66, 0x06, 0x2f, 0x26, 0x39,
	0x40, 0xa6, 0x38, 0xfc, 0x06, 0x34, 0x7f, 0x48, 0x06, 0x9a, 0xbe, 0x60, 0xc1, 0xa3, 0xb1, 0xf0,
	0x47, 0x2e, 0xb4, 0xb7, 0x58, 0xcf, 0x0c, 0x6e, 0xa6, 0x65, 0x82, 0xcc, 0xea, 0xe0, 0xb7, 0xa0,
	0x71, 0x20, 0xd9, 0x21, 0x17, 0xa9, 0xb2, 0xe1, 0xb9, 0x65, 0xc3, 0xb3, 0x99, 0x8f, 0x67, 0x5c,
	0xc2, 0x4b, 0x21, 0x9a, 0xd1, 0xc3, 0x01, 0xb8, 0x75, 0x71, 0x2e, 0xe7, 0x75, 0xc3, 0xb6, 0xbf,
	0x97, 0x19, 0x7c, 0x77, 0x7c, 0x9d, 0x2e, 0xb9, 0x55, 0x55, 0xc3, 0x07, 0xa0, 0xfe, 0x84, 0xf2,
	0x64, 0x2f, 0x5f, 0xca, 0xfe, 0x43, 0xb7, 0x63, 0x57, 0xbd, 0x9d, 0x19, 0x7c, 0x3b, 0xbe, 0x82,
	0x4b, 0x26, 0x65, 0xb5, 0xe7, 0x9d, 0x9c, 0xa1, 0xda, 0xe9, 0x19, 0xaa, 0xbd, 0x3e, 0x43, 0xce,
	0x1f, 0x13, 0xe4, 0xfc, 0x39, 0x41, 0xce, 0xab, 0x09, 0x72, 0x4e, 0x26, 0xc8, 0x39, 0x9d, 0x20,
	0xe7, 0xdf, 0x09, 0x72, 0xfe, 0x9b, 0xa0, 0xda, 0xeb, 0x09, 0x72, 0x5e, 0x9e, 0xa3, 0xda, 0xc9,
	0x39, 0xaa, 0x9d, 0x9e, 0xa3, 0xda, 0xcf, 0x2b, 0x74, 0xfa, 0x83, 0xa4, 0x86, 0x4b, 0x36, 0x32,
	0x5f, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x84, 0x63, 0x16, 0x2b, 0x43, 0x07, 0x00, 0x00,
}

func (this *SignRate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignRate)
	if !ok {
		that2, ok := that.(SignRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumSuccess != that1.NumSuccess {
		return false
	}
	if this.NumFailure != that1.NumFailure {
		return false
	}
	return true
}
func (this *PeerAccountData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerAccountData)
	if !ok {
		that2, ok := that.(PeerAccountData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BLSPublicKey, that1.BLSPublicKey) {
		return false
	}
	if !bytes.Equal(this.RewardAddress, that1.RewardAddress) {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if !this.ValidatorSuccessRate.Equal(&that1.ValidatorSuccessRate) {
		return false
	}
	if !this.LeaderSuccessRate.Equal(&that1.LeaderSuccessRate) {
		return false
	}
	if this.ValidatorIgnoredSignaturesRate != that1.ValidatorIgnoredSignaturesRate {
		return false
	}
	if this.Rating != that1.Rating {
		return false
	}
	if this.TempRating != that1.TempRating {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.AccumulatedFees, that1.AccumulatedFees) {
			return false
		}
	}
	if this.NumSelectedInSuccessBlocks != that1.NumSelectedInSuccessBlocks {
		return false
	}
	if this.IndexInList != that1.IndexInList {
		return false
	}
	if this.List != that1.List {
		return false
	}
	if this.ConsecutiveProposerMisses != that1.ConsecutiveProposerMisses {
		return false
	}
	if !this.TotalValidatorSuccessRate.Equal(&that1.TotalValidatorSuccessRate) {
		return false
	}
	if !this.TotalLeaderSuccessRate.Equal(&that1.TotalLeaderSuccessRate) {
		return false
	}
	if this.TotalValidatorIgnoredSignaturesRate != that1.TotalValidatorIgnoredSignaturesRate {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.UnStakedEpoch != that1.UnStakedEpoch {
		return false
	}
	if this.PreviousList != that1.PreviousList {
		return false
	}
	if this.PreviousIndexInList != that1.PreviousIndexInList {
		return false
	}
	if !bytes.Equal(this.MainChainID, that1.MainChainID) {
		return false
	}
	return true
}
func (this *SignRate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&accounts.SignRate{")
	s = append(s, "NumSuccess: "+fmt.Sprintf("%#v", this.NumSuccess)+",\n")
	s = append(s, "NumFailure: "+fmt.Sprintf("%#v", this.NumFailure)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerAccountData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&accounts.PeerAccountData{")
	s = append(s, "BLSPublicKey: "+fmt.Sprintf("%#v", this.BLSPublicKey)+",\n")
	s = append(s, "RewardAddress: "+fmt.Sprintf("%#v", this.RewardAddress)+",\n")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	s = append(s, "ValidatorSuccessRate: "+strings.Replace(this.ValidatorSuccessRate.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "LeaderSuccessRate: "+strings.Replace(this.LeaderSuccessRate.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ValidatorIgnoredSignaturesRate: "+fmt.Sprintf("%#v", this.ValidatorIgnoredSignaturesRate)+",\n")
	s = append(s, "Rating: "+fmt.Sprintf("%#v", this.Rating)+",\n")
	s = append(s, "TempRating: "+fmt.Sprintf("%#v", this.TempRating)+",\n")
	s = append(s, "AccumulatedFees: "+fmt.Sprintf("%#v", this.AccumulatedFees)+",\n")
	s = append(s, "NumSelectedInSuccessBlocks: "+fmt.Sprintf("%#v", this.NumSelectedInSuccessBlocks)+",\n")
	s = append(s, "IndexInList: "+fmt.Sprintf("%#v", this.IndexInList)+",\n")
	s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	s = append(s, "ConsecutiveProposerMisses: "+fmt.Sprintf("%#v", this.ConsecutiveProposerMisses)+",\n")
	s = append(s, "TotalValidatorSuccessRate: "+strings.Replace(this.TotalValidatorSuccessRate.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "TotalLeaderSuccessRate: "+strings.Replace(this.TotalLeaderSuccessRate.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "TotalValidatorIgnoredSignaturesRate: "+fmt.Sprintf("%#v", this.TotalValidatorIgnoredSignaturesRate)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "UnStakedEpoch: "+fmt.Sprintf("%#v", this.UnStakedEpoch)+",\n")
	s = append(s, "PreviousList: "+fmt.Sprintf("%#v", this.PreviousList)+",\n")
	s = append(s, "PreviousIndexInList: "+fmt.Sprintf("%#v", this.PreviousIndexInList)+",\n")
	s = append(s, "MainChainID: "+fmt.Sprintf("%#v", this.MainChainID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPeerAccountData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SignRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumFailure != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.NumFailure))
		i--
		dAtA[i] = 0x10
	}
	if m.NumSuccess != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.NumSuccess))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeerAccountData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerAccountData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerAccountData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MainChainID) > 0 {
		i -= len(m.MainChainID)
		copy(dAtA[i:], m.MainChainID)
		i = encodeVarintPeerAccountData(dAtA, i, uint64(len(m.MainChainID)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.PreviousIndexInList != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.PreviousIndexInList))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.PreviousList) > 0 {
		i -= len(m.PreviousList)
		copy(dAtA[i:], m.PreviousList)
		i = encodeVarintPeerAccountData(dAtA, i, uint64(len(m.PreviousList)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.UnStakedEpoch != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.UnStakedEpoch))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Nonce != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.TotalValidatorIgnoredSignaturesRate != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.TotalValidatorIgnoredSignaturesRate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	{
		size, err := m.TotalLeaderSuccessRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.TotalValidatorSuccessRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if m.ConsecutiveProposerMisses != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.ConsecutiveProposerMisses))
		i--
		dAtA[i] = 0x68
	}
	if len(m.List) > 0 {
		i -= len(m.List)
		copy(dAtA[i:], m.List)
		i = encodeVarintPeerAccountData(dAtA, i, uint64(len(m.List)))
		i--
		dAtA[i] = 0x62
	}
	if m.IndexInList != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.IndexInList))
		i--
		dAtA[i] = 0x58
	}
	if m.NumSelectedInSuccessBlocks != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.NumSelectedInSuccessBlocks))
		i--
		dAtA[i] = 0x50
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.AccumulatedFees)
		i -= size
		if _, err := __caster.MarshalTo(m.AccumulatedFees, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.TempRating != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.TempRating))
		i--
		dAtA[i] = 0x40
	}
	if m.Rating != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.Rating))
		i--
		dAtA[i] = 0x38
	}
	if m.ValidatorIgnoredSignaturesRate != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.ValidatorIgnoredSignaturesRate))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.LeaderSuccessRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.ValidatorSuccessRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ShardId != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintPeerAccountData(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BLSPublicKey) > 0 {
		i -= len(m.BLSPublicKey)
		copy(dAtA[i:], m.BLSPublicKey)
		i = encodeVarintPeerAccountData(dAtA, i, uint64(len(m.BLSPublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPeerAccountData(dAtA []byte, offset int, v uint64) int {
	offset -= sovPeerAccountData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumSuccess != 0 {
		n += 1 + sovPeerAccountData(uint64(m.NumSuccess))
	}
	if m.NumFailure != 0 {
		n += 1 + sovPeerAccountData(uint64(m.NumFailure))
	}
	return n
}

func (m *PeerAccountData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BLSPublicKey)
	if l > 0 {
		n += 1 + l + sovPeerAccountData(uint64(l))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovPeerAccountData(uint64(l))
	}
	if m.ShardId != 0 {
		n += 1 + sovPeerAccountData(uint64(m.ShardId))
	}
	l = m.ValidatorSuccessRate.Size()
	n += 1 + l + sovPeerAccountData(uint64(l))
	l = m.LeaderSuccessRate.Size()
	n += 1 + l + sovPeerAccountData(uint64(l))
	if m.ValidatorIgnoredSignaturesRate != 0 {
		n += 1 + sovPeerAccountData(uint64(m.ValidatorIgnoredSignaturesRate))
	}
	if m.Rating != 0 {
		n += 1 + sovPeerAccountData(uint64(m.Rating))
	}
	if m.TempRating != 0 {
		n += 1 + sovPeerAccountData(uint64(m.TempRating))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.AccumulatedFees)
		n += 1 + l + sovPeerAccountData(uint64(l))
	}
	if m.NumSelectedInSuccessBlocks != 0 {
		n += 1 + sovPeerAccountData(uint64(m.NumSelectedInSuccessBlocks))
	}
	if m.IndexInList != 0 {
		n += 1 + sovPeerAccountData(uint64(m.IndexInList))
	}
	l = len(m.List)
	if l > 0 {
		n += 1 + l + sovPeerAccountData(uint64(l))
	}
	if m.ConsecutiveProposerMisses != 0 {
		n += 1 + sovPeerAccountData(uint64(m.ConsecutiveProposerMisses))
	}
	l = m.TotalValidatorSuccessRate.Size()
	n += 1 + l + sovPeerAccountData(uint64(l))
	l = m.TotalLeaderSuccessRate.Size()
	n += 1 + l + sovPeerAccountData(uint64(l))
	if m.TotalValidatorIgnoredSignaturesRate != 0 {
		n += 2 + sovPeerAccountData(uint64(m.TotalValidatorIgnoredSignaturesRate))
	}
	if m.Nonce != 0 {
		n += 2 + sovPeerAccountData(uint64(m.Nonce))
	}
	if m.UnStakedEpoch != 0 {
		n += 2 + sovPeerAccountData(uint64(m.UnStakedEpoch))
	}
	l = len(m.PreviousList)
	if l > 0 {
		n += 2 + l + sovPeerAccountData(uint64(l))
	}
	if m.PreviousIndexInList != 0 {
		n += 2 + sovPeerAccountData(uint64(m.PreviousIndexInList))
	}
	l = len(m.MainChainID)
	if l > 0 {
		n += 2 + l + sovPeerAccountData(uint64(l))
	}
	return n
}

func sovPeerAccountData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPeerAccountData(x uint64) (n int) {
	return sovPeerAccountData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SignRate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignRate{`,
		`NumSuccess:` + fmt.Sprintf("%v", this.NumSuccess) + `,`,
		`NumFailure:` + fmt.Sprintf("%v", this.NumFailure) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerAccountData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerAccountData{`,
		`BLSPublicKey:` + fmt.Sprintf("%v", this.BLSPublicKey) + `,`,
		`RewardAddress:` + fmt.Sprintf("%v", this.RewardAddress) + `,`,
		`ShardId:` + fmt.Sprintf("%v", this.ShardId) + `,`,
		`ValidatorSuccessRate:` + strings.Replace(strings.Replace(this.ValidatorSuccessRate.String(), "SignRate", "SignRate", 1), `&`, ``, 1) + `,`,
		`LeaderSuccessRate:` + strings.Replace(strings.Replace(this.LeaderSuccessRate.String(), "SignRate", "SignRate", 1), `&`, ``, 1) + `,`,
		`ValidatorIgnoredSignaturesRate:` + fmt.Sprintf("%v", this.ValidatorIgnoredSignaturesRate) + `,`,
		`Rating:` + fmt.Sprintf("%v", this.Rating) + `,`,
		`TempRating:` + fmt.Sprintf("%v", this.TempRating) + `,`,
		`AccumulatedFees:` + fmt.Sprintf("%v", this.AccumulatedFees) + `,`,
		`NumSelectedInSuccessBlocks:` + fmt.Sprintf("%v", this.NumSelectedInSuccessBlocks) + `,`,
		`IndexInList:` + fmt.Sprintf("%v", this.IndexInList) + `,`,
		`List:` + fmt.Sprintf("%v", this.List) + `,`,
		`ConsecutiveProposerMisses:` + fmt.Sprintf("%v", this.ConsecutiveProposerMisses) + `,`,
		`TotalValidatorSuccessRate:` + strings.Replace(strings.Replace(this.TotalValidatorSuccessRate.String(), "SignRate", "SignRate", 1), `&`, ``, 1) + `,`,
		`TotalLeaderSuccessRate:` + strings.Replace(strings.Replace(this.TotalLeaderSuccessRate.String(), "SignRate", "SignRate", 1), `&`, ``, 1) + `,`,
		`TotalValidatorIgnoredSignaturesRate:` + fmt.Sprintf("%v", this.TotalValidatorIgnoredSignaturesRate) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`UnStakedEpoch:` + fmt.Sprintf("%v", this.UnStakedEpoch) + `,`,
		`PreviousList:` + fmt.Sprintf("%v", this.PreviousList) + `,`,
		`PreviousIndexInList:` + fmt.Sprintf("%v", this.PreviousIndexInList) + `,`,
		`MainChainID:` + fmt.Sprintf("%v", this.MainChainID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPeerAccountData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SignRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeerAccountData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSuccess", wireType)
			}
			m.NumSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSuccess |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFailure", wireType)
			}
			m.NumFailure = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFailure |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeerAccountData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerAccountData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeerAccountData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerAccountData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerAccountData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BLSPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BLSPublicKey = append(m.BLSPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BLSPublicKey == nil {
				m.BLSPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = append(m.RewardAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAddress == nil {
				m.RewardAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSuccessRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorSuccessRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderSuccessRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaderSuccessRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIgnoredSignaturesRate", wireType)
			}
			m.ValidatorIgnoredSignaturesRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIgnoredSignaturesRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			m.Rating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rating |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempRating", wireType)
			}
			m.TempRating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TempRating |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedFees", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.AccumulatedFees = tmp
				}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSelectedInSuccessBlocks", wireType)
			}
			m.NumSelectedInSuccessBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSelectedInSuccessBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexInList", wireType)
			}
			m.IndexInList = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexInList |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveProposerMisses", wireType)
			}
			m.ConsecutiveProposerMisses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsecutiveProposerMisses |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValidatorSuccessRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalValidatorSuccessRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLeaderSuccessRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLeaderSuccessRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValidatorIgnoredSignaturesRate", wireType)
			}
			m.TotalValidatorIgnoredSignaturesRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalValidatorIgnoredSignaturesRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedEpoch", wireType)
			}
			m.UnStakedEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnStakedEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousIndexInList", wireType)
			}
			m.PreviousIndexInList = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousIndexInList |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainChainID = append(m.MainChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.MainChainID == nil {
				m.MainChainID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeerAccountData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPeerAccountData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPeerAccountData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPeerAccountData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPeerAccountData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPeerAccountData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPeerAccountData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPeerAccountData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPeerAccountData = fmt.Errorf("proto: unexpected end of group")
)
