syntax = "proto3";

package proto;

option go_package = "state";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// SignRate is used to keep the number of success and failed signings
message SignRate {
    uint32 NumSuccess = 1;
    uint32 NumFailure = 2;
}

// ValidatorApiResponse represents the data which is fetched from each validator for returning it in API call
message ValidatorApiResponse {
    float   TempRating                          = 1 [(gogoproto.jsontag) = "tempRating"];
    uint32  NumLeaderSuccess                    = 2 [(gogoproto.jsontag) = "numLeaderSuccess"];
    uint32  NumLeaderFailure                    = 3 [(gogoproto.jsontag) = "numLeaderFailure"];
    uint32  NumValidatorSuccess                 = 4 [(gogoproto.jsontag) = "numValidatorSuccess"];
    uint32  NumValidatorFailure                 = 5 [(gogoproto.jsontag) = "numValidatorFailure"];
    uint32  NumValidatorIgnoredSignatures       = 6 [(gogoproto.jsontag) = "numValidatorIgnoredSignatures"];
    float   Rating                              = 7 [(gogoproto.jsontag) = "rating"];
    float   RatingModifier                      = 8 [(gogoproto.jsontag) = "ratingModifier"];
    uint32  TotalNumLeaderSuccess               = 9 [(gogoproto.jsontag) = "totalNumLeaderSuccess"];
    uint32  TotalNumLeaderFailure               = 10 [(gogoproto.jsontag) = "totalNumLeaderFailure"];
    uint32  TotalNumValidatorSuccess            = 11 [(gogoproto.jsontag) = "totalNumValidatorSuccess"];
    uint32  TotalNumValidatorFailure            = 12 [(gogoproto.jsontag) = "totalNumValidatorFailure"];
    uint32  TotalNumValidatorIgnoredSignatures  = 13 [(gogoproto.jsontag) = "totalNumValidatorIgnoredSignatures"];
    uint32  ShardId                             = 14 [(gogoproto.jsontag) = "shardId"];
    string  ValidatorStatus                     = 15 [(gogoproto.jsontag) = "validatorStatus,omitempty"];
}

// PeerAccountData represents the data that defines the PeerAccount
message PeerAccountData {
    bytes       BLSPublicKey                        = 1 [(gogoproto.jsontag) = "blsPublicKey"];
    bytes       RewardAddress                       = 2 [(gogoproto.jsontag) = "rewardAddress,omitempty"];
    uint32      ShardId                             = 3 [(gogoproto.jsontag) = "shardId"];
    SignRate    ValidatorSuccessRate                = 4 [(gogoproto.jsontag) = "validatorSuccessRate", (gogoproto.nullable) = false];
    SignRate    LeaderSuccessRate                   = 5 [(gogoproto.jsontag) = "leaderSuccessRate", (gogoproto.nullable) = false];
    uint32      ValidatorIgnoredSignaturesRate      = 6 [(gogoproto.jsontag) = "validatorIgnoredSignaturesRate"];
    uint32      Rating                              = 7 [(gogoproto.jsontag) = "rating"];
    uint32      TempRating                          = 8 [(gogoproto.jsontag) = "tempRating"];
    bytes       AccumulatedFees                     = 9 [(gogoproto.jsontag) = "accumulatedFees,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster"];
    uint32      NumSelectedInSuccessBlocks          = 10 [(gogoproto.jsontag) = "numSelectedInSuccessBlocks"];
    uint32      IndexInList                         = 11 [(gogoproto.jsontag) = "indexInList"];
    string      List                                = 12 [(gogoproto.jsontag) = "list,omitempty"];
    uint32      ConsecutiveProposerMisses           = 13 [(gogoproto.jsontag) = "consecutiveProposerMisses"];
    SignRate    TotalValidatorSuccessRate           = 14 [(gogoproto.jsontag) = "totalValidatorSuccessRate", (gogoproto.nullable) = false];
    SignRate    TotalLeaderSuccessRate              = 15 [(gogoproto.jsontag) = "totalLeaderSuccessRate", (gogoproto.nullable) = false];
    uint32      TotalValidatorIgnoredSignaturesRate = 16 [(gogoproto.jsontag) = "totalValidatorIgnoredSignaturesRate"];
    uint64      Nonce                               = 17 [(gogoproto.jsontag) = "nonce"];
    uint32      UnStakedEpoch                       = 18 [(gogoproto.jsontag) = "unStakedEpoch"];
}
